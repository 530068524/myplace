{"title": "Input-covering schedules for multithreaded programs.", "fields": ["bounded function", "posix threads", "nondeterministic algorithm", "symbolic execution", "static analysis"], "abstract": "We propose constraining multithreaded execution to small sets of  input-covering schedules , which we define as follows: given a program P, we say that a set of schedules \u2211  covers  all inputs of program P if, when given any input, P's execution can be constrained to some schedule in \u2211 and still produce a semantically valid result.   Our approach is to first compute a small \u2211 for a given program P, and then, at runtime, constrain P's execution to always follow some schedule in \u2211, and never deviate. We have designed an algorithm that uses symbolic execution to systematically enumerate a set of input-covering schedules, \u2211. To deal with programs that run for an unbounded length of time, we partition execution into  bounded epochs , find input-covering schedules for each epoch in isolation, and then piece the schedules together at runtime. We have implemented this algorithm along with a constrained execution runtime for pthreads programs, and we report results   Our approach has the following advantage: because all possible runtime schedules are known  a priori , we can seek to validate the program by thoroughly verifying each schedule in \u2211, in isolation, without needing to reason about the huge space of thread interleavings that arises due to conventional nondeterministic execution.", "citation": "Citations (15)", "departments": ["University of Washington", "University of Washington", "University of Washington"], "authors": ["Tom Bergan.....http://dblp.org/pers/hd/b/Bergan:Tom", "Luis Ceze.....http://dblp.org/pers/hd/c/Ceze:Luis", "Dan Grossman.....http://dblp.org/pers/hd/g/Grossman:Dan"], "conf": "oopsla", "year": "2013", "pages": 16}