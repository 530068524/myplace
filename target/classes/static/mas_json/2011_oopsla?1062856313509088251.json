{"title": "First-class state change in plaid.", "fields": ["state diagram", "object model", "documentation", "smalltalk", "compiler"], "abstract": "Objects model the world, and state is fundamental to a faithful modeling. Engineers use state machines to understand and reason about state transitions, but programming languages provide little support for building software based on state abstractions. We propose Plaid, a language in which objects are modeled not just in terms of classes, but in terms of changing abstract states. Each state may have its own representation, as well as methods that may transition the object into a new state. A formal model precisely defines the semantics of core Plaid constructs such as state transition and trait-like state composition. We evaluate Plaid through a series of examples taken from the Plaid compiler and the standard libraries of Smalltalk and Java. These examples show how Plaid can more closely model state-based designs, enhancing understandability, enhancing dynamic error checking, and providing reuse benefits.", "citation": "Citations (69)", "departments": ["Carnegie Mellon University", "Carnegie Mellon University", "Carnegie Mellon University", "Carnegie Mellon University", "University of Chile"], "authors": ["Joshua Sunshine.....http://dblp.org/pers/hd/s/Sunshine:Joshua", "Karl Naden.....http://dblp.org/pers/hd/n/Naden:Karl", "Sven Stork.....http://dblp.org/pers/hd/s/Stork:Sven", "Jonathan Aldrich.....http://dblp.org/pers/hd/a/Aldrich:Jonathan", "\u00c9ric Tanter.....http://dblp.org/pers/hd/t/Tanter:=Eacute=ric"], "conf": "oopsla", "year": "2011", "pages": 20}