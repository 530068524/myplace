{"title": "Load balancing on speed.", "fields": ["thread", "run queue", "linux kernel", "network load balancing services", "task parallelism"], "abstract": "To fully exploit multicore processors, applications are expected to provide a large degree of thread-level parallelism. While adequate for low core counts and their typical workloads, the current load balancing support in operating systems may not be able to achieve efficient hardware utilization for parallel workloads. Balancing run queue length globally ignores the needs of parallel applications where threads are required to make equal progress. In this paper we present a load balancing technique designed specifically for parallel applications running on multicore systems. Instead of balancing run queue length, our algorithm balances the time a thread has executed on ``faster'' and ``slower'' cores. We provide a user level implementation of speed balancing on UMA and NUMA multi-socket architectures running Linux and discuss behavior across a variety of workloads, usage scenarios and programming models. Our results indicate that speed balancing when compared to the native Linux load balancing improves performance and provides good performance isolation in all cases considered. Speed balancing is also able to provide comparable or better performance than DWRR, a fair multi-processor scheduling implementation inside the Linux kernel. Furthermore, parallel application performance is often determined by the implementation of synchronization operations and speed balancing alleviates the need for tuning the implementations of such primitives.", "citation": "Citations (54)", "year": "2010", "departments": ["Lawrence Berkeley National Laboratory", "Lawrence Berkeley National Laboratory", "Lawrence Berkeley National Laboratory"], "conf": "ppopp", "authors": ["Steven A. Hofmeyr.....http://dblp.org/pers/hd/h/Hofmeyr:Steven_A=", "Costin Iancu.....http://dblp.org/pers/hd/i/Iancu:Costin", "Filip Blagojevic.....http://dblp.org/pers/hd/b/Blagojevic:Filip"], "pages": 12}