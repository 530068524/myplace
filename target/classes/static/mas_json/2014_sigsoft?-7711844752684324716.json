{"title": "Vector abstraction and concretization for scalable detection of refactorings.", "fields": ["source lines of code", "ant", "abstraction", "code refactoring", "software evolution"], "abstract": "Automated techniques have been proposed to either identify refactoring opportunities (i.e., code fragments that can be but have not yet been restructured in a program), or reconstruct historical refactorings (i.e., code restructuring operations that have happened between different versions of a program). In this paper, we propose a new technique that can detect both refactoring opportunities and historical refactorings in large code bases. The key of our technique is the design of vector abstraction and concretization operations that can encode code changes induced by certain refactorings as characteristic vectors. Thus, the problem of identifying refactorings can be reduced to the problem of identifying matching vectors, which can be solved efficiently. We have implemented our technique for Java. The prototype is applied to 200 bundle projects from the Eclipse ecosystem containing 4.5 million lines of code, and reports in total more than 32K instances of 17 types of refactoring opportunities, taking 25 minutes on average for each type. The prototype is also applied to 14 versions of 3 smaller programs (JMeter, Ant, XML-Security), and detects (1) more than 2.8K refactoring opportunities within individual versions with a precision of about 87%, and (2) more than 190 historical refactorings across consecutive versions of the programs with a precision of about 92%.", "citation": "Citations (6)", "departments": ["National University of Singapore", "Singapore Management University", "National University of Singapore"], "authors": ["Narcisa Andreea Milea.....http://dblp.org/pers/hd/m/Milea:Narcisa_Andreea", "Lingxiao Jiang.....http://dblp.org/pers/hd/j/Jiang:Lingxiao", "Siau-Cheng Khoo.....http://dblp.org/pers/hd/k/Khoo:Siau=Cheng"], "conf": "sigsoft", "year": "2014", "pages": 12}