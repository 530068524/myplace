{"title": "Lightweight Memory Tracing.", "fields": ["conventional memory", "uniform memory access", "memory segmentation", "memory map", "interleaved memory"], "abstract": "Memory tracing (executing additional code for every memory access of a program) is a powerful technique with many applications, e.g., debugging, taint checking, or tracking dataflow. Current approaches are limited: software-only memory tracing incurs high performance overhead (e.g., for Libdft up to 10\u00d7) because every single memory access of the application is checked by additional code that is not part of the original application and hardware is limited to a small set of watched locations.\n\nThis paper introduces memTrace, a lightweight memory tracing technique that builds on dynamic on-the-fly cross-ISA binary translation of 32-bit code to 64-bit code. Our software-only approach enables memory tracing for unmodified, binary-only \u00d786 applications using the \u00d764 extension that is available in current CPUs; no OS extensions or special hardware is required. The additional registers in \u00d764 and the wider memory addressing enable a low-overhead tracing infrastructure that is protected from the application code (i.e., uses disjunct registers and memory regions). MemTrace handles multi-threaded applications. Two case studies discuss a framework for unlimited read and write watchpoints and an allocation-based memory checker similar in functionality to memgrind.\n\nThe performance evaluation of memTrace shows that the time overhead is between 1.3\u00d7 and 3.1\u00d7 for the SPEC CPU2006 benchmarks, with a geometric mean of 1.97\u00d7.", "citation": "Citations (11)", "departments": ["ETH Zurich", "ETH Zurich", "ETH Zurich"], "authors": ["Mathias Payer.....http://dblp.org/pers/hd/p/Payer:Mathias", "Enrico Kravina.....http://dblp.org/pers/hd/k/Kravina:Enrico", "Thomas R. Gross.....http://dblp.org/pers/hd/g/Gross:Thomas_R="], "conf": "usenix", "year": "2013", "pages": 12}