{"title": "Quasi-static scheduling for safe futures.", "fields": ["dataflow", "multithreading", "java concurrency", "thread", "automatic parallelization"], "abstract": "Migrating sequential programs to effectively utilize next generation multicore architectures is a key challenge facing application developers and implementors. Languages like Java that support complex control- and dataflow abstractions confound classical automatic parallelization techniques. On the other hand, introducing multithreading and concurrency control explicitly into programs can impose a high conceptual burden on the programmer, and may entail a significant rewrite of the original program.   In this paper, we consider a new technique to address this issue. Our approach makes use of futures, a simple annotation that introduces asynchronous concurrency into Java programs, but provides no concurrency control. To ensure concurrent execution does not yield behavior inconsistent with sequential execution (i.e., execution yielded by erasing all futures), we present a new interprocedural summary-based dataflow analysis. The analysis inserts lightweight barriers that block and resume threads executing futures if a dependency violation may ensue. There are no constraints on how threads execute other than those imposed by these barriers.   Our experimental results indicate futures can be leveraged to transparently ensure safety and profitably exploit parallelism; in contrast to earlier efforts, our technique is completely portable, and requires no modifications to the underlying JVM.", "citation": "Citations (24)", "year": "2008", "departments": ["Purdue University", "Purdue University", "Purdue University"], "conf": "ppopp", "authors": ["Armand Navabi.....http://dblp.org/pers/hd/n/Navabi:Armand", "Xiangyu Zhang.....http://dblp.org/pers/hd/z/Zhang_0001:Xiangyu", "Suresh Jagannathan.....http://dblp.org/pers/hd/j/Jagannathan:Suresh"], "pages": 10}