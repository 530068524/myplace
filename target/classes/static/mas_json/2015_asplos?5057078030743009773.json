{"title": "NumaGiC: a Garbage Collector for Big Data on Big NUMA Machines.", "fields": ["memory footprint", "thread", "heap", "ranging", "garbage"], "abstract": "On contemporary cache-coherent Non-Uniform Memory Access (ccNUMA) architectures, applications with a large memory footprint suffer from the cost of the garbage collector (GC), because, as the GC scans the reference graph, it makes many remote memory accesses, saturating the interconnect between memory nodes. We address this problem with NumaGiC, a GC with a mostly-distributed design. In order to maximise memory access locality during collection, a GC thread avoids accessing a different memory node, instead notifying a remote GC thread with a message; nonetheless, NumaGiC avoids the drawbacks of a pure distributed design, which tends to decrease parallelism. We compare NumaGiC with Parallel Scavenge and NAPS on two different ccNUMA architectures running on the Hotspot Java Virtual Machine of OpenJDK 7. On Spark and Neo4j, two industry-strength analytics applications, with heap sizes ranging from 160GB to 350GB, and on SPECjbb2013 and SPECjbb2005, ourgc improves overall performance by up to 45% over NAPS (up to 94% over Parallel Scavenge), and increases the performance of the collector itself by up to 3.6x over NAPS (up to 5.4x over Parallel Scavenge).", "citation": "Citations (23)", "year": "2015", "departments": ["French Institute for Research in Computer Science and Automation", "Telecom SudParis", "French Institute for Research in Computer Science and Automation", "Pierre-and-Marie-Curie University", "Chalmers University of Technology"], "conf": "asplos", "authors": ["Lokesh Gidra.....http://dblp.org/pers/hd/g/Gidra:Lokesh", "Ga\u00ebl Thomas.....http://dblp.org/pers/hd/t/Thomas_0001:Ga=euml=l", "Julien Sopena.....http://dblp.org/pers/hd/s/Sopena:Julien", "Marc Shapiro.....http://dblp.org/pers/hd/s/Shapiro_0001:Marc", "Nhan Nguyen.....http://dblp.org/pers/hd/n/Nguyen:Nhan"], "pages": 13}