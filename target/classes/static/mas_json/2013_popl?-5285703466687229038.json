{"title": "Optimizing data structures in high-level programs: new directions for extensible compilers based on staging.", "fields": ["loop fusion", "interpreter", "optimizing compiler", "program transformation", "partial evaluation"], "abstract": "High level data structures are a cornerstone of modern programming and at the same time stand in the way of compiler optimizations. In order to reason about user- or library-defined data structures compilers need to be extensible. Common mechanisms to extend compilers fall into two categories. Frontend macros, staging or partial evaluation systems can be used to programmatically remove abstraction and specialize programs before they enter the compiler. Alternatively, some compilers allow extending the internal workings by adding new transformation passes at different points in the compile chain or adding new intermediate representation (IR) types. None of these mechanisms alone is sufficient to handle the challenges posed by high level data structures. This paper shows a novel way to combine them to yield benefits that are greater than the sum of the parts.   Instead of using staging merely as a front end, we implement internal compiler passes using staging as well. These internal passes delegate back to program execution to construct the transformed IR. Staging is known to simplify program generation, and in the same way it can simplify program transformation. Defining a transformation as a staged IR interpreter is simpler than implementing a low-level IR to IR transformer. With custom IR nodes, many optimizations that are expressed as rewritings from IR nodes to staged program fragments can be combined into a single pass, mitigating phase ordering problems. Speculative rewriting can preserve optimistic assumptions around loops.   We demonstrate several powerful program optimizations using this architecture that are particularly geared towards data structures: a novel loop fusion and deforestation algorithm, array of struct to struct of array conversion, object flattening and code generation for heterogeneous parallel devices. We validate our approach using several non trivial case studies that exhibit order of magnitude speedups in experiments.", "citation": "Citations (99)", "departments": ["\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne", "Stanford University", "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne", "Stanford University", "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne"], "authors": ["Tiark Rompf.....http://dblp.org/pers/hd/r/Rompf:Tiark", "Arvind K. Sujeeth.....http://dblp.org/pers/hd/s/Sujeeth:Arvind_K=", "Nada Amin.....http://dblp.org/pers/hd/a/Amin:Nada", "Kevin J. Brown.....http://dblp.org/pers/hd/b/Brown:Kevin_J=", "Vojin Jovanovic.....http://dblp.org/pers/hd/j/Jovanovic:Vojin", "HyoukJoong Lee.....http://dblp.org/pers/hd/l/Lee:HyoukJoong", "Manohar Jonnalagedda.....http://dblp.org/pers/hd/j/Jonnalagedda:Manohar", "Kunle Olukotun.....http://dblp.org/pers/hd/o/Olukotun:Kunle", "Martin Odersky.....http://dblp.org/pers/hd/o/Odersky:Martin"], "conf": "popl", "year": "2013", "pages": 14}