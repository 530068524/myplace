{"title": "Modeling and Discovering Vulnerabilities with Code Property Graphs.", "fields": ["abstract syntax", "buffer overflow", "memory safety", "graph database", "code review"], "abstract": "The vast majority of security breaches encountered today are a direct result of insecure code. Consequently, the protection of computer systems critically depends on the rigorous identification of vulnerabilities in software, a tedious and error-prone process requiring significant expertise. Unfortunately, a single flaw suffices to undermine the security of a system and thus the sheer amount of code to audit plays into the attacker's cards. In this paper, we present a method to effectively mine large amounts of source code for vulnerabilities. To this end, we introduce a novel representation of source code called a code property graph that merges concepts of classic program analysis, namely abstract syntax trees, control flow graphs and program dependence graphs, into a joint data structure. This comprehensive representation enables us to elegantly model templates for common vulnerabilities with graph traversals that, for instance, can identify buffer overflows, integer overflows, format string vulnerabilities, or memory disclosures. We implement our approach using a popular graph database and demonstrate its efficacy by identifying 18 previously unknown vulnerabilities in the source code of the Linux kernel.", "citation": "Citations (126)", "departments": ["University of G\u00f6ttingen", "Qualcomm", "University of G\u00f6ttingen", "University of G\u00f6ttingen"], "authors": ["Fabian Yamaguchi.....http://dblp.org/pers/hd/y/Yamaguchi:Fabian", "Nico Golde.....http://dblp.org/pers/hd/g/Golde:Nico", "Daniel Arp.....http://dblp.org/pers/hd/a/Arp:Daniel", "Konrad Rieck.....http://dblp.org/pers/hd/r/Rieck:Konrad"], "conf": "sp", "year": "2014", "pages": 15}