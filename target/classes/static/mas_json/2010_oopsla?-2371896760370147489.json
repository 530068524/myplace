{"title": "A time-aware type system for data-race protection and guaranteed initialization.", "fields": ["type theory", "lock", "initialization", "information protection policy", "data field"], "abstract": "We introduce a type system based on intervals, objects representing the time in which a block of code will execute. The type system can verify time-based properties such as when a field will be accessed or a method will be invoked.   One concrete application of our type system is data-race protection: For fields which are initialized during one phase of the program and constant thereafter, users can designate the interval during which the field is mutable. Code which happens after this initialization interval can safely read the field in parallel. We also support fields guarded by a lock and even the use of dynamic race detectors.   Another use for intervals is to designate different phases in the object's lifetime, such as a constructor phase. The type system then ensures that only appropriate methods are invoked in each phase.", "citation": "Citations (15)", "departments": ["ETH Zurich", "ETH Zurich"], "authors": ["Nicholas D. Matsakis.....http://dblp.org/pers/hd/m/Matsakis:Nicholas_D=", "Thomas R. Gross.....http://dblp.org/pers/hd/g/Gross:Thomas_R="], "conf": "oopsla", "year": "2010", "pages": 18}