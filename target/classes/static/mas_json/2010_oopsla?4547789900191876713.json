{"title": "Type classes as objects and implicits.", "fields": ["declarative programming", "abstract data type", "haskell", "generic programming", "scala"], "abstract": "Type classes were originally developed in Haskell as a disciplined alternative to ad-hoc polymorphism. Type classes have been shown to provide a type-safe solution to important challenges in software engineering and programming languages such as, for example,  retroactive extension  of programs. They are also recognized as a good mechanism for concept-based  generic programming  and, more recently, have evolved into a mechanism for type-level computation.   This paper presents a lightweight approach to type classes in object-oriented (OO) languages with generics using the CONCEPT pattern and  implicits  (a type-directed implicit parameter passing mechanism). This paper also shows how Scala's type system conspires with implicits to enable, and even surpass, many common extensions of the Haskell type class system, making Scala ideally suited for generic programming in the large.", "citation": "Citations (102)", "departments": ["Seoul National University", "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne", "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne"], "authors": ["Bruno C. d. S. Oliveira.....http://dblp.org/pers/hd/o/Oliveira:Bruno_C=_d=_S=", "Adriaan Moors.....http://dblp.org/pers/hd/m/Moors:Adriaan", "Martin Odersky.....http://dblp.org/pers/hd/o/Odersky:Martin"], "conf": "oopsla", "year": "2010", "pages": 20}