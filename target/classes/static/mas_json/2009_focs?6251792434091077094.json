{"title": "Fully Dynamic (2 + epsilon) Approximate All-Pairs Shortest Paths with Fast Query and Close to Linear Update Time.", "fields": ["mathematical optimization", "graph theory", "graph", "shortest path problem", "floyd warshall algorithm", "mathematics", "approximation algorithm", "binary logarithm", "k shortest path routing"], "abstract": "For any fixed $1 \u226b \\eps \u226b 0$ we present a fully dynamic algorithm for maintaining $(2 + \\eps)$-approximate all-pairs shortest paths in undirected graphs with positive edge weights. We use a randomized (Las Vegas) update algorithm (but a deterministic query procedure), so the time given is the \\emph{expected} amortized update time. \\\\\\indent Our query time $O(\\log \\log \\log n)$. The update time is $\\widetilde{O}(mn^{O(1/\\sqrt{\\log n})}\\log(nR))$, where $R$ is the ratio between the heaviest and the lightest edge weight in the graph (so $R = 1$ in unweighted graphs). Unfortunately, the update time does have the drawback of a super-polynomial dependence on $\\eps$: it grows as $(3 / \\eps)^{\\sqrt{\\log n / \\log(3/\\eps)}} = n^{\\sqrt{\\log(3/\\eps) / \\log n}}$.\\\\\\indent Our algorithm has a significantly faster update time than any other algorithm with sub-polynomial query time. For exact distances, the state of the art algorithm has an update time of $\\widetilde{O}(n^2)$. For approximate distances, the best previous algorithm has a $O(kmn^{1/k})$ update time and returns $(2k - 1)$ stretch paths. Thus, it needs an update time of $O(m\\sqrt{n})$ to get close to our approximation, and it has to return $O(\\sqrt{\\log n})$ approximate distances to match our update time.", "citation": "Citations (23)", "departments": ["Massachusetts Institute of Technology"], "authors": ["Aaron Bernstein.....http://dblp.org/pers/hd/b/Bernstein:Aaron"], "conf": "focs", "year": "2009", "pages": 10}