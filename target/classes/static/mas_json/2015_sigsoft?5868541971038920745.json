{"title": "JITProf: pinpointing JIT-unfriendly JavaScript code.", "fields": ["unobtrusive javascript", "just in time compilation", "javascript", "code refactoring", "machine code"], "abstract": "Most modern JavaScript engines use just-in-time (JIT) compilation to translate parts of JavaScript code into efficient machine code at runtime. Despite the overall success of JIT compilers, programmers may still write code that uses the dynamic features of JavaScript in a way that prohibits profitable optimizations. Unfortunately, there currently is no way to measure how prevalent such JIT-unfriendly code is and to help developers detect such code locations. This paper presents JITProf, a profiling framework to dynamically identify code locations that prohibit profitable JIT optimizations. The key idea is to associate meta-information with JavaScript objects and code locations, to update this information whenever particular runtime events occur, and to use the meta-information to identify JIT-unfriendly operations. We use JITProf to analyze widely used JavaScript web applications and show that JIT-unfriendly code is prevalent in practice. Furthermore, we show how to use the approach as a profiling technique that finds optimization opportunities in a program. Applying the profiler to popular benchmark programs shows that refactoring these programs to avoid performance problems identified by JITProf leads to statistically significant performance improvements of up to 26.3% in 15 benchmarks.", "citation": "Citations (24)", "departments": ["University of California, Berkeley", "Technische Universit\u00e4t Darmstadt", "University of California, Berkeley"], "authors": ["Liang Gong.....http://dblp.org/pers/hd/g/Gong:Liang", "Michael Pradel.....http://dblp.org/pers/hd/p/Pradel:Michael", "Koushik Sen.....http://dblp.org/pers/hd/s/Sen:Koushik"], "conf": "sigsoft", "year": "2015", "pages": 12}