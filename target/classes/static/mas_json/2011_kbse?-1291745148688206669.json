{"title": "Identifying future field accesses in exhaustive state space traversal.", "fields": ["tree traversal", "concurrency", "look ahead", "java concurrency", "thread"], "abstract": "One popular approach to detect errors in multi-threaded programs is to systematically explore all possible interleavings. A common algorithmic strategy is to construct the program state space on-the-fly and perform thread scheduling choices at any instruction that could have effects visible to other threads. Existing tools do not look ahead in the code to be executed, and thus their decisions are too conservative. They create unnecessary thread scheduling choices at instructions that do not actually influence other threads, which implies exploring exponentially greater numbers of interleavings. In this paper we describe how information about field accesses that may occur in the future can be used to identify and eliminate unnecessary thread choices. This reduces the number of states that must be processed to explore all possible behaviors and therefore improves the performance of exhaustive state space traversal. We have applied this technique to Java PathFinder, using the WALA library for static analysis. Experiments on several Java programs show big performance gains. In particular, it is now possible to check with Java PathFinder more complex programs than before in reasonable time.", "citation": "Citations (11)", "departments": ["University of Waterloo", "University of Waterloo"], "authors": ["Pavel Parizek.....http://dblp.org/pers/hd/p/Parizek:Pavel", "Ondrej Lhot\u00e1k.....http://dblp.org/pers/hd/l/Lhot=aacute=k:Ondrej"], "conf": "kbse", "year": "2011", "pages": 10}