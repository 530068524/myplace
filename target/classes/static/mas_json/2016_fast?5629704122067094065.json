{"title": "Efficient and Available In-memory KV-Store with Hybrid Erasure Coding and Replication.", "fields": ["transaction log", "latency", "erasure code", "low latency", "throughput", "database transaction", "parity", "metadata", "online transaction processing"], "abstract": "In-memory key/value store (KV-store) is a key building block for many systems like databases and large websites. Two key requirements for such systems are efficiency and availability, which demand a KV-store to continuously handle millions of requests per second. A common approach to availability is using replication, such as primary-backup (PBR), which, however, requires  M +1 times memory to tolerate  M  failures. This renders scarce memory unable to handle useful user jobs.   This article makes the first case of building highly available in-memory KV-store by integrating erasure coding to achieve memory efficiency, while not notably degrading performance. A main challenge is that an in-memory KV-store has much scattered metadata. A single KV  put  may cause excessive coding operations and parity updates due to excessive small updates to metadata. Our approach, namely Cocytus, addresses this challenge by using a hybrid scheme that leverages PBR for small-sized and scattered data (e.g., metadata and key), while only applying erasure coding to relatively large data (e.g., value). To mitigate well-known issues like lengthy recovery of erasure coding, Cocytus uses an online recovery scheme by leveraging the replicated metadata information to continuously serve KV requests. To further demonstrate the usefulness of Cocytus, we have built a transaction layer by using Cocytus as a fast and reliable storage layer to store database records and transaction logs. We have integrated the design of Cocytus to Memcached and extend it to support in-memory transactions. Evaluation using YCSB with different KV configurations shows that Cocytus incurs low overhead for latency and throughput, can tolerate node failures with fast online recovery, while saving 33% to 46% memory compared to PBR when tolerating two failures. A further evaluation using the SmallBank OLTP benchmark shows that in-memory transactions can run atop Cocytus with high throughput, low latency, and low abort rate and recover fast from consecutive failures.", "citation": "Not cited", "departments": ["Shanghai Jiao Tong University", "Shanghai Jiao Tong University", "Shanghai Jiao Tong University", "Shanghai Jiao Tong University", "Shanghai Jiao Tong University", "Shanghai Jiao Tong University", "Shanghai Jiao Tong University", "Shanghai Jiao Tong University"], "authors": ["Heng Zhang.....http://dblp.org/pers/hd/z/Zhang:Heng", "Mingkai Dong.....http://dblp.org/pers/hd/d/Dong:Mingkai", "Haibo Chen.....http://dblp.org/pers/hd/c/Chen:Haibo"], "conf": "fast", "year": "2016", "pages": 14}