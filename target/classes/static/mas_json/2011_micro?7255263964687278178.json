{"title": "Reducing memory interference in multicore systems via application-aware memory channel partitioning.", "fields": ["uniform memory access", "interleaved memory", "registered memory", "flat memory model", "distributed shared memory"], "abstract": "Main memory is a major shared resource among cores in a multicore system. If the interference between different applications' memory requests is not controlled effectively, system performance can degrade significantly. Previous work aimed to mitigate the problem of interference between applications by changing the scheduling policy in the memory controller, i.e., by prioritizing memory requests from applications in a way that benefits system performance.   In this paper, we first present an alternative approach to reducing inter-application interference in the memory system:  application-aware memory channel partitioning (MCP) . The idea is to map the data of applications that are likely to severely interfere with each other to different memory channels. The key principles are to partition onto separate channels 1) the data of light (memory non-intensive) and heavy (memory-intensive) applications, 2) the data of applications with low and high row-buffer locality.   Second, we observe that interference can be further reduced with a combination of memory channel partitioning and scheduling, which we call  integrated memory partitioning and scheduling (IMPS) . The key idea is to 1) always prioritize very light applications in the memory scheduler since such applications cause negligible interference to others, 2) use MCP to reduce interference among the remaining applications.   We evaluate MCP and IMPS on a variety of multi-programmed workloads and system configurations and compare them to four previously proposed state-of-the-art memory scheduling policies. Averaged over 240 workloads on a 24-core system with 4 memory channels, MCP improves system throughput by 7.1% over an application-unaware memory scheduler and 1% over the previous best scheduler, while avoiding modifications to existing memory schedulers. IMPS improves system throughput by 11.1% over an application-unaware scheduler and 5% over the previous best scheduler, while incurring much lower hardware complexity than the latter.", "citation": "Citations (229)", "departments": ["Pennsylvania State University", "Carnegie Mellon University", "Carnegie Mellon University", "Pennsylvania State University", "Microsoft"], "authors": ["Sai Prashanth Muralidhara.....http://dblp.org/pers/hd/m/Muralidhara:Sai_Prashanth", "Lavanya Subramanian.....http://dblp.org/pers/hd/s/Subramanian:Lavanya", "Onur Mutlu.....http://dblp.org/pers/hd/m/Mutlu:Onur", "Mahmut T. Kandemir.....http://dblp.org/pers/hd/k/Kandemir:Mahmut_T=", "Thomas Moscibroda.....http://dblp.org/pers/hd/m/Moscibroda:Thomas"], "conf": "micro", "year": "2011", "pages": 12}