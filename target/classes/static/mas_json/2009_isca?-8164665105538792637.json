{"title": "Flexible reference-counting-based hardware acceleration for garbage collection.", "fields": ["memory leak", "hazard pointer", "manual memory management", "mark compact algorithm", "garbage in garbage out"], "abstract": "Languages featuring automatic memory management (garbage collection) are increasingly used to write all kinds of applications because they provide clear software engineering and security advantages. Unfortunately, garbage collection imposes a toll on performance and introduces pause times, making such languages less attractive for high-performance or real-time applications. Much progress has been made over the last five decades to reduce the overhead of garbage collection, but it remains significant.   We propose a cooperative hardware-software technique to reduce the performance overhead of garbage collection. The key idea is to reduce the frequency of garbage collection by efficiently detecting and reusing dead memory space in hardware via hardware-implemented reference counting. Thus, even though software garbage collections are still eventually needed, they become much less frequent and have less impact on overall performance. Our technique is compatible with a variety of software garbage collection algorithms, does not break compatibility with existing software, and reduces garbage collection time by 31% on average on the Java DaCapo benchmarks running on the production build of the Jikes RVM, which uses a state-of-the-art generational garbage collector.", "citation": "Citations (34)", "departments": ["University of Texas at Austin", "Carnegie Mellon University", "University of Texas at Austin"], "authors": ["Jos\u00e9 A. Joao.....http://dblp.org/pers/hd/j/Joao:Jos=eacute=_A=", "Onur Mutlu.....http://dblp.org/pers/hd/m/Mutlu:Onur", "Yale N. Patt.....http://dblp.org/pers/hd/p/Patt:Yale_N="], "conf": "isca", "year": "2009", "pages": 11}