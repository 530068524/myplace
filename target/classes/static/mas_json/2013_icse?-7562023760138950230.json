{"title": "Automatic testing of sequential and concurrent substitutability.", "fields": ["concurrency control", "programmer", "java", "software bug", "subclass"], "abstract": "Languages with inheritance and polymorphism assume that a subclass instance can substitute a superclass instance without causing behavioral differences for clients of the superclass. However, programmers may accidentally create subclasses that are semantically incompatible with their superclasses. Such subclasses lead to bugs, because a programmer may assign a subclass instance to a superclass reference. This paper presents an automatic testing technique to reveal subclasses that cannot safely substitute their superclasses. The key idea is to generate generic tests that analyze the behavior of both the subclass and its superclass. If using the subclass leads to behavior that cannot occur with the superclass, the analysis reports a warning. We find a high percentage of widely used Java classes, including classes from JBoss, Eclipse, and Apache Commons Collections, to be unsafe substitutes for their superclasses: 30% of these classes lead to crashes, and even more have other behavioral differences.", "citation": "Citations (11)", "departments": ["ETH Zurich", "ETH Zurich"], "authors": ["Michael Pradel.....http://dblp.org/pers/hd/p/Pradel:Michael", "Thomas R. Gross.....http://dblp.org/pers/hd/g/Gross:Thomas_R="], "conf": "icse", "year": "2013", "pages": 10}