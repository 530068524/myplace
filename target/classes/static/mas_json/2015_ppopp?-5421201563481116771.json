{"title": "Predicate RCU: an RCU for scalable concurrent updates.", "fields": ["shared memory", "wait", "binary search tree", "multiprocessing", "concurrent data structure"], "abstract": "Read-copy update (RCU) is a shared memory synchronization mechanism with scalable synchronization-free reads that nevertheless execute correctly with concurrent updates. To guarantee the consistency of such reads, an RCU update transitioning the data structure between certain states must wait for the completion of all existing reads. Unfortunately, these waiting periods quickly become a bottleneck, and thus RCU remains unused in data structures that require scalable, fine-grained, update operations. To solve this problem, we present Predicate RCU (PRCU), an RCU variant in which an update waits only for the reads whose consistency it affects, which are specified by a user-supplied predicate. We explore the trade-offs in implementing PRCU, describing implementations that reduce wait times by 10--100x with varying overhead on reads on modern x86 multiprocessor machines. We demonstrate the applicability of PRCU by applying it to two RCU-based concurrent algorithms---the Citrus binary search tree and a resizable hash table---and show experimentally that PRCU significantly improves the performance of both algorithms.", "citation": "Citations (12)", "year": "2015", "departments": ["Technion \u2013 Israel Institute of Technology", "Technion \u2013 Israel Institute of Technology"], "conf": "ppopp", "authors": ["Maya Arbel.....http://dblp.org/pers/hd/a/Arbel:Maya", "Adam Morrison.....http://dblp.org/pers/hd/m/Morrison_0001:Adam"], "pages": 10}