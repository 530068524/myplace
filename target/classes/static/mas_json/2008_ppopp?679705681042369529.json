{"title": "On the correctness of transactional memory.", "fields": ["software transactional memory", "transactional memory", "correctness", "implementation", "abort", "serializability"], "abstract": "Transactional memory (TM) is perceived as an appealing alternative to critical sections for general purpose concurrent programming. Despite the large amount of recent work on TM implementations, however, very little effort has been devoted to precisely defining what guarantees these implementations should provide. A formal description of such guarantees is necessary in order to check the correctness of TM systems, as well as to establish TM optimality results and inherent trade-offs.   This paper presents  opacity , a candidate correctness criterion for TM implementations. We define opacity as a property of concurrent transaction histories and give its graph theoretical interpretation. Opacity captures precisely the correctness requirements that have been intuitively described by many TM designers. Most TM systems we know of do ensure opacity.   At a very first approximation, opacity can be viewed as an extension of the classical database serializability property with the additional requirement that even  non-committed  transactions are prevented from accessing inconsistent states. Capturing this requirement precisely, in the context of general objects, and without precluding pragmatic strategies that are often used by modern TM implementations, such as versioning, invisible reads, lazy updates, and open nesting, is not trivial.   As a use case of opacity, we prove the first lower bound on the complexity of TM implementations. Basically, we show that every single-version TM system that uses invisible reads and does not abort non-conflicting transactions requires, in the worst case, ?( k ) steps for an operation to terminate, where  k  is the total number of objects shared by transactions. This (tight) bound precisely captures an inherent trade-off in the design of TM systems. The bound also highlights a fundamental gap between systems in which transactions can be fully isolated from the outside environment, e.g., databases or certain specialized transactional languages, and systems that lack such isolation capabilities, e.g., general TM frameworks.", "citation": "Not cited", "year": "2008", "departments": ["\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne", "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne"], "conf": "ppopp", "authors": ["Rachid Guerraoui.....http://dblp.org/pers/hd/g/Guerraoui:Rachid", "Michal Kapalka.....http://dblp.org/pers/hd/k/Kapalka:Michal"], "pages": 10}