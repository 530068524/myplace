{"title": "Binary stirring: self-randomizing instruction addresses of legacy x86 binary code.", "fields": ["binary code", "address space layout randomization", "return oriented programming", "basic block", "code bloat"], "abstract": "Unlike library code, whose instruction addresses can be randomized by  address space layout randomization  (ASLR), application binary code often has static instruction addresses. Attackers can exploit this limitation to craft robust shell codes for such applications, as demonstrated by a recent attack that reuses instruction  gadgets  from the static binary code of victim applications.   This paper introduces binary  stirring , a new technique that imbues x86 native code with the ability to self-randomize its instruction addresses each time it is launched. The input to STIR is only the application binary code without any source code, debug symbols, or relocation information. The output is a new binary whose basic block addresses are dynamically determined at load-time. Therefore, even if an attacker can find code gadgets in one instance of the binary, the instruction addresses in other instances are unpredictable. An array of binary transformation techniques enable STIR to transparently protect large, realistic applications that cannot be perfectly disassembled due to computed jumps, code-data interleaving, OS callbacks, dynamic linking and a variety of other difficult binary features. Evaluation of STIR for both Windows and Linux platforms shows that stirring introduces about 1.6% overhead on average to application runtimes.", "citation": "Citations (271)", "year": "2012", "departments": ["University of Texas at Dallas", "University of Texas at Dallas", "University of Texas at Dallas", "University of Texas at Dallas"], "conf": "ccs", "authors": ["Richard Wartell.....http://dblp.org/pers/hd/w/Wartell:Richard", "Vishwath Mohan.....http://dblp.org/pers/hd/m/Mohan:Vishwath", "Kevin W. Hamlen.....http://dblp.org/pers/hd/h/Hamlen:Kevin_W=", "Zhiqiang Lin.....http://dblp.org/pers/hd/l/Lin:Zhiqiang"], "pages": 12}