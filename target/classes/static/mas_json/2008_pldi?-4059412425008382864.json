{"title": "Inferring locks for atomic sections.", "fields": ["software development", "lock", "optimistic concurrency control", "transactional memory", "thread"], "abstract": "Atomic sections  are a recent and popular idiom to support the development of concurrent programs. Updates performed within an atomic section should not be visible to other threads until the atomic section has been executed entirely. Traditionally, atomic sections are supported through the use of optimistic concurrency, either using a transactional memory hardware, or an equivalent software emulation (STM).   This paper explores automatically supporting atomic sections using pessimistic concurrency. We present a system that combines compiler and runtime techniques to automatically transform programs written with atomic sections into programs that only use locking primitives. To minimize contention in the transformed programs, our compiler chooses from several lock granularities, using fine-grain locks whenever it is possible.   This paper formally presents our framework, shows that our compiler is sound (i.e., it protects all shared locations accessed within atomic sections), and reports experimental results.", "citation": "Citations (148)", "departments": ["Cornell University", "Microsoft", "Microsoft"], "authors": ["Sigmund Cherem.....http://dblp.org/pers/hd/c/Cherem:Sigmund", "Trishul M. Chilimbi.....http://dblp.org/pers/hd/c/Chilimbi:Trishul_M=", "Sumit Gulwani.....http://dblp.org/pers/hd/g/Gulwani:Sumit"], "conf": "pldi", "year": "2008", "pages": 12}