{"title": "Practical Hash Functions for Similarity Estimation and Dimensionality Reduction.", "fields": ["feature hashing", "hopscotch hashing", "open addressing", "k independent hashing", "tabulation hashing"], "abstract": "Hashing is a basic tool for dimensionality reduction employed in several aspects of machine learning. However, the perfomance analysis is often carried out under the abstract assumption that a truly random unit cost hash function is used, without concern for which concrete hash function is employed. The concrete hash function may work fine on sufficiently random input. The question is if it can be trusted in the real world when faced with more structured input. In this paper we focus on two prominent applications of hashing, namely similarity estimation with the one permutation hashing (OPH) scheme of Li et al. [NIPS'12] and feature hashing (FH) of Weinberger et al. [ICML'09], both of which have found numerous applications, i.e. in approximate near-neighbour search with LSH and large-scale classification with SVM. We consider the recent mixed tabulation hash function of Dahlgaard et al. [FOCS'15] which was proved theoretically to perform like a truly random hash function in many applications, including the above OPH. Here we first show improved concentration bounds for FH with truly random hashing and then argue that mixed tabulation performs similar when the input vectors are sparse. Our main contribution, however, is an experimental comparison of different hashing schemes when used inside FH, OPH, and LSH. We find that mixed tabulation hashing is almost as fast as the classic multiply-mod-prime scheme ax+b mod p. Mutiply-mod-prime is guaranteed to work well on sufficiently random data, but we demonstrate that in the above applications, it can lead to bias and poor concentration on both real-world and synthetic data. We also compare with the very popular MurmurHash3, which has no proven guarantees. Mixed tabulation and MurmurHash3 both perform similar to truly random hashing in our experiments. However, mixed tabulation was 40% faster than MurmurHash3, and it has the proven guarantee of good performance on all possible input making it more reliable.", "citation": "Citations (2)", "year": "2017", "departments": ["University of Copenhagen", "University of Copenhagen", "University of Copenhagen"], "conf": "nips", "authors": ["S\u00f8ren Dahlgaard.....http://dblp.org/pers/hd/d/Dahlgaard:S=oslash=ren", "Mathias B\u00e6k Tejs Knudsen.....http://dblp.org/pers/hd/k/Knudsen:Mathias_B=aelig=k_Tejs", "Mikkel Thorup.....http://dblp.org/pers/hd/t/Thorup:Mikkel"], "pages": 11}