{"title": "Type-and-example-directed program synthesis.", "fields": ["algebraic number", "recursion", "exploit", "program synthesis", "type theory"], "abstract": "This paper presents an algorithm for synthesizing recursive functions that process algebraic datatypes. It is founded on proof-theoretic techniques that exploit both type information and input\u2013output examples to prune the search space. The algorithm uses refinement trees, a data structure that succinctly represents constraints on the shape of generated code. We evaluate the algorithm by using a prototype implementation to synthesize more than 40 benchmarks and several non-trivial larger examples. Our results demonstrate that the approach meets or outperforms the state-of-the-art for this domain, in terms of synthesis time or attainable size of the generated programs.", "citation": "Citations (79)", "departments": ["University of Pennsylvania", "University of Pennsylvania"], "authors": ["Peter-Michael Osera.....http://dblp.org/pers/hd/o/Osera:Peter=Michael", "Steve Zdancewic.....http://dblp.org/pers/hd/z/Zdancewic:Steve"], "conf": "pldi", "year": "2015", "pages": 12}