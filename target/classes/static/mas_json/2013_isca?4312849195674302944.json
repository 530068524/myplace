{"title": "STREX: boosting instruction cache reuse in OLTP workloads through stratified transaction execution.", "fields": ["cache", "single core", "thrashing", "cpu cache", "online transaction processing"], "abstract": "Online transaction processing (OLTP) workload performance suffers from instruction stalls; the instruction footprint of a typical transaction exceeds by far the capacity of an L1 cache, leading to ongoing cache thrashing. Several proposed techniques remove some instruction stalls in exchange for error-prone instrumentation to the code base, or a sharp increase in the L1-I cache unit area and power. Others reduce instruction miss latency by better utilizing a shared L2 cache. SLICC [2], a recently proposed thread migration technique that exploits transaction instruction locality, is promising for high core counts but performs sub-optimally or may hurt performance when running on few cores.   This paper corroborates that OLTP transactions exhibit significant intra- and inter-thread overlap in their instruction footprint, and analyzes the instruction stall reduction benefits. This paper presents STREX, a hardware, programmer-transparent technique that exploits typical transaction behavior to improve instruction reuse in first level caches. STREX time-multiplexes the execution of similar transactions dynamically on a single core so that instructions fetched by one transaction are reused by all other transactions executing in the system as much as possible. STREX dynamically slices the execution of each transaction into cache-sized segments simply by observing when blocks are brought in the cache and when they are evicted. Experiments show that, when compared to baseline execution on 2--16 cores, STREX consistently improves performance while reducing the number of L1 instruction and data misses by 37% and 14% on average, respectively. Finally, this paper proposes a practical hybrid technique that combines STREX and SLICC, thereby guaranteeing performance benefits regardless of the number of available cores and the workload's footprint.", "citation": "Citations (12)", "year": "2013", "departments": ["University of Toronto", "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne", "University of Toronto", "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne", "University of Toronto"], "conf": "isca", "authors": ["Islam Atta.....http://dblp.org/pers/hd/a/Atta:Islam", "Pinar T\u00f6z\u00fcn.....http://dblp.org/pers/hd/t/T=ouml=z=uuml=n:Pinar", "Xin Tong.....http://dblp.org/pers/hd/t/Tong:Xin", "Anastasia Ailamaki.....http://dblp.org/pers/hd/a/Ailamaki:Anastasia", "Andreas Moshovos.....http://dblp.org/pers/hd/m/Moshovos:Andreas"], "pages": 12}