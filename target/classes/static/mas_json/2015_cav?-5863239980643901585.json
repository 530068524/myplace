{"title": "Fine-Grained Caching of Verification Results.", "fields": ["graph", "cache", "novelty", "development environment", "call graph"], "abstract": "Developing provably correct programs is an incremental process that often involves a series of interactions with a program verifier. To increase the responsiveness of the program verifier during such interactions, we designed a system for fine-grained caching of verification results. The caching system uses the program\u2019s call graph and control-flow graph to focus the verification effort on just the parts of the program that were affected by the user\u2019s most recent modifications. The novelty lies in how the original program is instrumented with cached information to avoid unnecessary work for the verifier. The system has been implemented in the Boogie verification engine, which allows it to be used by different verification front ends that target the intermediate verification language Boogie; we present one such application in the integrated development environment for the Dafny programming language. The paper describes the architecture and algorithms of the caching system and reports on how much it improves the performance of the verifier in practice.", "citation": "Citations (6)", "year": "2015", "departments": ["Microsoft", "ETH Zurich"], "conf": "cav", "authors": ["K. Rustan M. Leino.....http://dblp.org/pers/hd/l/Leino:K=_Rustan_M=", "Valentin W\u00fcstholz.....http://dblp.org/pers/hd/w/W=uuml=stholz:Valentin"], "pages": 18}