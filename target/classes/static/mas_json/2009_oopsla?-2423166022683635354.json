{"title": "Grace: safe multithreaded programming for C/C++.", "fields": ["runtime system", "deadlock", "atomicity", "thread", "race condition"], "abstract": "The shift from single to multiple core architectures means that programmers must write concurrent, multithreaded programs in order to increase application performance. Unfortunately, multithreaded applications are susceptible to numerous errors, including deadlocks, race conditions, atomicity violations, and order violations. These errors are notoriously difficult for programmers to debug.   This paper presents Grace, a software-only runtime system that eliminates concurrency errors for a class of multithreaded programs: those based on fork-join parallelism. By turning threads into processes, leveraging virtual memory protection, and imposing a sequential commit protocol, Grace provides programmers with the appearance of deterministic, sequential execution, while taking advantage of available processing cores to run code concurrently and efficiently. Experimental results demonstrate Grace's effectiveness: with modest code changes across a suite of computationally-intensive benchmarks (1-16 lines), Grace can achieve high scalability and performance while preventing concurrency errors.", "citation": "Citations (313)", "year": "2009", "departments": ["University of Massachusetts Amherst", "University of Massachusetts Amherst", "University of Massachusetts Amherst", "University of Massachusetts Amherst"], "conf": "oopsla", "authors": ["Emery D. Berger.....http://dblp.org/pers/hd/b/Berger:Emery_D=", "Ting Yang.....http://dblp.org/pers/hd/y/Yang:Ting", "Tongping Liu.....http://dblp.org/pers/hd/l/Liu:Tongping", "Gene Novark.....http://dblp.org/pers/hd/n/Novark:Gene"], "pages": 16}