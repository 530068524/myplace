{"title": "Differential assertion checking.", "fields": ["invariant", "program analysis", "assertion", "modular design", "theoretical computer science"], "abstract": "Previous version of a program can be a powerful enabler for program analysis by defining new relative specifications and making the results of current program analysis more relevant. In this paper, we describe the approach of differential assertion checking (DAC) for comparing different versions of a program with respect to a set of assertions. DAC provides a natural way to write relative specifications over two programs. We introduce a novel modular approach to DAC by reducing it to safety checking of a composed program, which can be accomplished by standard program verifiers. In particular, we leverage automatic invariant generation to synthesize relative specifications for pairs of loops and procedures. We provide a preliminary evaluation of a prototype implementation within the SymDiff tool along two directions (a) soundly verifying bug fixes in the presence of loops and (b) providing a knob for suppressing alarms when checking a new version of a program.", "citation": "Citations (74)", "departments": ["Microsoft", "Microsoft", "Stanford University", "Microsoft"], "authors": ["Shuvendu K. Lahiri.....http://dblp.org/pers/hd/l/Lahiri:Shuvendu_K=", "Kenneth L. McMillan.....http://dblp.org/pers/hd/m/McMillan:Kenneth_L=", "Rahul Sharma.....http://dblp.org/pers/hd/s/Sharma_0001:Rahul", "Chris Hawblitzel.....http://dblp.org/pers/hd/h/Hawblitzel:Chris"], "conf": "sigsoft", "year": "2013", "pages": 11}