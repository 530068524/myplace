{"title": "Lower bounds for RAMs and quantifier elimination.", "fields": ["natural number", "log log plot", "combinatorics", "algebraic expression", "quantifier elimination", "discrete mathematics", "mathematics", "unary function"], "abstract": "For each natural number d we consider a finite structure M d  whose universe is the set of all 0,1-sequence of length n=2 d , each representing a natural number in the set {0,1,...,2 n -1} in binary form. The operations included in the structure are the four constants 0,1,2 n -1,n, multiplication and addition modulo 2 n , the unary function min{2 x , 2 n -1}, the binary functions \u230a x/y\u230b (with \u230a x/0 \u230b =0), max(x,y), min(x,y), and the boolean vector operations, vee,- defined on 0,1 sequences of length n, by performing the operations on all components simultaneously. These are essentially the arithmetic operations that can be performed on a RAM, with wordlength n, by a single instruction. We show that there exists an e>0 and a term (that is, an algebraic expression) F(x,y) built up from the mentioned operations, with the only free variables x,y, such that if G d (y), d=0,1,2,..., is a sequence of terms, and for all d=0,1,2,..., M d  models \u2200 x, [G d (x)-> \u2203 y, F(x,y)=0], then for infinitely many integers d, the depth of the term G d , that is, the maximal number of nestings of the operations in it, is at least e (log d) 1/2  = e (log log n) 1/2 .   The following is a consequence. We are considering RAMs N n , with wordlength n=2 d , whose arithmetic instructions are the arithmetic operations listed above, and also have the usual other RAM instructions. The size of the memory is restricted only by the address space, that is, it is 2 n  words. The RAMs has a finite instruction set, each instruction is encoded by a fixed natural number independently of n. Therefore a program P can run on each machine N n , if n=2 d  is sufficiently large. We show that there exists an e>0 and a program P, such that it satisfies the following two conditions. (i) For all sufficiently large n=2 d , if P running on N n  gets an input consisting of two words a and b, then, in constant time, it gives a 0,1 output P n (a,b). (ii) Suppose that Q is a program such that for each sufficiently large n=2 d , if Q, running on N n , gets a word a of length n as an input, then it decides whether there exists a word b of length n such that P n (a,b)=0. Then, for infinitely many positive integers d, there exists a word a of length n=2 d , such that the running time of Q on N n  at input a is at least e (log d) 1/2  (log log d) -1  \u2265 (log d) 1/2-e = (log log n) 1/2-e .", "citation": "Not cited", "year": "2013", "departments": ["IBM"], "conf": "stoc", "authors": ["Mikl\u00f3s Ajtai.....http://dblp.org/pers/hd/a/Ajtai:Mikl=oacute=s"], "pages": 10}