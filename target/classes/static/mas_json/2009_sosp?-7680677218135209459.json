{"title": "Automatically patching errors in deployed software.", "fields": ["debugging", "code injection", "high availability", "exploit", "control flow"], "abstract": "We present ClearView, a system for automatically patching errors in deployed software. ClearView works on stripped Windows x86 binaries without any need for source code, debugging information, or other external information, and without human intervention.   ClearView (1) observes normal executions to learn invariants thatcharacterize the application's normal behavior, (2) uses error detectors to distinguish normal executions from erroneous executions, (3) identifies violations of learned invariants that occur during erroneous executions, (4) generates candidate repair patches that enforce selected invariants by changing the state or flow of control to make the invariant true, and (5) observes the continued execution of patched applications to select the most successful patch.   ClearView is designed to correct errors in software with high availability requirements. Aspects of ClearView that make it particularly appropriate for this context include its ability to generate patches without human intervention, apply and remove patchesto and from running applications without requiring restarts or otherwise perturbing the execution, and identify and discard ineffective or damaging patches by evaluating the continued behavior of patched applications.   ClearView was evaluated in a Red Team exercise designed to test its ability to successfully survive attacks that exploit security vulnerabilities. A hostile external Red Team developed ten code injection exploits and used these exploits to repeatedly attack an application protected by ClearView. ClearView detected and blocked all of the attacks. For seven of the ten exploits, ClearView automatically generated patches that corrected the error, enabling the application to survive the attacks and continue on to successfully process subsequent inputs. Finally, the Red Team attempted to make Clear-View apply an undesirable patch, but ClearView's patch evaluation mechanism enabled ClearView to identify and discard both ineffective patches and damaging patches.", "citation": "Citations (339)", "departments": ["Massachusetts Institute of Technology", "Hong Kong University of Science and Technology", "VMware", "Massachusetts Institute of Technology", "Massachusetts Institute of Technology"], "authors": ["Jeff H. Perkins.....http://dblp.org/pers/hd/p/Perkins:Jeff_H=", "Sunghun Kim.....http://dblp.org/pers/hd/k/Kim_0001:Sunghun", "Samuel Larsen.....http://dblp.org/pers/hd/l/Larsen:Samuel", "Saman P. Amarasinghe.....http://dblp.org/pers/hd/a/Amarasinghe:Saman_P=", "Jonathan Bachrach.....http://dblp.org/pers/hd/b/Bachrach:Jonathan", "Michael Carbin.....http://dblp.org/pers/hd/c/Carbin:Michael", "Carlos Pacheco.....http://dblp.org/pers/hd/p/Pacheco:Carlos", "Frank Sherwood.....http://dblp.org/pers/hd/s/Sherwood:Frank", "Stelios Sidiroglou.....http://dblp.org/pers/hd/s/Sidiroglou:Stelios", "Greg Sullivan.....http://dblp.org/pers/hd/s/Sullivan:Greg", "Weng-Fai Wong.....http://dblp.org/pers/hd/w/Wong:Weng=Fai", "Yoav Zibin.....http://dblp.org/pers/hd/z/Zibin:Yoav", "Michael D. Ernst.....http://dblp.org/pers/hd/e/Ernst:Michael_D=", "Martin C. Rinard.....http://dblp.org/pers/hd/r/Rinard:Martin_C="], "conf": "sosp", "year": "2009", "pages": 16}