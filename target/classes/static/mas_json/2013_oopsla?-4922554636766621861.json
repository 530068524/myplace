{"title": "CDSchecker: checking concurrent data structures written with C/C++ atomics.", "fields": ["c11", "toolchain", "unit testing", "allocator", "concurrent data structure"], "abstract": "Writing low-level concurrent software has traditionally required intimate knowledge of the entire toolchain and often has involved coding in assembly. New language standards have extended C and C++ with support for low-level atomic operations and a weak memory model, enabling developers to write portable and efficient multithreaded code.   Developing correct low-level concurrent code is well-known to be especially difficult under a weak memory model, where code behavior can be surprising. Building reliable concurrent software using C/C++ low-level atomic operations will likely require tools that help developers discover unexpected program behaviors.   In this paper we present CDSChecker, a tool for exhaustively exploring the behaviors of concurrent code under the C/C++ memory model. We develop several novel techniques for modeling the relaxed behaviors allowed by the memory model and for minimizing the number of execution behaviors that CDSChecker must explore. We have used CDSChecker to exhaustively unit test several concurrent data structure implementations on specific inputs and have discovered errors in both a recently published C11 implementation of a work-stealing queue and a single producer, single consumer queue implementation.", "citation": "Citations (69)", "departments": ["University of California, Irvine", "University of California, Irvine"], "authors": ["Brian Norris.....http://dblp.org/pers/hd/n/Norris:Brian", "Brian Demsky.....http://dblp.org/pers/hd/d/Demsky:Brian"], "conf": "oopsla", "year": "2013", "pages": 20}