{"title": "Resizable, Scalable, Concurrent Hash Tables via Relativistic Programming.", "fields": ["hash list", "relativistic programming", "double hashing", "hash table", "hash tree"], "abstract": "We present algorithms for shrinking and expanding a hash table while allowing concurrent, wait-free, linearly scalable lookups. These resize algorithms allow Read-Copy Update (RCU) hash tables to maintain constant-time performance as the number of entries grows, and reclaim memory as the number of entries decreases, without delaying or disrupting readers. We call the resulting data structure a relativistic hash table.\n\nBenchmarks of relativistic hash tables in the Linux kernel show that lookup scalability during resize improves 125x over reader-writer locking, and 56% over Linux's current state of the art. Relativistic hash lookups experience no performance degradation during a resize. Applying this algorithm to memcached removes a scalability limit for get requests, allowing memcached to scale linearly and service up to 46% more requests per second.\n\nRelativistic hash tables demonstrate the promise of a new concurrent programming methodology known as relativistic programming. Relativistic programming makes novel use of existing RCU synchronization primitives, namely the wait-for-readers operation that waits for unfinished readers to complete. This operation, conventionally used to handle reclamation, here allows ordering of updates without read-side synchronization or memory barriers.", "citation": "Citations (68)", "departments": ["Portland State University", "IBM", "Portland State University"], "authors": ["Josh Triplett.....http://dblp.org/pers/hd/t/Triplett:Josh", "Paul E. McKenney.....http://dblp.org/pers/hd/m/McKenney:Paul_E=", "Jonathan Walpole.....http://dblp.org/pers/hd/w/Walpole:Jonathan"], "conf": "usenix", "year": "2011", "pages": -1}