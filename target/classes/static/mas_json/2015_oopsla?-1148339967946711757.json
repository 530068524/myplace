{"title": "Optimizing hash-array mapped tries for fast and lean immutable JVM collections.", "fields": ["lag", "clojure", "hash trie", "persistent data structure", "scala"], "abstract": "The data structures under-pinning collection API (e.g. lists, sets, maps) in the standard libraries of programming languages are used intensively in many applications. The standard libraries of recent Java Virtual Machine languages, such as Clojure or Scala, contain scalable and well-performing immutable collection data structures that are implemented as Hash-Array Mapped Tries (HAMTs). HAMTs already feature efficient lookup, insert, and delete operations, however due to their tree-based nature their memory footprints and the runtime performance of iteration and equality checking lag behind array-based counterparts. This particularly prohibits their application in programs which process larger data sets. In this paper, we propose changes to the HAMT design that increase the overall performance of immutable sets and maps. The resulting general purpose design increases cache locality and features a canonical representation. It outperforms Scala\u2019s and Clojure\u2019s data structure implementations in terms of memory footprint and runtime efficiency of iteration (1.3\u20136.7x) and equality checking (3\u201325.4x).", "citation": "Citations (10)", "departments": ["CWI, Netherlands", "CWI, Netherlands"], "authors": ["Michael J. Steindorfer.....http://dblp.org/pers/hd/s/Steindorfer:Michael_J=", "Jurgen J. Vinju.....http://dblp.org/pers/hd/v/Vinju:Jurgen_J="], "conf": "oopsla", "year": "2015", "pages": 18}