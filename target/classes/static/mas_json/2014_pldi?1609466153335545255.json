{"title": "Tracelet-based code search in executables.", "fields": ["precision and recall", "memory address", "executable", "x86", "bridging"], "abstract": "We address the problem of code search in executables. Given a function in binary form and a large code base, our goal is to statically find similar functions in the code base. Towards this end, we present a novel technique for computing similarity between functions. Our notion of similarity is based on decomposition of functions into  tracelets : continuous, short, partial traces of an execution. To establish tracelet similarity in the face of low-level compiler transformations, we employ a simple rewriting engine. This engine uses constraint solving over alignment constraints and data dependencies to match registers and memory addresses between tracelets, bridging the gap between tracelets that are otherwise similar. We have implemented our approach and applied it to find matches in  over a million  binary functions. We compare tracelet matching to approaches based on n-grams and graphlets and show that tracelet matching obtains dramatically better precision and recall.", "citation": "Citations (31)", "departments": ["Technion \u2013 Israel Institute of Technology", "Technion \u2013 Israel Institute of Technology"], "authors": ["Yaniv David.....http://dblp.org/pers/hd/d/David:Yaniv", "Eran Yahav.....http://dblp.org/pers/hd/y/Yahav:Eran"], "conf": "pldi", "year": "2014", "pages": 12}