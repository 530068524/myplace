{"title": "Gradually typed symbolic expressions.", "fields": ["expression", "cons", "boilerplate code", "modeling language", "type safety"], "abstract": "Embedding a domain-specific language (DSL) in a general purpose host language is an efficient way to develop a new DSL. Various kinds of languages and paradigms can be used as host languages, including object-oriented, functional, statically typed, and dynamically typed variants, all having their pros and cons. For deep embedding, statically typed languages enable early checking and potentially good DSL error messages, instead of reporting runtime errors. Dynamically typed languages, on the other hand, enable flexible transformations, thus avoiding extensive boilerplate code. In this paper, we introduce the concept of gradually typed symbolic expressions that mix static and dynamic typing for symbolic data. The key idea is to combine the strengths of dynamic and static typing in the context of deep embedding of DSLs. We define a gradually typed calculus \u03bb   , formalize its type system and dynamic semantics, and prove type safety. We introduce a host language called Modelyze that is based on \u03bb   , and evaluate the approach by embedding a series of equation-based domain-specific modeling languages, all within the domain of physical modeling and simulation.", "citation": "Not cited", "departments": ["Royal Institute of Technology", "Indiana University"], "authors": ["David Broman.....http://dblp.org/pers/hd/b/Broman:David", "Jeremy G. Siek.....http://dblp.org/pers/hd/s/Siek:Jeremy_G="], "conf": "popl", "year": "2018", "pages": 15}