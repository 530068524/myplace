{"title": "Lightweight computation tree tracing for lazy functional languages.", "fields": ["haskell", "lazy evaluation", "debugger", "algorithmic program debugging", "computation tree"], "abstract": "A computation tree of a program execution describes computations of functions and their dependencies. A computation tree describes how a program works and is at the heart of algorithmic debugging. To generate a computation tree, existing algorithmic debuggers either use a complex implementation or yield a less informative approximation. We present a method for lazy functional languages that requires only a simple tracing library to generate a detailed computation tree. With our algorithmic debugger a programmer can debug any Haskell program by only importing our library and annotating suspected functions.", "citation": "Citations (3)", "departments": ["University of Kent", "University of Kent"], "authors": ["Maarten Faddegon.....http://dblp.org/pers/hd/f/Faddegon:Maarten", "Olaf Chitil.....http://dblp.org/pers/hd/c/Chitil:Olaf"], "conf": "pldi", "year": "2016", "pages": 15}