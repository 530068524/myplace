{"title": "Static contract checking for Haskell.", "fields": ["declarative programming", "debugging", "haskell", "imperative programming", "symbolic execution"], "abstract": "Program errors are hard to detect and are costly both to programmers who spend significant efforts in debugging, and for systems that are guarded by runtime checks. Static verification techniques have been applied to imperative and object-oriented languages, like Java and C#, but few have been applied to a higher-order lazy functional language, like Haskell. In this paper, we describe a sound and automatic static verification framework for Haskell, that is based on contracts and symbolic execution. Our approach is modular and gives precise blame assignments at compile-time in the presence of higher-order functions and laziness.", "citation": "Citations (109)", "departments": ["University of Cambridge", "Microsoft", "Chalmers University of Technology"], "authors": ["Dana N. Xu.....http://dblp.org/pers/hd/x/Xu:Dana_N=", "Simon L. Peyton Jones.....http://dblp.org/pers/hd/j/Jones:Simon_L=_Peyton", "Koen Claessen.....http://dblp.org/pers/hd/c/Claessen:Koen"], "conf": "popl", "year": "2009", "pages": 12}