{"title": "Finding and Preventing Bugs in JavaScript Bindings.", "fields": ["execution model", "exploit", "security bug", "software bug", "entry point"], "abstract": "JavaScript, like many high-level languages, relies on runtime systemswritten in low-level C and C++. For example, the Node.js runtime systemgives JavaScript code access to the underlying filesystem, networking, and I/O by implementing utility functions in C++. Since C++'s typesystem, memory model, and execution model differ significantly fromJavaScript's, JavaScript code must call these runtime functions viaintermediate binding layer code that translates type, state, and failure between the two languages. Unfortunately, binding code isboth hard to avoid and hard to get right. This paper describes several types of exploitable errors that bindingcode creates, and develops both a suite of easily-to-build static checkersto detect such errors and a backwards-compatible, low-overhead API toprevent them. We show that binding flaws are a serious security problem byusing our checkers to craft 81 proof-of-concept exploits forsecurity flaws in the binding layers of the Node.js and Chrome, runtimesystems that support hundreds of millions of users. As one practical measure of binding bug severity, we were awarded $6,000 in bounties for just two Chrome bug reports.", "citation": "Citations (2)", "departments": ["Stanford University", "Stanford University", "Stanford University", "University of California, San Diego"], "authors": ["Fraser Brown.....http://dblp.org/pers/hd/b/Brown:Fraser", "Shravan Narayan.....http://dblp.org/pers/hd/n/Narayan:Shravan", "Riad S. Wahby.....http://dblp.org/pers/hd/w/Wahby:Riad_S=", "Dawson R. Engler.....http://dblp.org/pers/hd/e/Engler:Dawson_R=", "Ranjit Jhala.....http://dblp.org/pers/hd/j/Jhala:Ranjit", "Deian Stefan.....http://dblp.org/pers/hd/s/Stefan:Deian"], "conf": "sp", "year": "2017", "pages": 20}