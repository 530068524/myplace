{"title": "Crust: A Bounded Verifier for Rust (N).", "fields": ["pointer aliasing", "programmer", "memory safety", "software bug", "bounded function"], "abstract": "Rust is a modern systems language that providesguaranteed memory safety through static analysis. However, Rustincludes an escape hatch in the form of \"unsafe code,\" which thecompiler assumes to be memory safe and to preserve crucialpointer aliasing invariants. Unsafe code appears in many datastructure implementations and other essential libraries, and bugsin this code can lead to memory safety violations in parts of theprogram that the compiler otherwise proved safe. We present CRUST, a tool combining exhaustive test genera-tion and bounded model checking to detect memory safety errors, as well as violations of Rust's pointer aliasing invariants withinunsafe library code. CRUST requires no programmer annotations, only an indication of the modules to check. We evaluate CRUSTon data structures from the Rust standard library. It detectsmemory safety bugs that arose during the library's developmentand remained undetected for several months.", "citation": "Citations (3)", "departments": ["University of Washington", "University of Washington", "University of Washington"], "authors": ["John Toman.....http://dblp.org/pers/hd/t/Toman:John", "Stuart Pernsteiner.....http://dblp.org/pers/hd/p/Pernsteiner:Stuart", "Emina Torlak.....http://dblp.org/pers/hd/t/Torlak:Emina"], "conf": "kbse", "year": "2015", "pages": 6}