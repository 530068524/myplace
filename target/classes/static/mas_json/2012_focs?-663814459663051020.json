{"title": "Pseudorandomness from Shrinkage.", "fields": ["branching", "randomness", "combinatorics", "shrinkage", "pseudorandomness", "pseudorandom number generator", "discrete mathematics", "mathematics", "random number generation"], "abstract": "One powerful theme in complexity theory and pseudorandom ness in the past few decades has been the use lower bounds to give pseudorandom generators (PRGs). However, the general results using this hardness vs.\\ randomness paradigm suffer a quantitative loss in parameters, and hence do not give nontrivial implications for models where we don't know super-polynomial lower bounds but do know lower bounds of a fixed polynomial. We show that when such lower bounds are proved using random restrictions, we can construct PRGs which are essentially best possible without in turn improving the lower bounds. More specifically, say that a circuit family has shrinkage exponent $\\Gamma$ if a random restriction leaving a $p$ fraction of variables unset shrinks the size of any circuit in the family by a factor of $p^{\\Gamma + o(1)}$. %Our PRG uses a seed of length $s^{1/(\\Gamma + 1 + o(1))}$ to output $n$ bits that fools any circuit in the family of size $s$, where $n$ is the maximum number of bits a circuit of size $s$ in the family can read. Our PRG uses a seed of length $s^{1/(\\Gamma + 1) + o(1)}$ to fool circuits in the family of size $s$. By using this generic construction, we get PRGs with polynomially small error for the following classes of circuits of size $s$ and with the following seed lengths: \\begin{enumerate} \\item For de Morgan formulas, seed length $s^{1/3+o(1)}$;% and output length $s$; \\item For formulas over an arbitrary basis, seed length $s^{1/2+o(1)}$;% and output length $s$; \\item For read-once de Morgan formulas, seed length $s^{.234...}$;% and output length $s$; \\item For branching programs of size $s$, seed length $s^{1/2+o(1)}$.% and output length $s$. \\end{enumerate} The previous best PRGs known for these classes used seeds of length bigger than $n/2$ to output $n$ bits, and worked only when the size $s=O(n)$ \\cite{BPW}.", "citation": "Not cited", "year": "2012", "departments": ["University of California, San Diego", "Microsoft", "University of Texas at Austin"], "conf": "focs", "authors": ["Russell Impagliazzo.....http://dblp.org/pers/hd/i/Impagliazzo:Russell", "Raghu Meka.....http://dblp.org/pers/hd/m/Meka:Raghu", "David Zuckerman.....http://dblp.org/pers/hd/z/Zuckerman:David"], "pages": 9}