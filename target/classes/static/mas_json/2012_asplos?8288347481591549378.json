{"title": "Scalable address spaces using RCU balanced trees.", "fields": ["kernel virtual address space", "page fault", "ranging", "thread", "address space"], "abstract": "Software developers commonly exploit multicore processors by building multithreaded software in which all threads of an application share a single address space. This shared address space has a cost: kernel virtual memory operations such as handling soft page faults, growing the address space, mapping files, etc. can limit the scalability of these applications. In widely-used operating systems, all of these operations are synchronized by a single per-process lock. This paper contributes a new design for increasing the concurrency of kernel operations on a shared address space by exploiting read-copy-update (RCU) so that soft page faults can both run in parallel with operations that mutate the same address space and avoid contending with other page faults on shared cache lines. To enable such parallelism, this paper also introduces an RCU-based binary balanced tree for storing memory mappings. An experimental evaluation using three multithreaded applications shows performance improvements on 80 cores ranging from 1.7x to 3.4x for an implementation of this design in the Linux 2.6.37 kernel. The RCU-based binary tree enables soft page faults to run at a constant cost with an increasing number of cores,suggesting that the design will scale well beyond 80 cores.", "citation": "Citations (94)", "year": "2012", "departments": ["Massachusetts Institute of Technology", "Massachusetts Institute of Technology", "Massachusetts Institute of Technology"], "conf": "asplos", "authors": ["Austin T. Clements.....http://dblp.org/pers/hd/c/Clements:Austin_T=", "M. Frans Kaashoek.....http://dblp.org/pers/hd/k/Kaashoek:M=_Frans", "Nickolai Zeldovich.....http://dblp.org/pers/hd/z/Zeldovich:Nickolai"], "pages": 12}