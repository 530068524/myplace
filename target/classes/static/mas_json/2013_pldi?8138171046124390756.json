{"title": "Fast condensation of the program dependence graph.", "fields": ["loop fission", "strongly connected component", "quadratic growth", "program dependence graph", "optimizing compiler"], "abstract": "Aggressive compiler optimizations are formulated around the Program Dependence Graph (PDG). Many techniques, including loop fission and parallelization are concerned primarily with dependence cycles in the PDG. The Directed Acyclic Graph of Strongly Connected Components (DAGSCC) represents these cycles directly. The naive method to construct the DAGSCC first computes the full PDG. This approach limits adoption of aggressive optimizations because the number of analysis queries grows quadratically with program size, making DAGSCC construction expensive. Consequently, compilers optimize small scopes with weaker but faster analyses.   We observe that many PDG edges do not affect the DAGSCC and that ignoring them cannot affect clients of the DAGSCC. Exploiting this insight, we present an algorithm to omit those analysis queries to compute the DAGSCC efficiently. Across 366 hot loops from 20 SPEC2006 benchmarks, this method computes the DAGSCC in half of the time using half as many queries.", "citation": "Citations (9)", "departments": ["Princeton University", "Princeton University", "Intel", "Princeton University"], "authors": ["Nick P. Johnson.....http://dblp.org/pers/hd/j/Johnson:Nick_P=", "Taewook Oh.....http://dblp.org/pers/hd/o/Oh:Taewook", "Ayal Zaks.....http://dblp.org/pers/hd/z/Zaks:Ayal", "David I. August.....http://dblp.org/pers/hd/a/August:David_I="], "conf": "pldi", "year": "2013", "pages": 12}