{"title": "bLSM: a general purpose log structured merge tree.", "fields": ["write amplification", "merge", "log structured merge tree", "bloom filter", "performance metric"], "abstract": "Data management workloads are increasingly write-intensive and subject to strict latency SLAs. This presents a dilemma: Update in place systems have unmatched latency but poor write throughput. In contrast, existing log structured techniques improve write throughput but sacrifice read performance and exhibit unacceptable latency spikes.   We begin by presenting a new performance metric:  read fanout , and argue that, with  read  and  write amplification , it better characterizes real-world indexes than approaches such as asymptotic analysis and price/performance.   We then present  bLSM , a Log Structured Merge (LSM) tree with the advantages of B-Trees and log structured approaches: (1) Unlike existing log structured trees, bLSM has near-optimal read and scan performance, and (2) its new \"spring and gear\" merge scheduler bounds write latency without impacting throughput or allowing merges to block writes for extended periods of time. It does this by ensuring merges at each level of the tree make steady progress without resorting to techniques that degrade read performance.   We use Bloom filters to improve index performance, and find a number of subtleties arise. First, we ensure reads can stop after finding one version of a record. Otherwise, frequently written items would incur multiple B-Tree lookups. Second, many applications check for existing values at insert. Avoiding the seek performed by the check is crucial.", "citation": "Citations (196)", "year": "2012", "departments": ["Yahoo!", "Yahoo!"], "conf": "sigmod", "authors": ["Russell Sears.....http://dblp.org/pers/hd/s/Sears:Russell", "Raghu Ramakrishnan.....http://dblp.org/pers/hd/r/Ramakrishnan:Raghu"], "pages": 12}