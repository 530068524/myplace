{"title": "Preventing Memory Error Exploits with WIT.", "fields": ["memory corruption", "exploit", "memory errors", "compile time", "static analysis"], "abstract": "Attacks often exploit memory errors to gain control over the execution of vulnerable programs. These attacks remain a serious problem despite previous research on techniques to prevent them. We present write integrity testing (WIT), a new technique that provides practical protection from these attacks. WIT uses points-to analysis at compile time to compute the control-flow graph and the set of objects that can be written by each instruction in the program. Then it generates code instrumented to prevent instructions from modifying objects that are not in the set computed by the static analysis, and to ensure that indirect control transfers are allowed by the control-flow graph. To improve coverage where the analysis is not precise enough, WIT inserts small guards between the original program objects. We describe an efficient implementation with optimizations to reduce space and time overhead. This implementation can be used in practice because it compiles C and C++ programs without modifications, it has high coverage with no false positives, and it has low overhead. WIT's average runtime overhead is only 7% across a set of CPU intensive benchmarks and it is negligible when IO is the bottleneck.", "citation": "Citations (275)", "departments": ["Microsoft", "Microsoft", "Microsoft", "Microsoft", "Microsoft"], "authors": ["Periklis Akritidis.....http://dblp.org/pers/hd/a/Akritidis:Periklis", "Cristian Cadar.....http://dblp.org/pers/hd/c/Cadar:Cristian", "Costin Raiciu.....http://dblp.org/pers/hd/r/Raiciu:Costin", "Manuel Costa.....http://dblp.org/pers/hd/c/Costa:Manuel", "Miguel Castro.....http://dblp.org/pers/hd/c/Castro:Miguel"], "conf": "sp", "year": "2008", "pages": 15}