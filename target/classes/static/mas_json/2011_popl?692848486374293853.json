{"title": "A technique for the effective and automatic reuse of classical compiler optimizations on multithreaded code.", "fields": ["optimizing compiler", "data flow analysis", "correctness", "thread", "program optimization"], "abstract": "A large body of data-flow analyses exists for analyzing and optimizing sequential code. Unfortunately, much of it cannot be directly applied on parallel code, for reasons of correctness. This paper presents a technique to automatically, aggressively, yet safely apply sequentially-sound data-flow transformations,  without change , on shared-memory programs. The technique is founded on the notion of program references being \"siloed\" on certain control-flow paths. Intuitively, siloed references are free of interference from other threads within the confines of such paths. Data-flow transformations can, in general, be unblocked on siloed references.   The solution has been implemented in a widely used compiler. Results on benchmarks from SPLASH-2 show that performance improvements of up to 41% are possible, with an average improvement of 6% across all the tested programs over all thread counts.", "citation": "Citations (17)", "departments": ["Hewlett-Packard", "Hewlett-Packard", "Hewlett-Packard", "Hewlett-Packard", "Hewlett-Packard"], "authors": ["Pramod G. Joisha.....http://dblp.org/pers/hd/j/Joisha:Pramod_G=", "Robert S. Schreiber.....http://dblp.org/pers/hd/s/Schreiber:Robert_S=", "Prithviraj Banerjee.....http://dblp.org/pers/hd/b/Banerjee:Prithviraj", "Hans-Juergen Boehm.....http://dblp.org/pers/hd/b/Boehm:Hans=Juergen", "Dhruva R. Chakrabarti.....http://dblp.org/pers/hd/c/Chakrabarti:Dhruva_R="], "conf": "popl", "year": "2011", "pages": 14}