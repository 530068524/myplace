{"title": "Fuzzing the Rust Typechecker Using CLP (T).", "fields": ["soundness", "fuzz testing", "constraint logic programming", "software bug", "interpreter"], "abstract": "Language fuzzing is a bug-finding technique for testing compilers and interpreters, its effectiveness depends upon the ability to automatically generate valid programs in the language under test. Despite the proven success of language fuzzing, there is a severe lack of tool support for fuzzing statically-typed languages with advanced type systems because existing fuzzing techniques cannot effectively and automatically generate well-typed programs that use sophisticated types. In this work we describe how to automatically generate well-typed programs that use sophisticated type systems by phrasing the problem of well-typed program generation in terms of Constraint Logic Programming (CLP). In addition, we describe how to specifically target the typechecker implementation for testing, unlike all existing work which ignores the typechecker. We focus on typechecker precision bugs, soundness bugs, and consistency bugs. We apply our techniques to Rust, a complex, industrial-strength language with a sophisticated type system.", "citation": "Citations (6)", "departments": ["University of California, Santa Barbara", "University of California, Santa Barbara", "University of California, Santa Barbara"], "authors": ["Kyle Dewey.....http://dblp.org/pers/hd/d/Dewey:Kyle", "Jared Roesch.....http://dblp.org/pers/hd/r/Roesch:Jared", "Ben Hardekopf.....http://dblp.org/pers/hd/h/Hardekopf:Ben"], "conf": "kbse", "year": "2015", "pages": 12}