{"title": "Modeling abstract types in modules with open existential types.", "fields": ["lambda calculus", "recursion", "second order logic", "system f", "mixin"], "abstract": "We propose F-zip, a calculus of open existential types that is an extension of System F obtained by decomposing the introduction and elimination of existential types into more atomic constructs. Open existential types model modular type abstraction as done in module systems. The static semantics of F-zip adapts standard techniques to deal with linearity of typing contexts, its dynamic semantics is a small-step reduction semantics that performs extrusion of type abstraction as needed during reduction, and the two are related by subject reduction and progress lemmas. Applying the Curry-Howard isomorphism, F-zip can be also read back as a logic with the same expressive power as second-order logic but with more modular ways of assembling partial proofs. We also extend the core calculus to handle the double vision problem as well as type-level and term-level recursion. The resulting language turns out to be a new formalization of (a minor variant of) Dreyer's internal language for recursive and mixin modules.", "citation": "Citations (11)", "departments": ["French Institute for Research in Computer Science and Automation", "French Institute for Research in Computer Science and Automation"], "authors": ["Beno\u00eet Montagu.....http://dblp.org/pers/hd/m/Montagu:Beno=icirc=t", "Didier R\u00e9my.....http://dblp.org/pers/hd/r/R=eacute=my:Didier"], "conf": "popl", "year": "2009", "pages": 12}