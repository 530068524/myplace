{"title": "Continuous code quality: are we (really) doing that?", "fields": ["software inspection", "preprint", "sprint", "software quality", "source code"], "abstract": "Continuous Integration (CI) is a software engineering practice where developers constantly integrate their changes to a project through an automated build process. The goal of CI is to provide developers with prompt feedback on several quality dimensions after each change. Indeed, previous studies provided empirical evidence on a positive association between properly following CI principles and source code quality. A core principle behind CI is Continuous Code Quality (also known as CCQ, which includes automated testing and automated code inspection) may appear simple and effective, yet we know little about its practical adoption. In this paper, we propose a preliminary empirical investigation aimed at understanding how rigorously practitioners follow CCQ. Our study reveals a strong dichotomy between theory and practice: developers do not perform continuous inspection but rather control for quality only at the end of a sprint and most of the times only on the release branch. Preprint [https://doi.org/10.5281/zenodo.1341036]. Data and Materials [http://doi.org/10.5281/zenodo.1341015].", "citation": "Not cited", "departments": ["University of Zurich", "University of Zurich", "University of Zurich", "University of Zurich"], "authors": ["Carmine Vassallo.....http://dblp.org/pers/hd/v/Vassallo:Carmine", "Fabio Palomba.....http://dblp.org/pers/hd/p/Palomba:Fabio", "Alberto Bacchelli.....http://dblp.org/pers/hd/b/Bacchelli:Alberto", "Harald C. Gall.....http://dblp.org/pers/hd/g/Gall:Harald_C="], "conf": "kbse", "year": "2018", "pages": 6}