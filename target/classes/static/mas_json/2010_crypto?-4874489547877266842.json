{"title": "Protecting Cryptographic Keys against Continual Leakage.", "fields": ["homomorphic encryption", "security token", "adversary", "key", "side channel attack"], "abstract": "Side-channel attacks have often proven to have a devastating effect on the security of cryptographic schemes. In this paper, we address the problem of storing cryptographic keys and computing on them in a manner that preserves security even when the adversary is able to obtain information leakage during the computation on the key.\n\nUsing any fully homomorphic encryption with re-randomizable ciphertexts, we show how to encapsulate a key and repeatedly evaluate arbitrary functions on it so that no adversary can gain any useful information from a large class of side-channel attacks. We work in the model of Micali and Reyzin, assuming that only the active part of memory during computation leaks information. Our construction makes use of a single \"leak-free\" hardware token that samples from a distribution that does not depend on the protected key or the function that is evaluated on it.\n\nOur construction is the first general compiler to achieve resilience against polytime leakage functions without performing any leak-free computation on the protected key. Furthermore, the amount of computation our construction must perform does not grow with the amount of leakage the adversary is able to obtain; instead, it suffices to make a stronger assumption about the security of the fully homomorphic encryption.", "citation": "Citations (87)", "departments": ["University of Toronto", "University of Toronto"], "authors": ["Ali Juma.....http://dblp.org/pers/hd/j/Juma:Ali", "Yevgeniy Vahlis.....http://dblp.org/pers/hd/v/Vahlis:Yevgeniy"], "conf": "crypto", "year": "2010", "pages": 18}