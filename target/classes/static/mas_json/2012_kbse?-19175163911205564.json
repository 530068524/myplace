{"title": "Supporting automated software re-engineering using re-aspects.", "fields": ["change impact analysis", "kpi driven code analysis", "software evolution", "code review", "static program analysis"], "abstract": "System maintenance, including omitting an existing system feature e.g. buggy or vulnerable code, or modifying existing features, e.g. replacing them, is still very challenging. To address this problem we introduce the \u201cre-aspect\u201d (re-engineering aspect), inspired from traditional AOP. A re-aspect captures system modification details including signatures of entities to be updated; actions to apply including remove, modify, replace, or inject new code; and code to apply. Re-aspects locate entities to update, entities that will be impacted by the given update, and finally propagate changes on the system source code. We have applied our re-aspects technique to the security re-engineering problem and evaluated it on a set of open source .NET applications to demonstrate its usefulness.", "citation": "Citations (4)", "year": "2012", "departments": ["Swinburne University of Technology", "Swinburne University of Technology", "Swinburne University of Technology"], "conf": "kbse", "authors": ["Mohamed Almorsy.....http://dblp.org/pers/hd/a/Almorsy:Mohamed", "John Grundy.....http://dblp.org/pers/hd/g/Grundy_0001:John", "Amani S. Ibrahim.....http://dblp.org/pers/hd/i/Ibrahim:Amani_S="], "pages": 4}