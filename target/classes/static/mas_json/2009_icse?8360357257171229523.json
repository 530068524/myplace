{"title": "Equality and hashing for (almost) free: Generating implementations from abstraction functions.", "fields": ["abstraction", "hash function", "iterator", "implementation", "universal hashing", "delegation", "programmer", "annotation", "theoretical computer science"], "abstract": "In an object-oriented language such as Java, every class requires implementations of two special methods, one for determining equality and one for computing hash codes. Although the specification of these methods is usually straightforward, they can be hard to code (due to subclassing, delegation, cyclic references, and other factors) and often harbor subtle faults. A technique is presented that simplifies this task. Instead of writing code for the methods, the programmer gives, as a brief annotation, an abstraction function that defines an abstract view of an object's representation, and sometimes an additional observer in the form of an iterator method. Equality and hash codes are then computed in library code that uses reflection to read the annotations. Experiments on a variety of programs suggest that, in comparison to writing the methods by hand, our technique requires less text from the programmer and results in methods that are more often correct.", "citation": "Not cited", "departments": ["Massachusetts Institute of Technology", "Massachusetts Institute of Technology", "Massachusetts Institute of Technology", "Massachusetts Institute of Technology", "Massachusetts Institute of Technology"], "authors": ["Derek Rayside.....http://dblp.org/pers/hd/r/Rayside:Derek", "Zev Benjamin.....http://dblp.org/pers/hd/b/Benjamin:Zev", "Rishabh Singh.....http://dblp.org/pers/hd/s/Singh:Rishabh", "Joseph P. Near.....http://dblp.org/pers/hd/n/Near:Joseph_P=", "Aleksandar Milicevic.....http://dblp.org/pers/hd/m/Milicevic:Aleksandar", "Daniel Jackson.....http://dblp.org/pers/hd/j/Jackson_0001:Daniel"], "conf": "icse", "year": "2009", "pages": 11}