{"title": "Effective and precise dynamic detection of hidden races for Java programs.", "fields": ["scheduling", "lock", "schedule", "java", "contest"], "abstract": "Happens-before relation is widely used to detect data races dynami-cally. However, it could easily hide many data races as it is inter-leaving sensitive. Existing techniques based on randomized sched-uling are ineffective on detecting these hidden races. In this paper, we propose DrFinder, an effective and precise dynamic technique to detect hidden races. Given an execution, DrFinder firstly analyz-es the lock acquisitions in it and collects a set of \"may-trigger\" relations. Each may-trigger relation consists of a method and a type of a Java object. It indicates that, during execution, the method may directly or indirectly acquire a lock of the type. In the subsequent executions of the same program, DrFinder actively schedules the execution according to the set of collected may-trigger relations. It aims to reverse the set of happens-before relation that may exist in the previous executions so as to expose those hidden races. To effectively detect hidden races in each execution, DrFinder also collects a new set of may-trigger relation during its scheduling, which is used in its next scheduling. Our experiment on a suite of real-world Java multithreaded programs shows that DrFinder is effective to detect 89 new data races in 10 runs. Many of these races could not be detected by existing techniques (i.e., FastTrack, ConTest, and PCT) even in 100 runs.", "citation": "Citations (12)", "departments": ["Chinese Academy of Sciences", "Chinese Academy of Sciences"], "authors": ["Yan Cai.....http://dblp.org/pers/hd/c/Cai_0001:Yan", "Lingwei Cao.....http://dblp.org/pers/hd/c/Cao:Lingwei"], "conf": "sigsoft", "year": "2015", "pages": 12}