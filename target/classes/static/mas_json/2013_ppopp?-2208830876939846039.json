{"title": "Scheduling parallel programs by work stealing with private deques.", "fields": ["queue", "effective method", "cilk", "multi core processor", "work stealing"], "abstract": "Work stealing has proven to be an effective method for scheduling parallel programs on multicore computers. To achieve high performance, work stealing distributes tasks between concurrent queues, called deques, which are assigned to each processor. Each processor operates on its deque locally except when performing load balancing via steals. Unfortunately, concurrent deques suffer from two limitations: 1) local deque operations require expensive memory fences in modern weak-memory architectures, 2) they can be very difficult to extend to support various optimizations and flexible forms of task distribution strategies needed many applications, e.g., those that do not fit nicely into the divide-and-conquer, nested data parallel paradigm.   For these reasons, there has been a lot recent interest in implementations of work stealing with non-concurrent deques, where deques remain entirely private to each processor and load balancing is performed via message passing. Private deques eliminate the need for memory fences from local operations and enable the design and implementation of efficient techniques for reducing task-creation overheads and improving task distribution. These advantages, however, come at the cost of communication. It is not known whether work stealing with private deques enjoys the theoretical guarantees of concurrent deques and whether they can be effective in practice.   In this paper, we propose two work-stealing algorithms with private deques and prove that the algorithms guarantee similar theoretical bounds as work stealing with concurrent deques. For the analysis, we use a probabilistic model and consider a new parameter, the branching depth of the computation. We present an implementation of the algorithm as a C++ library and show that it compares well to Cilk on a range of benchmarks. Since our approach relies on private deques, it enables implementing flexible task creation and distribution strategies. As a specific example, we show how to implement task coalescing and steal-half strategies, which can be important in fine-grain, non-divide-and-conquer algorithms such as graph algorithms, and apply them to the depth-first-search problem.", "citation": "Citations (85)", "year": "2013", "departments": ["Carnegie Mellon University", "French Institute for Research in Computer Science and Automation", "Max Planck Society"], "conf": "ppopp", "authors": ["Umut A. Acar.....http://dblp.org/pers/hd/a/Acar:Umut_A=", "Arthur Chargu\u00e9raud.....http://dblp.org/pers/hd/c/Chargu=eacute=raud:Arthur", "Mike Rainey.....http://dblp.org/pers/hd/r/Rainey:Mike"], "pages": 10}