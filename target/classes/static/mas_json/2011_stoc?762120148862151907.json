{"title": "How to leak on key updates.", "fields": ["random oracle", "key distribution", "cryptographic primitive", "leak", "memory leak", "side channel attack", "real time computing", "computer science"], "abstract": "In the continual memory leakage model, security against attackers who can repeatedly obtain leakage is achieved by periodically updating the secret key. This is an appealing model which captures a wide class of side-channel attacks, but all previous constructions in this model provide only a very minimal amount of leakage tolerance  during secret key updates . Since key updates may happen frequently, improving security guarantees against attackers who obtain leakage during these updates is an important problem. In this work, we present the first cryptographic primitives which are secure against a super-logarithmic amount of leakage during secret key updates. We present signature and public key encryption schemes in the standard model which can tolerate a constant fraction of the secret key to be leaked between updates as well as  a constant fraction of the secret key and update randomness  to be leaked during updates. Our signature scheme also allows us to leak a constant fraction of the entire secret state during signing. Before this work, it was unknown how to tolerate super-logarithmic leakage during updates even in the random oracle model. We rely on subgroup decision assumptions in composite order bilinear groups.", "citation": "Citations (64)", "year": "2011", "departments": ["University of Texas at Austin", "University of Texas at Austin", "University of Texas at Austin"], "conf": "stoc", "authors": ["Allison B. Lewko.....http://dblp.org/pers/hd/l/Lewko:Allison_B=", "Mark Lewko.....http://dblp.org/pers/hd/l/Lewko:Mark", "Brent Waters.....http://dblp.org/pers/hd/w/Waters:Brent"], "pages": 10}