{"title": "Dynamic space limits for Haskell.", "fields": ["thread", "haskell", "pointer", "heap", "garbage"], "abstract": "We describe the semantics and implementation of a space limits system for Haskell, which allows programmers to create resource containers that enforce bounded resident memory usage at runtime. Our system is distinguished by a clear allocator-pays semantics drawn from previous experience with profiling in Haskell and an implementation strategy which uses a block-structured heap to organize containers, allowing us to enforce limits with high accuracy. To deal with the problem of deallocating data in a garbage collected heap, we propose a novel taint-based mechanism that unifies the existing practices of revocable pointers and killing threads in order to reclaim memory. Our system is implemented in GHC, a production-strength compiler for Haskell.", "citation": "Citations (6)", "departments": ["Stanford University", "Stanford University"], "authors": ["Edward Z. Yang.....http://dblp.org/pers/hd/y/Yang:Edward_Z=", "David Mazi\u00e8res.....http://dblp.org/pers/hd/m/Mazi=egrave=res:David"], "conf": "pldi", "year": "2014", "pages": 11}