{"title": "CANAL: a cache timing analysis framework via LLVM transformation.", "fields": ["software analysis pattern", "cache", "symbolic execution", "intermediate language", "side channel attack"], "abstract": "A unified modeling framework for non-functional properties of a program is essential for research in software analysis and verification, since it reduces burdens on individual researchers to implement new approaches and compare existing approaches. We present CANAL, a framework that models the cache behaviors of a program by transforming its intermediate representation in the LLVM compiler. CANAL inserts auxiliary variables and instructions over these variables, to allow standard verification tools to handle a new class of cache related properties, e.g., for computing the worst-case execution time and detecting side-channel leaks.    We demonstrate the effectiveness of using three verification tools: KLEE, SMACK and Crab-llvm. We confirm the accuracy of our cache model by comparing with CPU cycle-accurate simulation results of GEM5.    CANAL is available on GitHub(https://github.com/canalcache/canal) and YouTube(https://youtu.be/JDou3F1j2nY).", "citation": "Not cited", "departments": ["University of Southern California", "University of Southern California", "University of Southern California"], "authors": ["Chungha Sung.....http://dblp.org/pers/hd/s/Sung:Chungha", "Brandon Paulsen.....http://dblp.org/pers/hd/p/Paulsen:Brandon", "Chao Wang.....http://dblp.org/pers/hd/w/Wang_0001:Chao"], "conf": "kbse", "year": "2018", "pages": 4}