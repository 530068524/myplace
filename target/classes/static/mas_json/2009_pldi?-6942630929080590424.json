{"title": "Efficiently and precisely locating memory leaks and bloat.", "fields": ["overhead", "c dynamic memory allocation", "heap", "memory leak", "working set"], "abstract": "Inefficient use of memory, including leaks and bloat, remain a significant challenge for C and C++ developers. Applications with these problems become slower over time as their working set grows and can become unresponsive. At the same time, memory leaks and bloat remain notoriously difficult to debug, and comprise a large number of reported bugs in mature applications. Previous tools for diagnosing memory inefficiencies-based on garbage collection, binary rewriting, or code sampling-impose high overheads (up to 100X) or generate many false alarms.   This paper presents Hound, a runtime system that helps track down the sources of memory leaks and bloat in C and C++ applications. Hound employs  data sampling , a staleness-tracking approach based on a novel heap organization, to make it both precise and efficient. Hound has no false positives, and its runtime and space overhead are low enough that it can be used in deployed applications. We demonstrate Hound's efficacy across a suite of synthetic benchmarks and real applications.", "citation": "Citations (71)", "departments": ["University of Massachusetts Amherst", "University of Massachusetts Amherst", "Microsoft"], "authors": ["Gene Novark.....http://dblp.org/pers/hd/n/Novark:Gene", "Emery D. Berger.....http://dblp.org/pers/hd/b/Berger:Emery_D=", "Benjamin G. Zorn.....http://dblp.org/pers/hd/z/Zorn:Benjamin_G="], "conf": "pldi", "year": "2009", "pages": 11}