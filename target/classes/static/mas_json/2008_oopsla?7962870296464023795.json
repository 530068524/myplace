{"title": "The visitor pattern as a reusable, generic, type-safe component.", "fields": ["type safety", "component based software engineering", "visitor pattern", "return type", "scala"], "abstract": "The V ISITOR  design pattern shows how to separate the structure of an object hierarchy from the behaviour of traversals over that hierarchy. The pattern is very flexible; this very flexibility makes it difficult to capture the pattern as anything more formal than prose, pictures and prototypes.   We show how to capture the essence of the V ISITOR  pattern as a reusable software library, by using advanced type system features appearing in modern object-oriented languages such as Scala. We preserve  type-safety statically and modularly : no reflection or similar mechanisms are used and modules can be independently compiled. The library is  generic , in two senses: not only is it parametrised by both the return type and the shape of the object hierarchy, but also it allows a number of implementation choices (internal versus external control, imperative versus functional behaviour, orthogonal aspects such as tracing and memoisation) to be specified by parameters rather than fixed in early design decisions. Finally, we propose a generalised  datatype -like notation,on top of our visitor library: this provides a convenient functional decomposition style in object-oriented languages.", "citation": "Citations (30)", "departments": ["University of Oxford", "University of Oxford", "University of Oxford"], "authors": ["Bruno C. d. S. Oliveira.....http://dblp.org/pers/hd/o/Oliveira:Bruno_C=_d=_S=", "Meng Wang.....http://dblp.org/pers/hd/w/Wang_0002:Meng", "Jeremy Gibbons.....http://dblp.org/pers/hd/g/Gibbons:Jeremy"], "conf": "oopsla", "year": "2008", "pages": 18}