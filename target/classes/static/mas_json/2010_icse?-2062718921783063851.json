{"title": "From behaviour preservation to behaviour modification: constraint-based mutant generation.", "fields": ["access modifiers", "mutation testing", "executable", "expression", "code refactoring"], "abstract": "The efficacy of mutation analysis depends heavily on its capability to mutate programs in such a way that they remain executable  and  exhibit deviating behaviour. Whereas the former requires knowledge about the syntax and static semantics of the programming language, the latter requires some least understanding of its dynamic semantics, i.e., how expressions are evaluated. We present an approach that is knowledgeable enough to generate only mutants that are both syntactically and semantically correct and likely exhibit non-equivalent behaviour. Our approach builds on our own prior work on constraint-based refactoring tools, and works by negating behaviour-preserving constraints. As a proof of concept we present an enhanced implementation of the  Access Modifier Change  operator for Java programs whose naive implementations create huge numbers of mutants that do not compile or leave behaviour unaltered. While we cannot guarantee that our generated mutants are non-equivalent, we can demonstrate a considerable reduction in the number of vain mutant generations, leading to substantial temporal savings.", "citation": "Citations (4)", "departments": ["Rolf C. Hagen Group", "Rolf C. Hagen Group"], "authors": ["Friedrich Steimann.....http://dblp.org/pers/hd/s/Steimann:Friedrich", "Andreas Thies.....http://dblp.org/pers/hd/t/Thies:Andreas"], "conf": "icse", "year": "2010", "pages": 10}