{"title": "Does Automated Refactoring Obviate Systematic Editing?", "fields": ["merge", "clone", "regression testing", "data flow diagram", "code refactoring"], "abstract": "When developers add features and fix bugs, they often make  systematic edits ---similar edits to multiple locations. Systematic edits may indicate that developers should instead refactor to eliminate redundancy. This paper explores this question by designing and implementing a fully automated refactoring tool called R ase , which performs  clone removal.  R ase  (1) extracts common code guided by a systematic edit; (2) creates new types and methods as needed; (3) parameterizes differences in types, methods, variables, and expressions; and (4) inserts return objects and exit labels based on control and data flow. To our knowledge, this functionality makes R ase  the most advanced refactoring tool for automated clone removal.   We evaluate R ase  with real-world systematic edits and compare to method based clone removal. R ase  successfully performs clone removal in 30 of 56 method pairs (n=2) and 20 of 30 method groups (n\u22653) with systematic edits. We find that scoping refactoring based on systematic edits (58%), rather than the entire method (33%), increases the applicability of automated clone removal. Automated refactoring is not feasible in the other 42% cases, which indicates that automated refactoring does not obviate the need for systematic editing.", "citation": "Citations (20)", "departments": ["University of Texas at Austin", "University of Texas at Austin", "University of California, Los Angeles", "Microsoft"], "authors": ["Na Meng.....http://dblp.org/pers/hd/m/Meng:Na", "Lisa Hua.....http://dblp.org/pers/hd/h/Hua:Lisa", "Miryung Kim.....http://dblp.org/pers/hd/k/Kim:Miryung", "Kathryn S. McKinley.....http://dblp.org/pers/hd/m/McKinley:Kathryn_S="], "conf": "icse", "year": "2015", "pages": 11}