{"title": "Analyzing the performance of code-copying virtual machines.", "fields": ["interpreter", "just in time compilation", "machine code", "bytecode", "interpreted language"], "abstract": "Many popular programming languages use interpreter-based execution for portability, supporting dynamic or reflective properties, and ease of implementation.  Code-copying  is an optimization technique for interpreters that reduces the performance gap between interpretation and  JIT  compilation, offering significant speedups over direct-threading interpretation. Due to varying language features and virtual machine design, however, not all languages benefit from codecopying to the same extent. We consider here properties of interpreted languages, and in particular bytecode and virtual machine construction that enhance or reduce the impact of code-copying. We implemented code-copying and compared performance with the original direct-threading virtual machines for three languages, Java (SableVM), OCaml, and Ruby (Yarv), examining performance on three different architectures, ia32 (Pentium 4), x86_64 (AMD64) and PowerPC (G5). Best speedups are achieved on ia32 by OCaml (maximum 4.88 times, 2.81 times on average), where a small and simple bytecode design facilitates improvements to branch prediction brought by code-copying. Yarv only slightly improves over direct-threading; large working sizes of bytecodes, and a relatively small fraction of time spent in the actual interpreter loop both limit the application of codecopying and its overall net effect. We are able to show that simple ahead of time analysis of VM and execution properties can help determine the suitability of code-copying for a particular VM before an implementation of code-copying is even attempted.", "citation": "Citations (10)", "departments": ["McGill University", "McGill University"], "authors": ["Gregory B. Prokopski.....http://dblp.org/pers/hd/p/Prokopski:Gregory_B=", "Clark Verbrugge.....http://dblp.org/pers/hd/v/Verbrugge:Clark"], "conf": "oopsla", "year": "2008", "pages": 20}