{"title": "Hercules: Reproducing Crashes in Real-World Application Binaries.", "fields": ["symbolic execution", "fuzz testing", "crash", "windows media", "software security assurance"], "abstract": "Binary analysis is a well-investigated area in software engineering and security. Given real-world program binaries, generating test inputs which cause the binaries to crash is crucial. Generation of crashing inputs has many applications including off-line analysis of software prior to deployment, or online analysis of software patches as they are inserted. In this work, we present a method for generating inputs which reach a given \"potentially crashing\" location. Such potentially crashing locations can be found by a separate static analysis (or by gleaning crash reports submitted by internal / external users) and serve as the input to our method. The test input generated by our method serves as a witness of the crash. Our method is particularly suited for binaries of programs which take in complex structured inputs. Experiments on real-life applications such as the Adobe Reader and the Windows Media Player demonstrate that our Hercules tool built on selective symbolic execution engine S2E can generate crashing inputs within few hours, where symbolic approaches (as embodied by S2E) or blackbox fuzzing approaches (as embodied by the commercial tool PeachFuzzer) failed.", "citation": "Citations (6)", "departments": ["National University of Singapore", "National University of Singapore", "National University of Singapore", "National University of Singapore"], "authors": ["Van-Thuan Pham.....http://dblp.org/pers/hd/p/Pham:Van=Thuan", "Wei Boon Ng.....http://dblp.org/pers/hd/n/Ng:Wei_Boon", "Konstantin Rubinov.....http://dblp.org/pers/hd/r/Rubinov:Konstantin", "Abhik Roychoudhury.....http://dblp.org/pers/hd/r/Roychoudhury:Abhik"], "conf": "icse", "year": "2015", "pages": 11}