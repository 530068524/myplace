{"title": "Parallel incremental whole-program optimizations for Scala.js.", "fields": ["compiler", "single compilation unit", "javascript", "multi core processor", "scala"], "abstract": "Whole-program optimizations are powerful tools that can dramatically improve performance, size and other aspects of programs. Because they depend on global knowledge, they must typically be reapplied to the whole program when small changes are made, which makes them too slow for the development cycle. This is an issue for some environments that require, or benefit a lot from, whole-program optimizations, such as compilation to JavaScript or to the Dalvik VM, because their development cycle is slowed down either by the lack of optimizations, or by the time spent on applying them.     We present a new approach to designing incremental whole-program optimizers for object-oriented and functional languages: when part of a program changes, only the portions affected by the changes are reoptimized. An incremental optimizer using this approach for Scala.js, the Scala to JavaScript compiler, demonstrates speedups from 10x to 100x compared to its batch version. As a result, the optimizer's running time becomes insignificant compared to separate compilation, making it fit for use on every compilation run during the development cycle. We also show how to parallelize the incremental algorithm to take advantage of multicore hardware.", "citation": "Citations (1)", "departments": ["\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne", "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne"], "authors": ["S\u00e9bastien Doeraene.....http://dblp.org/pers/hd/d/Doeraene:S=eacute=bastien", "Tobias Schlatter.....http://dblp.org/pers/hd/s/Schlatter:Tobias"], "conf": "oopsla", "year": "2016", "pages": 15}