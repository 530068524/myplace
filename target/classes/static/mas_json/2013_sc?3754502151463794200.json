{"title": "Globalizing selectively: shared-memory efficiency with address-space separation.", "fields": ["runtime system", "compiler", "shared memory", "copying", "address space"], "abstract": "It has become common for MPI-based applications to run on shared-memory machines. However, MPI semantics do not allow leveraging shared memory fully for communication between processes from within the MPI library. This paper presents an approach that combines compiler transformations with a specialized runtime system to achieve zero-copy communication whenever possible by proving certain properties statically and globalizing data selectively by altering the allocation and deallocation of communication buffers. The runtime system provides dynamic optimization, when such proofs are not possible statically, by copying data only when there are write-write or read-write conflicts. We implemented a prototype compiler, using ROSE, and evaluated it on several benchmarks. Our system produces code that performs better than MPI in most cases and no worse than MPI, tuned for shared memory, in all cases.", "citation": "Not cited", "departments": ["Indiana University Bloomington", "Indiana University Bloomington", "Indiana University Bloomington"], "authors": ["Nilesh Mahajan.....http://dblp.org/pers/hd/m/Mahajan:Nilesh", "Uday Pitambare.....http://dblp.org/pers/hd/p/Pitambare:Uday", "Arun Chauhan.....http://dblp.org/pers/hd/c/Chauhan_0001:Arun"], "conf": "sc", "year": "2013", "pages": 12}