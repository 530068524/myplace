{"title": "Compiling without continuations.", "fields": ["theoretical computer science", "recursive join", "haskell", "intermediate language", "compiler"], "abstract": "Many fields of study in compilers give rise to the concept of a join point\u2014a place where different execution paths come together. Join points are often treated as functions or continuations, but we believe it is time to study them in their own right. We show that adding join points to a direct-style functional intermediate language is a simple but powerful change that allows new optimizations to be performed, including a significant improvement to list fusion. Finally, we report on recent work on adding join points to the intermediate language of the Glasgow Haskell Compiler.", "citation": "Citations (2)", "departments": ["University of Oregon", "University of Oregon", "University of Oregon", "Microsoft"], "authors": ["Luke Maurer.....http://dblp.org/pers/hd/m/Maurer:Luke", "Paul Downen.....http://dblp.org/pers/hd/d/Downen:Paul", "Zena M. Ariola.....http://dblp.org/pers/hd/a/Ariola:Zena_M=", "Simon L. Peyton Jones.....http://dblp.org/pers/hd/j/Jones:Simon_L=_Peyton"], "conf": "pldi", "year": "2017", "pages": 13}