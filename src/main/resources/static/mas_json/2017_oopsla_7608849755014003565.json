{"title": "Replacing phrase structure grammar with dependency grammar in the design and implementation of programming languages.", "fields": ["affix grammar", "unrestricted grammar", "emergent grammar", "mildly context sensitive grammar formalism", "link grammar"], "abstract": "For decades, the design and implementation of programming languages has been based on phrase structure grammars, which divide a program recursively into phrases (represented by nonterminals), leaving the words of the program (the terminals) as the atoms of this division. By contrast, dependency grammar suggests that dependency between words, not constituency between phrases, is the primary grammatical relationship, and that a grammar capturing this relationship is basically a lexicon.   In this paper, I suggest the use of dependency grammar for the design and implementation of programming languages. This allows me to unify the dictionaries populated by programs (with variables, procedures, functions, etc.) written in a programming language with the grammar of this language. I call the compilation of a programming language and its programs into a lexicon a  langram  and, using the example of the  while  language, show how langrams serve the \u00e2  growing of languages\u00e2  .", "citation": "Not cited", "year": "2017", "departments": ["Rolf C. Hagen Group"], "conf": "oopsla", "authors": ["Friedrich Steimann.....http://dblp.org/pers/hd/s/Steimann:Friedrich"], "pages": 14}