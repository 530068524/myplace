{"title": "Managing large dynamic graphs efficiently.", "fields": ["wait for graph", "replication", "power graph analysis", "social graph", "graph database"], "abstract": "There is an increasing need to ingest, manage, and query large volumes of graph-structured data arising in applications like social networks, communication networks, biological networks, and so on. Graph databases that can explicitly reason about the graphical nature of the data, that can support flexible schemas and node-centric or edge-centric analysis and querying, are ideal for storing such data. However, although there is much work on single-site graph databases and on efficiently executing different types of queries over large graphs, to date there is little work on understanding the challenges in distributed graph databases, needed to handle the large scale of such data. In this paper, we propose the design of an in-memory, distributed graph data management system aimed at managing a large-scale dynamically changing graph, and supporting low-latency query processing over it. The key challenge in a distributed graph database is that, partitioning a graph across a set of machines inherently results in a large number of distributed traversals across partitions to answer even simple queries. We propose aggressive replication of the nodes in the graph for supporting low-latency querying, and investigate three novel techniques to minimize the communication bandwidth and the storage requirements. First, we develop a hybrid replication policy that monitors node read-write frequencies to dynamically decide what data to replicate, and whether to do  eager  or  lazy  replication. Second, we propose a clustering-based approach to amortize the costs of making these replication decisions. Finally, we propose using a  fairness  criterion to dictate how replication decisions should be made. We provide both theoretical analysis and efficient algorithms for the optimization problems that arise. We have implemented our framework as a middleware on top of the open-source CouchDB key-value store. We evaluate our system on a social graph, and show that our system is able to handle very large graphs efficiently, and that it reduces the network bandwidth consumption significantly.", "citation": "Citations (95)", "year": "2012", "departments": ["University of Maryland, College Park", "University of Maryland, College Park"], "conf": "sigmod", "authors": ["Jayanta Mondal.....http://dblp.org/pers/hd/m/Mondal:Jayanta", "Amol Deshpande.....http://dblp.org/pers/hd/d/Deshpande:Amol"], "pages": 12}