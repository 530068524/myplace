{"title": "Simple, fast, and safe manual memory management.", "fields": ["memory safety", "pointer", "manual memory management", "memory leak", "garbage"], "abstract": "Safe programming languages are readily available, but many applications continue to be written in unsafe languages because of efficiency. As a consequence, many applications continue to have exploitable memory safety bugs. Since garbage collection is a major source of inefficiency in the implementation of safe languages, replacing it with safe manual memory management would be an important step towards solving this problem.     Previous approaches to safe manual memory management use programming models based on regions, unique pointers, borrowing of references, and ownership types. We propose a much simpler programming model that does not require any of these concepts. Starting from the design of an imperative type safe language (like Java or C#), we just add a delete operator to free memory explicitly and an exception which is thrown if the program dereferences a pointer to freed memory. We propose an efficient implementation of this programming model that guarantees type safety. Experimental results from our implementation based on the C# native compiler show that this design achieves up to 3x reduction in peak working set and run time.", "citation": "Citations (1)", "departments": ["Microsoft", "Microsoft", "Microsoft", "Microsoft", "Microsoft"], "authors": ["Piyus Kedia.....http://dblp.org/pers/hd/k/Kedia:Piyus", "Manuel Costa.....http://dblp.org/pers/hd/c/Costa:Manuel", "Matthew J. Parkinson.....http://dblp.org/pers/hd/p/Parkinson:Matthew_J=", "Kapil Vaswani.....http://dblp.org/pers/hd/v/Vaswani:Kapil", "Dimitrios Vytiniotis.....http://dblp.org/pers/hd/v/Vytiniotis:Dimitrios", "Aaron Blankstein.....http://dblp.org/pers/hd/b/Blankstein:Aaron"], "conf": "pldi", "year": "2017", "pages": 15}