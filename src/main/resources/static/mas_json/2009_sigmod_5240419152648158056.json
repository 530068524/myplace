{"title": "Dependency-aware reordering for parallelizing query optimization in multi-core CPUs.", "fields": ["query optimization", "pipeline", "exploit", "joins", "speedup"], "abstract": "The state of the art commercial query optimizers employ cost-based optimization and exploit dynamic programming ( DP ) to find the optimal query execution plan ( QEP ) without evaluating redundant sub-plans. The number of alternative  QEP s enumerated by the  DP  query optimizer can increase exponentially, as the number of joins in the query increases. Recently, by exploiting the coming wave of multi-core processor architectures, a state of the art parallel optimization algorithm [14], referred to as  PDP  sva , has been proposed to parallelize the \"time-consuming\"  DP  query optimization process itself. While  PDP  sva  significantly extends the practical use of  DP  to queries having up to 20-25 tables, it has several limitations: 1) supporting only the size-driven  DP  enumerator, 2) statically allocating search space, and 3) not fully exploiting parallelism. In this paper, we propose the first  generic  solution for parallelizing any type of bottom-up optimizer, including the graph-traversal driven type, and for supporting  dynamic  search allocation and  full  parallelism. This is a challenging problem, since recently developed, state of art  DP  optimizers such as  DP  cpp  [21] and  DP  hyp  [22] are very difficult to parallelize due to tangled dependencies in the join pairs they generate. Unless the solution is very carefully devised, a lot of synchronization conflicts are bound to occur. By viewing a serial bottom-up optimizer as one which generates a totally ordered sequence of join pairs in a streaming fashion, we propose a novel concept of  dependency-aware reordering , which minimizes waiting time caused by dependencies of join pairs. To maximize parallelism, we also introduce a series of novel performance optimization techniques: 1) pipelining of join pair generation and plan generation; 2) the synchronization-free global MEMO; and 3) threading across dependencies. Through extensive experiments with various query topologies, we show that our solution supports any type of bottom up optimization, achieving linear speedup for each type. Despite the fact that our solution is generic, due to sophisticated optimization techniques, our generic parallel optimizer outperforms  PDP  sva  tailored to size-driven enumeration. Experimental results also show that our solution is much more robust than  PDP  sva  with respect to search space allocation.", "citation": "Citations (18)", "year": "2009", "departments": ["Kyungpook National University", "Kyungpook National University"], "conf": "sigmod", "authors": ["Wook-Shin Han.....http://dblp.org/pers/hd/h/Han:Wook=Shin", "Jinsoo Lee.....http://dblp.org/pers/hd/l/Lee:Jinsoo"], "pages": 14}