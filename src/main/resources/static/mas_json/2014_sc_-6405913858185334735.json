{"title": "Practical Symbolic Race Checking of GPU Programs.", "fields": ["thread", "programmer", "symbolic execution", "cuda", "taint checking"], "abstract": "Even the careful GPU programmer can inadvertently introduce data races while writing and optimizing code. Currently available GPU race checking methods fall short either in terms of their formal guarantees, ease of use, or practicality. Existing symbolic methods: (1) do not fully support existing CUDA kernels, (2) may require user-specified assertions or invariants, (3) often require users to guess which inputs may be safely made concrete, (4) tend to explode in complexity when the number of threads is increased, and (5) explode in the face of thread-ID based decisions, especially in a loop. We present SESA, a new tool combining Symbolic Execution and Static Analysis to analyze C++ CUDA programs that overcomes all these limitations. SESA also scales well to handle non-trivial benchmarks such as Parboil and Lonestar, and is the only tool of its class that handles such practical examples. This paper presents SESA's methodological innovations and practical results.", "citation": "Citations (17)", "year": "2014", "departments": ["University of Utah", "Fujitsu", "University of Utah"], "conf": "sc", "authors": ["Peng Li.....http://dblp.org/pers/hd/l/Li:Peng", "Guodong Li.....http://dblp.org/pers/hd/l/Li:Guodong", "Ganesh Gopalakrishnan.....http://dblp.org/pers/hd/g/Gopalakrishnan:Ganesh"], "pages": 12}