{"title": "Distributed exact shortest paths in sublinear time.", "fields": ["graph", "on the fly", "vertex", "sublinear function", "distributed algorithm"], "abstract": "The distributed single-source shortest paths problem is one of the most fundamental and central problems in the message-passing distributed computing. Classical Bellman-Ford algorithm solves it in  O ( n ) time, where  n  is the number of vertices in the input graph  G . Peleg and Rubinovich, FOCS\u00e2  99, showed a lower bound of I\u00a9( D  + \u00e2   n ) for this problem, where  D  is the hop-diameter of  G .   Whether or not this problem can be solved in  o ( n ) time when  D  is relatively small is a major notorious open question. Despite intensive research that yielded near-optimal algorithms for the  approximate  variant of this problem, no progress was reported for the original problem.   In this paper we answer this question in the affirmative. We devise an algorithm that requires  O (( n  log n ) 5/6 ) time, for  D  =  O (\u00e2   n  log n ), and  O ( D  1/3  \ufffd\u00b7 ( n  log n ) 2/3 ) time, for larger  D . This running time is sublinear in  n  in almost the entire range of parameters, specifically, for  D  =  o ( n /log 2   n ).   We also generalize our result in two directions. One is when edges have bandwidth  b  \u00e2 \ufffd 1, and the other is the  s -sources shortest paths problem. For the former problem, our algorithm provides an improved bound, compared to the unit-bandwidth case. In particular, we provide an all-pairs shortest paths algorithm that requires  O ( n  5/3  \ufffd\u00b7 log 2/3   n ) time, even for  b  = 1, for all values of  D .   For the latter problem (of  s  sources), our algorithm also provides bounds that improve upon the previous state-of-the-art in the entire range of parameters.   From the technical viewpoint, our algorithm computes a hopset  G \u00e2 \ufffd of a skeleton graph  G \u00e2 \ufffd of  G   without first computing   G \u00e2 \ufffd itself.   We then conduct a Bellman-Ford exploration in  G \u00e2 \ufffd \u00e2 \ufffd  G \u00e2 \ufffd, while computing the required edges of  G \u00e2 \ufffd  on the fly . As a result, our algorithm computes  exactly  those edges of  G \u00e2 \ufffd that it really needs, rather than computing approximately the entire  G \u00e2 \ufffd.", "citation": "Citations (6)", "year": "2017", "departments": ["Ben-Gurion University of the Negev"], "conf": "stoc", "authors": ["Michael Elkin.....http://dblp.org/pers/hd/e/Elkin:Michael"], "pages": 14}