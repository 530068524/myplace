{"title": "Executing code in the past: efficient in-memory object graph versioning.", "fields": ["point location", "object graph", "smalltalk", "software versioning", "tracing"], "abstract": "Object versioning refers to how an application can have access to previous states of its objects. Implementing this mechanism is hard because it needs to be efficient in space and time, and well integrated with the programming language. This paper presents HistOOry, an object versioning system that uses an efficient data structure to store and retrieve past states. It needs only three primitives, and existing code does not need to be modified to be versioned. It provides fine-grained control over what parts of objects are versioned and when. It stores all states, past and present, in memory. Code can be executed in the past of the system and will see the complete system at that point in time. We have implemented our model in Smalltalk and used it for three applications that need versioning: checked postconditions, stateful execution tracing and a planar point location implementation. Benchmarks are provided to asses the practical complexity of our implementation.", "citation": "Citations (16)", "year": "2009", "departments": ["Universit\u00e9 libre de Bruxelles", "Universit\u00e9 libre de Bruxelles", "Katholieke Universiteit Leuven"], "conf": "oopsla", "authors": ["Fr\u00e9d\u00e9ric Pluquet.....http://dblp.org/pers/hd/p/Pluquet:Fr=eacute=d=eacute=ric", "Stefan Langerman.....http://dblp.org/pers/hd/l/Langerman:Stefan", "Roel Wuyts.....http://dblp.org/pers/hd/w/Wuyts:Roel"], "pages": 18}