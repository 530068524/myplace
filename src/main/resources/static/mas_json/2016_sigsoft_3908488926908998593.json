{"title": "Extracting instruction semantics via symbolic execution of code generators.", "fields": ["code generation", "debugging", "symbolic execution", "operational semantics", "compiler"], "abstract": "Binary analysis and instrumentation form the basis of many tools and frameworks for software debugging, security hardening, and monitoring. Accurate modeling of instruction semantics is paramount in this regard, as errors can lead to program crashes, or worse, bypassing of security checks. Semantic modeling is a daunting task for modern processors such as x86 and ARM that support over a thousand instructions, many of them with complex semantics. This paper describes a new approach to automate this semantic modeling task. Our approach leverages instruction semantics knowledge that is already encoded into today\u00e2  s production compilers such as GCC and LLVM. Such an approach can greatly reduce manual effort, and more importantly, avoid errors introduced by manual modeling. Furthermore, it is applicable to any of the numerous architectures already supported by the compiler. In this paper, we develop a new symbolic execution technique to extract instruction semantics from a compiler\u00e2  s source code. Unlike previous applications of symbolic execution that were focused on identifying a single program path that violates a property, our approach addresses the all paths problem, extracting the entire input/output behavior of the code generator. We have applied it successfully to the 120K lines of C-code used in GCC\u00e2  s code generator to extract x86 instruction semantics. To demonstrate architecture-neutrality, we have also applied it to AVR, a processor used in the popular Arduino platform.", "citation": "Citations (4)", "departments": ["Intel", "Stony Brook University"], "authors": ["Niranjan Hasabnis.....http://dblp.org/pers/hd/h/Hasabnis:Niranjan", "R. Sekar.....http://dblp.org/pers/hd/s/Sekar:R="], "conf": "sigsoft", "year": "2016", "pages": 13}