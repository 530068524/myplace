{"title": "RunDroid: recovering execution call graphs for Android applications.", "fields": ["software analysis pattern", "rendering", "program dependence graph", "application layer", "thread"], "abstract": "Fault localization is a well-received technique for helping developers to identify faulty statements of a program. Research has shown that the coverages of faulty statements and its predecessors in program dependence graph are important for effective fault localization. However, app executions in Android split into segments in different components, i.e., methods, threads, and processes, posing challenges for traditional program dependence computation, and in turn rendering fault localization less effective. We present RunDroid, a tool for recovering the dynamic call graphs of app executions in Android, assisting existing tools for more precise program dependence computation. For each exectuion, RunDroid captures and recovers method calls from not only the application layer, but also between applications and the Android framework. Moreover, to deal with the widely adopted multi-threaded communications in Android applications, RunDroid also captures methods calls that are split among threads. Demo : https://github.com/MiJack/RunDroid Video : https://youtu.be/EM7TJbE-Oaw", "citation": "Not cited", "departments": ["East China Normal University", "East China Normal University", "Case Western Reserve University", "Case Western Reserve University", "East China Normal University"], "authors": ["Yujie Yuan.....http://dblp.org/pers/hd/y/Yuan:Yujie", "Lihua Xu.....http://dblp.org/pers/hd/x/Xu:Lihua", "Xusheng Xiao.....http://dblp.org/pers/hd/x/Xiao:Xusheng", "Andy Podgurski.....http://dblp.org/pers/hd/p/Podgurski:Andy", "Huibiao Zhu.....http://dblp.org/pers/hd/z/Zhu:Huibiao"], "conf": "sigsoft", "year": "2017", "pages": 5}