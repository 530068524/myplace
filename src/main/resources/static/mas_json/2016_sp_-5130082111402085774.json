{"title": "A Tough Call: Mitigating Advanced Code-Reuse Attacks at the Binary Level.", "fields": ["code reuse", "exploit", "liveness", "spec", "counterfeit"], "abstract": "Current binary-level Control-Flow Integrity (CFI) techniques are weak in determining the set of valid targets for indirect control flow transfers on the forward edge. In particular, the lack of source code forces existing techniques to resort to a conservative address-taken policy that overapproximates this set. In contrast, source-level solutions can accurately infer the targets of indirect calls and thus detect malicious control-flow transfers more precisely. Given that source code is not always available, however, offering similar quality of protection at the binary level is important, but, unquestionably, more challenging than ever: recent work demonstrates powerful attacks such as Counterfeit Object-oriented Programming (COOP), which made the community believe that protecting software against control-flow diversion attacks at the binary level is rather impossible. In this paper, we propose binary-level analysis techniques to significantly reduce the number of possible targets for indirect branches. More specifically, we reconstruct a conservative approximation of target function prototypes by means of use-def analysis at possible callees. We then couple this with liveness analysis at each indirect callsite to derive a many-to-many relationship between callsites and target callees with a much higher precision compared to prior binary-level solutions. Experimental results on popular server programs and on SPEC CPU2006 show that TypeArmor, a prototype implementation of our approach, is efficient - with a runtime overhead of less than 3%. Furthermore, we evaluate to what extent TypeArmor can mitigate COOP and other advanced attacks and show that our approach can significantly reduce the number of targets on the forward edge. Moreover, we show that TypeArmor breaks published COOP exploits, providing concrete evidence that strict binary-level CFI can still mitigate advanced attacks, despite the absence of source information or C++ semantics.", "citation": "Citations (57)", "departments": ["University of Amsterdam", "University of Amsterdam", "Ruhr University Bochum", "Ruhr University Bochum", "University of Amsterdam"], "authors": ["Victor van der Veen.....http://dblp.org/pers/hd/v/Veen:Victor_van_der", "Enes G\u00f6ktas.....http://dblp.org/pers/hd/g/G=ouml=ktas:Enes", "Moritz Contag.....http://dblp.org/pers/hd/c/Contag:Moritz", "Andre Pawlowski.....http://dblp.org/pers/hd/p/Pawlowski:Andre", "Xi Chen.....http://dblp.org/pers/hd/c/Chen:Xi", "Sanjay Rawat.....http://dblp.org/pers/hd/r/Rawat_0001:Sanjay", "Herbert Bos.....http://dblp.org/pers/hd/b/Bos:Herbert", "Thorsten Holz.....http://dblp.org/pers/hd/h/Holz:Thorsten", "Elias Athanasopoulos.....http://dblp.org/pers/hd/a/Athanasopoulos:Elias", "Cristiano Giuffrida.....http://dblp.org/pers/hd/g/Giuffrida:Cristiano"], "conf": "sp", "year": "2016", "pages": 20}