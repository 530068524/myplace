{"title": "Hybrid Garbage Collection for Multi-Version Concurrency Control in SAP HANA.", "fields": ["snapshot", "online analytical processing", "online transaction processing", "manual memory management", "multiversion concurrency control"], "abstract": "While multi-version concurrency control (MVCC) supports fast and robust performance in in-memory, relational databases, it has the potential problem of a growing number of versions over time due to obsolete versions. Although a few TB of main memory is available for enterprise machines, the memory resource should be used carefully for economic and practical reasons. Thus, in order to maintain the necessary number of versions in MVCC, versions which will no longer be used need to be deleted. This process is called garbage collection. MVCC uses the concept of visibility to define garbage. A set of versions for each record is first identified as candidate if their version timestamps are lower than the minimum value of snapshot timestamps of active snapshots in the system. All such candidates, except the one which has the maximum version timestamp, are safely reclaimed as garbage versions. In mixed OLTP and OLAP workloads, the typical garbage collector may not effectively reclaim record versions. In these workloads, OLTP applications generate a high volume of new versions, while long-lived queries or transactions in OLAP applications often block garbage collection, since we need to compare the version timestamp of each record version with the snapshot timestamp of the oldest, long-lived snapshot. Thus, these workloads typically cause the in-memory version space to grow. Additionally, the increasing version chains of records over time may also increase the traversal cost for them. In this paper, we present an efficient and effective garbage collector called HybridGC in SAP HANA. HybridGC integrates three novel concepts of garbage collection: timestamp-based group garbage collection, table garbage collection, and interval garbage collection. Through experiments using mixed OLTP and OLAP workloads, we show that HybridGC effectively and efficiently collects garbage versions with negligible overhead.", "citation": "Citations (5)", "year": "2016", "departments": ["Pohang University of Science and Technology", "Pohang University of Science and Technology", "SAP Labs Korea, ... ul, South Korea", "SAP Labs Korea, ... ul, South Korea", "SAP Labs Korea, ... ul, South Korea"], "conf": "sigmod", "authors": ["Juchang Lee.....http://dblp.org/pers/hd/l/Lee:Juchang", "Hyungyu Shin.....http://dblp.org/pers/hd/s/Shin:Hyungyu", "Chang Gyoo Park.....http://dblp.org/pers/hd/p/Park:Chang_Gyoo", "Seongyun Ko.....http://dblp.org/pers/hd/k/Ko:Seongyun", "Jaeyun Noh.....http://dblp.org/pers/hd/n/Noh:Jaeyun", "Yongjae Chuh.....http://dblp.org/pers/hd/c/Chuh:Yongjae", "Wolfgang Stephan.....http://dblp.org/pers/hd/s/Stephan:Wolfgang", "Wook-Shin Han.....http://dblp.org/pers/hd/h/Han:Wook=Shin"], "pages": 12}