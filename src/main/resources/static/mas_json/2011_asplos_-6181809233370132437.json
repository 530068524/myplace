{"title": "Improving the performance of trace-based systems by false loop filtering.", "fields": ["binary translation", "code generation", "just in time compilation", "dacapo", "stack"], "abstract": "Trace-based compilation is a promising technique for language compilers and binary translators. It offers the potential to expand the compilation scopes that have traditionally been limited by method boundaries.   Detecting repeating cyclic execution paths and capturing the detected repetitions into traces is a key requirement for trace selection algorithms to achieve good optimization and performance with small amounts of code. One important class of repetition detection is cyclic-path-based repetition detection, where a cyclic execution path (a path that starts and ends at the same instruction address) is detected as a repeating cyclic execution path.   However, we found many cyclic paths that are not repeating cyclic execution paths, which we call false loops. A common class of false loops occurs when a method is invoked from multiple call-sites. A cycle is formed between two invocations of the method from different call-sites, but which does not represent loops or recursion. False loops can result in shorter traces and smaller compilation scopes, and degrade the performance.   We propose false loop filtering, an approach to reject false loops in the repetition detection step of trace selection, and a technique called false loop filtering by call-stack-comparison, which rejects a cyclic path as a false loop if the call stacks at the beginning and the end of the cycle are different.   We applied false loop filtering to our trace-based Java\u2122 JIT compiler that is based on IBM's J9 JVM. We found that false loop filtering achieved an average improvement of 16% and 10% for the DaCapo benchmark when applied to two baseline trace selection algorithms, respectively, with up to 37% improvement for individual benchmarks. In the end, with false loop filtering, our trace-based JIT achieves a performance comparable to that of the method-based J9 JVM/JIT using the corresponding optimization level.", "citation": "Citations (19)", "year": "2011", "departments": ["IBM", "IBM", "IBM", "IBM", "IBM"], "conf": "asplos", "authors": ["Hiroshige Hayashizaki.....http://dblp.org/pers/hd/h/Hayashizaki:Hiroshige", "Peng Wu.....http://dblp.org/pers/hd/w/Wu_0001:Peng", "Hiroshi Inoue.....http://dblp.org/pers/hd/i/Inoue:Hiroshi", "Mauricio J. Serrano.....http://dblp.org/pers/hd/s/Serrano:Mauricio_J=", "Toshio Nakatani.....http://dblp.org/pers/hd/n/Nakatani:Toshio"], "pages": 14}