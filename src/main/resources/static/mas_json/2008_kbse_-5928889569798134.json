{"title": "Type-Checking Software Product Lines - A Formal Approach.", "fields": ["type theory", "type safety", "java", "software product line", "process calculus"], "abstract": "A software product line (SPL) is an efficient means to generate a family of program variants for a domain from a single code base. However, because of the potentially high number of possible program variants, it is difficult to test all variants and ensure properties like type-safety for the entire SPL. While first steps to type-check an entire SPL have been taken, they are informal and incomplete. In this paper, we extend the Featherweight Java (FJ) calculus with feature annotations to be used for SPLs. By extending FJ's type system, we guarantee that - given a well-typed SPL - all possible program variants are well- typed as well. We show how results from this formalization reflect and help implementing our own language-independent SPL tool CIDE.", "citation": "Citations (128)", "departments": ["University of Passau", "Sch. of Comput. ... burg, Magdeburg"], "authors": ["Christian K\u00e4stner.....http://dblp.org/pers/hd/k/K=auml=stner:Christian", "Sven Apel.....http://dblp.org/pers/hd/a/Apel:Sven"], "conf": "kbse", "year": "2008", "pages": 10}