{"title": "EAGr: supporting continuous ego-centric aggregate queries over large dynamic graphs.", "fields": ["software deployment", "overlay", "graph database", "data stream mining", "low latency"], "abstract": "In this paper, we present EAGr, a system for supporting large numbers of continuous neighborhood-based (\"ego-centric\") aggregate queries over large, highly dynamic, rapidly evolving graphs. Examples of such queries include computation of personalized, tailored trends in social networks, anomaly or event detection in communication or financial transaction networks, local search and alerts in spatio-temporal networks, to name a few. Key challenges in supporting such continuous queries include very high update rates typically seen in these situations, large numbers of queries that need to be executed simultaneously, stringent low latency requirements. In this paper, we propose a flexible, general, extensible in-memory framework for executing different types of ego-centric aggregate queries over large dynamic graphs with low latencies. Our framework is built around the notion of an aggregation overlay graph, a pre-compiled data structure that encodes the computations to be performed when an update or a query is received. The overlay graph enables sharing of partial aggregates across different ego centric queries (corresponding to different nodes in the graph), also allows partial pre-computation of the aggregates to minimize the query latencies. We present several highly scalable techniques for constructing an overlay graph given an aggregation function, also design incremental algorithms for handling changes to the structure of the underlying graph itself, that may result in significant changes to the neighborhoods on which queries are posed. We also present an optimal, polynomial-time algorithm for making the pre-computation decisions given an overlay graph. Although our approach is naturally parallelizable, we focus on a single-machine deployment in this paper and show that our techniques can easily handle graphs of size up to 320 million nodes and edges, achieve update and query throughputs of over 500,000/s using a single, powerful machine.", "citation": "Citations (18)", "year": "2014", "departments": ["University of Maryland, College Park", "University of Maryland, College Park"], "conf": "sigmod", "authors": ["Jayanta Mondal.....http://dblp.org/pers/hd/m/Mondal:Jayanta", "Amol Deshpande.....http://dblp.org/pers/hd/d/Deshpande:Amol"], "pages": 12}