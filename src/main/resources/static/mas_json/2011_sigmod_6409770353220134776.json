{"title": "RAFT at work: speeding-up mapreduce applications under task and node failures.", "fields": ["implementation", "raft", "exploit", "fault tolerance", "computation"], "abstract": "The MapReduce framework is typically deployed on very large computing clusters where task and node failures are no longer an exception but the rule. Thus, fault-tolerance is an important aspect for the efficient operation of MapReduce jobs. However, currently MapReduce implementations fully recompute failed tasks (subparts of a job) from the beginning. This can significantly decrease the runtime performance of MapReduce applications. We present an alternative system that implements RAFT ideas. RAFT is a family of powerful and inexpensive Recovery Algorithms for Fast-Tracking MapReduce jobs under task and node failures. To recover from task failures, RAFT exploits the intermediate results persisted by MapReduce at several points in time. RAFT piggybacks checkpoints on the task progress computation. To recover from node failures, RAFT maintains a per-map task list of all input key-value pairs producing intermediate results and pushes intermediate results to reducers. In this demo, we demonstrate that RAFT recovers efficiently from both task and node failures. Further, the audience can compare RAFT with Hadoop via an easy-to-use web interface.", "citation": "Citations (11)", "year": "2011", "departments": ["Saarland University", "Saarland University", "Saarland University", "Saarland University"], "conf": "sigmod", "authors": ["Jorge-Arnulfo Quian\u00e9-Ruiz.....http://dblp.org/pers/hd/q/Quian=eacute==Ruiz:Jorge=Arnulfo", "Christoph Pinkel.....http://dblp.org/pers/hd/p/Pinkel:Christoph", "J\u00f6rg Schad.....http://dblp.org/pers/hd/s/Schad:J=ouml=rg", "Jens Dittrich.....http://dblp.org/pers/hd/d/Dittrich:Jens"], "pages": 4}