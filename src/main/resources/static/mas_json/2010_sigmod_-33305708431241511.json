{"title": "Page-differential logging: an efficient and DBMS-independent approach for storing data into flash memory.", "fields": ["flash file system", "demand paging", "flash memory emulator", "zero page", "memory map"], "abstract": "Flash memory is widely used as the secondary storage in lightweight computing devices due to its outstanding advantages over magnetic disks. Flash memory has many access characteristics different from those of magnetic disks, and how to take advantage of them is becoming an important research issue. There are two existing approaches to storing data into flash memory: page-based and log-based. The former has good performance for read operations, but poor performance for write operations. In contrast, the latter has good performance for write operations when updates are light, but poor performance for read operations. In this paper, we propose a new method of storing data, called  page-differential logging , for flash-based storage systems that solves the drawbacks of the two methods. The primary characteristics of our method are: (1) writing only the difference (which we define as the  page-differential ) between the original page in flash memory and the up-to-date page in memory; (2) computing and writing the page-differential only once at the time the page needs to be reflected into flash memory. The former contrasts with existing page-based methods that write the whole page including both changed and unchanged parts of data or from log-based ones that keep track of the history of all the changes in a page. Our method allows existing disk-based DBMSs to be reused as flash-based DBMSs just by modifying the flash memory driver, i.e., it is DBMS-independent. Experimental results show that the proposed method is superior in I/O performance, except for some special cases, to existing ones. Specifically, it improves the performance of various mixes of read-only and update operations by 0.5 (the special case when all transactions are read-only on updated pages) ~3.4 times over the page-based method and by 1.6 ~ 3.1 times over the log-based one for synthetic data of approximately 1 Gbytes. The TPC-C benchmark also shows improvement of the I/O time over existing methods by 1.2 ~ 6.1 times. This result indicates the effectiveness of our method under (semi) real workloads. We note that the performance advantage of our method can be further enhanced up to two folds by obviating the need to write to the spare area of the page a second time.", "citation": "Citations (28)", "year": "2010", "departments": ["KAIST", "KAIST", "Drexel University"], "conf": "sigmod", "authors": ["Yi-Reun Kim.....http://dblp.org/pers/hd/k/Kim:Yi=Reun", "Kyu-Young Whang.....http://dblp.org/pers/hd/w/Whang:Kyu=Young", "Il-Yeol Song.....http://dblp.org/pers/hd/s/Song:Il=Yeol"], "pages": 12}