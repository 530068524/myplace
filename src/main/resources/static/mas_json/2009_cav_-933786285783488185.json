{"title": "CalFuzzer: An Extensible Active Testing Framework for Concurrent Programs.", "fields": ["callback", "deadlock", "atomicity", "concurrency", "extensibility"], "abstract": "Active testing has recently been introduced to effectively test concurrent programs. Active testing works in two phases. It first uses predictive off-the-shelf static or dynamic program analyses to identify potential concurrency bugs, such as data races, deadlocks, and atomicity violations. In the second phase, active testing uses the reports from these predictive analyses to explicitly control the underlying scheduler of the concurrent program to accurately and quickly discover real concurrency bugs, if any, with very high probability and little overhead. In this paper, we present an extensible framework for active testing of Java programs. The framework currently implements three active testers based on data races, atomic blocks, and deadlocks.", "citation": "Citations (112)", "year": "2009", "departments": ["University of California, Berkeley", "Intel", "University of California, Berkeley", "University of California, Berkeley"], "conf": "cav", "authors": ["Pallavi Joshi.....http://dblp.org/pers/hd/j/Joshi:Pallavi", "Mayur Naik.....http://dblp.org/pers/hd/n/Naik:Mayur", "Chang-Seo Park.....http://dblp.org/pers/hd/p/Park:Chang=Seo", "Koushik Sen.....http://dblp.org/pers/hd/s/Sen:Koushik"], "pages": 7}