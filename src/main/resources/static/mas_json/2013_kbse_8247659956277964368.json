{"title": "JFlow: Practical refactorings for flow-based parallelism.", "fields": ["dataflow", "speedup", "code refactoring", "data parallelism", "implicit parallelism"], "abstract": "Emerging applications in the domains of recognition, mining and synthesis (RMS); image and video processing; data warehousing; and automatic financial trading admit a particular style of parallelism termed  flow-based parallelism . To help developers exploit flow-based parallelism, popular parallel libraries such as Groovy's GPars, Intel's TBB Flow Graph and Microsoft's TPL Dataflow have begun introducing many new and useful constructs. However, to reap the benefits of such constructs, developers must first use them. This involves refactoring their existing sequential code to incorporate these constructs - a manual process that overwhelms even experts. To alleviate this burden, we introduce a set of novel  analyses  and  transformations  targeting flow-based parallelism. We implemented these ideas in JFlow, an interactive refactoring tool integrated into the Eclipse IDE. We used JFlow to parallelize seven applications: four from a previously known benchmark and three from a suite of large open source projects. JFlow, with minimal interaction from the developer, can successfully parallelize applications from the aforementioned domains with good performance (offering up to 3.45x speedup on a 4-core machine) and is fast enough to be used interactively as part of a developer's workflow.", "citation": "Citations (3)", "year": "2013", "departments": ["University of Illinois at Urbana\u2013Champaign", "University of Illinois at Urbana\u2013Champaign"], "conf": "kbse", "authors": ["Nicholas Chen.....http://dblp.org/pers/hd/c/Chen:Nicholas", "Ralph E. Johnson.....http://dblp.org/pers/hd/j/Johnson:Ralph_E="], "pages": 11}