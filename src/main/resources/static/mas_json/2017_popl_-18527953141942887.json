{"title": "Typed self-evaluation via intensional type functions.", "fields": ["interpreter", "mathematical proof", "metaprogramming", "typed lambda calculus", "recursion"], "abstract": "Many popular languages have a self-interpreter, that is, an interpreter for the language written in itself. So far, work on polymorphically-typed self-interpreters has concentrated on self-recognizers that merely recover a program from its representation. A larger and until now unsolved challenge is to implement a polymorphically-typed self-evaluator that evaluates the represented program and produces a representation of the result. We present F \ufffd   \ufffd\u00b5 i  , the first I\ufffd-calculus that supports a polymorphically-typed self-evaluator. Our calculus extends F \ufffd   with recursive types and intensional type functions and has decidable type checking. Our key innovation is a novel implementation of type equality proofs that enables us to define a versatile representation of programs. Our results establish a new category of languages that can support polymorphically-typed self-evaluators.", "citation": "Citations (5)", "departments": ["University of California, Los Angeles", "University of California, Los Angeles"], "authors": ["Matt Brown.....http://dblp.org/pers/hd/b/Brown:Matt", "Jens Palsberg.....http://dblp.org/pers/hd/p/Palsberg:Jens"], "conf": "popl", "year": "2017", "pages": 14}