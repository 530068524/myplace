{"title": "Micro execution.", "fields": ["lock convoy", "power budget", "instruction set", "system software", "exploit", "automatic control", "virtualization", "superscalar", "simd", "instructions per second", "very long instruction word", "software pipelining", "hyper threading", "software performance testing", "intel high definition audio", "streaming simd extensions", "predictability", "microprocessor", "program counter", "multithreading", "clock rate", "register file", "rollback", "execution model", "serialization", "worst case execution time", "application software", "explicitly parallel instruction computing", "ranging", "xeon", "microarchitecture", "speculative multithreading", "coprocessor", "multi core processor"], "abstract": "Serialization of threads due to critical sections is a fundamental bottleneck to achieving high performance in multithreaded programs. Dynamically, such serialization may be unnecessary because these critical sections could have safely executed concurrently without locks. Current processors cannot fully exploit such parallelism because they do not have mechanisms to dynamically detect such false inter-thread dependences. We propose Speculative Lock Elision (SLE), a novel micro-architectural technique to remove dynamically unnecessary lock-induced serialization and enable highly concurrent multithreaded execution. The key insight is that locks do not always have to be acquired for a correct execution. Synchronization instructions are predicted as being unnecessary and elided. This allows multiple threads to concurrently execute critical sections protected by the same lock. Misspeculation due to inter-thread data conflicts is detected using existing cache mechanisms and rollback is used for recovery. Successful speculative elision is validated and committed without acquiring the lock. SLE can be implemented entirely in microarchitecture without instruction set support and without system-level modifications, is transparent to programmers, and requires only trivial additional hardware support. SLE can provide programmers a fast path to writing correct high-performance multithreaded programs.", "citation": "Citations (552)", "departments": ["University of Wisconsin-Madison", "University of Wisconsin-Madison", "University of Illinois at Urbana\u2013Champaign", "University of Augsburg", "Barcelona Supercomputing Center", "Paul Sabatier University", "Honeywell", "University of California, Riverside", "University of California, Riverside", "University of California, Riverside", "University of California, Riverside", "University of Michigan", "University of Michigan", "University of Michigan", "University of Michigan", "Princeton University", "University of Michigan", "University of Michigan", "University of Michigan", "Digital Equipme ... Hudson, MA, USA", "Digital Equipme ... Hudson, MA, USA", "Digital Equipme ... Hudson, MA, USA", "Rapita Systems L.t.d, York"], "authors": ["Patrice Godefroid.....http://dblp.org/pers/hd/g/Godefroid:Patrice"], "conf": "icse", "year": "2014", "pages": 11}