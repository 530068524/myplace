{"title": "Evaluating value-graph translation validation for LLVM.", "fields": ["rewriting", "interpreter", "validator", "program transformation", "perl"], "abstract": "Translation validators are static analyzers that attempt to verify that program transformations preserve semantics. Normalizing translation validators do so by trying to match the value-graphs of an original function and its transformed counterpart. In this paper, we present the design of such a validator for LLVM's intra-procedural optimizations, a design that does not require any instrumentation of the optimizer, nor any rewriting of the source code to compile, and needs to run only once to validate a pipeline of optimizations. We present the results of our preliminary experiments on a set of benchmarks that include GCC, a perl interpreter, SQLite3, and other C programs.", "citation": "Citations (89)", "departments": ["Harvard University", "Harvard University", "Harvard University"], "authors": ["Jean-Baptiste Tristan.....http://dblp.org/pers/hd/t/Tristan:Jean=Baptiste", "Paul Govereau.....http://dblp.org/pers/hd/g/Govereau:Paul", "Greg Morrisett.....http://dblp.org/pers/hd/m/Morrisett:Greg"], "conf": "pldi", "year": "2011", "pages": 11}