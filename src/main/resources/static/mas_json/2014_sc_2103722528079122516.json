{"title": "Compiler Techniques for Massively Scalable Implicit Task Parallelism.", "fields": ["compiler correctness", "optimizing compiler", "functional compiler", "explicit parallelism", "implicit parallelism"], "abstract": "Swift/T is a high-level language for writing concise, deterministic scripts that compose serial or parallel codes implemented in lower-level programming models into large-scale parallel applications. It executes using a data-driven task parallel execution model that is capable of orchestrating millions of concurrently executing asynchronous tasks on homogeneous or heterogeneous resources. Producing code that executes efficiently at this scale requires sophisticated compiler transformations: poorly optimized code inhibits scaling with excessive synchronization and communication. We present a comprehensive set of compiler techniques for data-driven task parallelism, including novel compiler optimizations and intermediate representations. We report application benchmark studies, including unbalanced tree search and simulated annealing, and demonstrate that our techniques greatly reduce communication overhead and enable extreme scalability, distributing up to 612 million dynamically load balanced tasks per second at scales of up to 262,144 cores  without  explicit parallelism, synchronization, or load balancing in application code.", "citation": "Citations (19)", "year": "2014", "departments": ["University of Chicago", "Argonne National Laboratory", "Argonne National Laboratory", "Argonne National Laboratory"], "conf": "sc", "authors": ["Timothy G. Armstrong.....http://dblp.org/pers/hd/a/Armstrong:Timothy_G=", "Justin M. Wozniak.....http://dblp.org/pers/hd/w/Wozniak:Justin_M=", "Michael Wilde.....http://dblp.org/pers/hd/w/Wilde:Michael", "Ian T. Foster.....http://dblp.org/pers/hd/f/Foster:Ian_T="], "pages": 12}