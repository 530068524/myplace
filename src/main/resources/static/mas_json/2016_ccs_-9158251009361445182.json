{"title": "Enforcing Least Privilege Memory Views for Multithreaded Applications.", "fields": ["restrict", "memory corruption", "attack surface", "principle of least privilege", "privilege separation"], "abstract": "Failing to properly isolate components in the same address space has resulted in a substantial amount of vulnerabilities. Enforcing the least privilege principle for memory accesses can selectively isolate software components to restrict attack surface and prevent unintended cross-component memory corruption. However, the boundaries and interactions between software components are hard to reason about and existing approaches have failed to stop attackers from exploiting vulnerabilities caused by poor isolation. We present the secure memory views (SMV) model: a practical and efficient model for secure and selective memory isolation in monolithic multithreaded applications. SMV is a third generation privilege separation technique that offers explicit access control of memory and allows concurrent threads within the same process to partially share or fully isolate their memory space in a controlled and parallel manner following application requirements. An evaluation of our prototype in the Linux kernel (TCB", "citation": "Citations (4)", "year": "2016", "departments": ["Purdue University", "Purdue University", "Purdue University", "eFolder Inc., Atlanta, GA, USA"], "conf": "ccs", "authors": ["Terry Ching-Hsiang Hsu.....http://dblp.org/pers/hd/h/Hsu:Terry_Ching=Hsiang", "Kevin J. Hoffman.....http://dblp.org/pers/hd/h/Hoffman:Kevin_J=", "Patrick Eugster.....http://dblp.org/pers/hd/e/Eugster:Patrick", "Mathias Payer.....http://dblp.org/pers/hd/p/Payer:Mathias"], "pages": 13}