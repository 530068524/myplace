{"title": "Fuzzing with Code Fragments.", "fields": ["crash", "security testing", "fuzz testing", "security bug", "software system"], "abstract": "Fuzz testing is an automated technique providing random data as input to a software system in the hope to expose a vulnerability. In order to be effective, the fuzzed input must be common enough to pass elementary consistency checks; a JavaScript interpreter, for instance, would only accept a semantically valid program. On the other hand, the fuzzed input must be uncommon enough to trigger exceptional behavior, such as a crash of the interpreter. The LangFuzz approach resolves this conflict by using a grammar to randomly generate valid programs; the code fragments, however, partially stem from programs known to have caused invalid behavior before. LangFuzz is an effective tool for security testing: Applied on the Mozilla JavaScript interpreter, it discovered a total of 105 new severe vulnerabilities within three months of operation (and thus became one of the top security bug bounty collectors within this period); applied on the PHP interpreter, it discovered 18 new defects causing crashes.", "citation": "Citations (107)", "year": "2012", "departments": ["Mozilla Corporation", "Saarland University", "Saarland University"], "conf": "uss", "authors": ["Christian Holler.....http://dblp.org/pers/hd/h/Holler:Christian", "Kim Herzig.....http://dblp.org/pers/hd/h/Herzig:Kim", "Andreas Zeller.....http://dblp.org/pers/hd/z/Zeller:Andreas"], "pages": 14}