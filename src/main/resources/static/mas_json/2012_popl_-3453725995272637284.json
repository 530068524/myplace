{"title": "Programming with binders and indexed data-types.", "fields": ["higher order abstract syntax", "logical framework", "proof assistant", "operational semantics", "formal system"], "abstract": "We show how to combine a general purpose type system for an existing language with support for programming with binders and contexts by refining the type system of ML with a restricted form of dependent types where index objects are drawn from contextual LF. This allows the user to specify formal systems within the logical framework LF and index ML types with contextual LF objects. Our language design keeps the index language generic only requiring decidability of equality of the index language providing a modular design. To illustrate the elegance and effectiveness of our language, we give programs for closure conversion and normalization by evaluation.   Our three key technical contribution are: 1) We give a bi-directional type system for our core language which is centered around refinement substitutions instead of constraint solving. As a consequence, type checking is decidable and easy to trust, although constraint solving may be undecidable. 2) We give a big-step environment based operational semantics with environments which lends itself to efficient implementation. 3) We prove our language to be type safe and have mechanized our theoretical development in the proof assistant Coq using the fresh approach to binding.", "citation": "Citations (23)", "departments": ["McGill University", "McGill University"], "authors": ["Andrew Cave.....http://dblp.org/pers/hd/c/Cave:Andrew", "Brigitte Pientka.....http://dblp.org/pers/hd/p/Pientka:Brigitte"], "conf": "popl", "year": "2012", "pages": 12}