{"title": "Lock-free and scalable multi-version software transactional memory.", "fields": ["software transactional memory", "atomic commit", "optimistic concurrency control", "commitment ordering", "multiversion concurrency control"], "abstract": "Software Transactional Memory (STM) was initially proposed as a lock-free mechanism for concurrency control. Early implementations had efficiency limitations, and soon obstruction-free proposals appeared, to tackle this problem, often simplifying STM implementation. Today, most of the modern and top-performing STMs use blocking designs, relying on locks to ensure an atomic commit operation. This approach has revealed better in practice, in part due to its simplicity. Yet, it may have scalability problems when we move into many-core computers, requiring fine-tuning and careful programming to avoid contention. In this paper we present and discuss the modifications we made to a lock-based multi-version STM in Java, to turn it into a lock-free implementation that we have tested to scale at least up to 192 cores, and which provides results that compete with, and sometimes exceed, some of today's top-performing lock-based implementations. The new lock-free commit algorithm allows write transactions to proceed in parallel, by allowing them to run their validation phase independently of each other, and by resorting to helping from threads that would otherwise be waiting to commit, during the write-back phase. We also present a new garbage collection algorithm to dispose of old unused object versions that allows for asynchronous identification of unnecessary versions, which minimizes its interference with the rest of the transactional system.", "citation": "Citations (88)", "year": "2011", "departments": ["INESC-ID", "INESC-ID"], "conf": "ppopp", "authors": ["Sergio Miguel Fernandes.....http://dblp.org/pers/hd/f/Fernandes:Sergio_Miguel", "Jo\u00e3o P. Cachopo.....http://dblp.org/pers/hd/c/Cachopo:Jo=atilde=o_P="], "pages": 10}