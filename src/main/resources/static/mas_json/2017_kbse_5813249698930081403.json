{"title": "Automatic testing of symbolic execution engines via program generation and differential testing.", "fields": ["software bug", "correctness", "concolic testing", "non regression testing", "keyword driven testing"], "abstract": "Symbolic execution has attracted significant attention in recent years, with applications in software testing, security, networking and more. Symbolic execution tools, like CREST, KLEE, FuzzBALL, and Symbolic PathFinder, have enabled researchers and practitioners to experiment with new ideas, scale the technique to larger applications and apply it to new application domains. Therefore, the correctness of these tools is of critical importance. In this paper, we present our experience extending compiler testing techniques to find errors in both the concrete and symbolic execution components of symbolic execution engines. The approach used relies on a novel way to create program versions, in three different testing modes\u2014concrete, single-path and multi-path\u2014each exercising different features of symbolic execution engines. When combined with existing program generation techniques and appropriate oracles, this approach enables differential testing within a single symbolic execution engine. We have applied our approach to the KLEE, CREST and FuzzBALL symbolic execution engines, where it has discovered 20 different bugs exposing a variety of important errors having to do with the handling of structures, division, modulo, casting, vector instructions and more, as well as issues related to constraint solving, compiler optimisations and test input replay.", "citation": "Citations (2)", "departments": ["Imperial College London", "Imperial College London"], "authors": ["Timotej Kapus.....http://dblp.org/pers/hd/k/Kapus:Timotej", "Cristian Cadar.....http://dblp.org/pers/hd/c/Cadar:Cristian"], "conf": "kbse", "year": "2017", "pages": 11}