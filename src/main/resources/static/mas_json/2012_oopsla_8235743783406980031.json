{"title": "Open and efficient type switch for C++.", "fields": ["haskell", "visitor pattern", "void type", "multiple inheritance", "variant type"], "abstract": "Selecting operations based on the run-time type of an object is key to many object-oriented and functional programming techniques. We present a technique for implementing open and efficient type switching on hierarchical extensible data types. The technique is general and copes well with C++ multiple inheritance. To simplify experimentation and gain realistic performance using production-quality compilers and tool chains, we implement a type switch construct as an ISO C++11 library, called Mach7. This library-only implementation provides concise notation and outperforms the visitor design pattern, commonly used for case analysis on types in object-oriented programming. For closed sets of types, its performance roughly equals equivalent code in functional languages, such as OCaml and Haskell. The type-switching code is easier to use and is more expressive than hand-coded visitors are. The library is non-intrusive and circumvents most of the extensibility restrictions typical of the visitor design pattern. It was motivated by applications involving large, typed, abstract syntax trees.", "citation": "Citations (5)", "departments": ["Texas A&M University", "Texas A&M University", "Texas A&M University"], "authors": ["Yuriy Solodkyy.....http://dblp.org/pers/hd/s/Solodkyy:Yuriy", "Gabriel Dos Reis.....http://dblp.org/pers/hd/r/Reis:Gabriel_Dos", "Bjarne Stroustrup.....http://dblp.org/pers/hd/s/Stroustrup:Bjarne"], "conf": "oopsla", "year": "2012", "pages": 20}