{"title": "Fast conservative garbage collection.", "fields": ["heap", "pointer", "reference counting", "stack", "garbage"], "abstract": "Garbage collectors are exact or conservative. An  exact  collector identifies all references precisely and may move referents and update references, whereas a  conservative  collector treats one or more of stack, register, and heap references as ambiguous.  Ambiguous references  constrain collectors in two ways. (1) Since they may be pointers, the collectors must retain referents. (2) Since they may be values, the collectors cannot modify them, pinning their referents.   We explore  conservative  collectors for managed languages, with ambiguous stacks and registers. We show that for Java benchmarks they retain and pin remarkably few heap objects:  line -grain pinning and  opportunistic  copying of unambiguous referents. Deferred RC simply needs an object map to deliver the first conservative RC. We implement six exact collectors and their conservative counterparts. Conservative Immix and RC come within 2 to 3% of their exact counterparts. In particular, conservative RC Immix is slightly  faster  than a well-tuned exact generational collector. These findings show that for managed languages, conservative collection is compatible with high performance.", "citation": "Citations (8)", "departments": ["Australian National University", "Australian National University", "Microsoft"], "authors": ["Rifat Shahriyar.....http://dblp.org/pers/hd/s/Shahriyar:Rifat", "Stephen M. Blackburn.....http://dblp.org/pers/hd/b/Blackburn:Stephen_M=", "Kathryn S. McKinley.....http://dblp.org/pers/hd/m/McKinley:Kathryn_S="], "conf": "oopsla", "year": "2014", "pages": 19}