{"title": "High-performance nested CEP query processing over event streams.", "fields": ["operator", "central processing unit", "query language", "ranging", "complex event processing"], "abstract": "Complex event processing (CEP) over event streams has become increasingly important for real-time applications ranging from health care, supply chain management to business intelligence. These monitoring applications submit complex queries to track sequences of events that match a given pattern. As these systems mature the need for increasingly complex nested sequence query support arises, while the state-of-art CEP systems mostly support the execution of flat sequence queries only. To assure real-time responsiveness and scalability for pattern detection even on huge volume high-speed streams, efficient processing techniques must be designed. In this paper, we first analyze the prevailing nested pattern query processing strategy and identify several serious shortcomings. Not only are substantial subsequences first constructed just to be subsequently discarded, but also opportunities for shared execution of nested subexpressions are overlooked. As foundation, we introduce NEEL, a CEP query language for expressing nested CEP pattern queries composed of sequence, negation, AND and OR operators. To overcome deficiencies, we design rewriting rules for pushing negation into inner subexpressions. Next, we devise a normalization procedure that employs these rules for flattening a nested complex event expression. To conserve CPU and memory consumption, we propose several strategies for efficient shared processing of groups of normalized NEEL subexpressions. These strategies include prefix caching, suffix clustering and customized \u201cbit-marking\u201d execution strategies. We design an optimizer to partition the set of all CEP subexpressions in a NEEL normal form into groups, each of which can then be mapped to one of our shared execution operators. Lastly, we evaluate our technologies by conducting a performance study to assess the CPU processing time using real-world stock trades data. Our results confirm that our NEEL execution in many cases performs 100 fold faster than the traditional iterative nested execution strategy for real stock market query workloads.", "citation": "Citations (30)", "departments": ["Worcester Polytechnic Institute", "Worcester Polytechnic Institute", "Worcester Polytechnic Institute", "Hewlett-Packard", "Hewlett-Packard"], "authors": ["Mo Liu.....http://dblp.org/pers/hd/l/Liu:Mo", "Elke A. Rundensteiner.....http://dblp.org/pers/hd/r/Rundensteiner:Elke_A=", "Daniel J. Dougherty.....http://dblp.org/pers/hd/d/Dougherty:Daniel_J=", "Chetan Gupta.....http://dblp.org/pers/hd/g/Gupta:Chetan", "Song Wang.....http://dblp.org/pers/hd/w/Wang_0001:Song", "Ismail Ari.....http://dblp.org/pers/hd/a/Ari:Ismail", "Abhay Mehta.....http://dblp.org/pers/hd/m/Mehta:Abhay"], "conf": "icde", "year": "2011", "pages": 12}