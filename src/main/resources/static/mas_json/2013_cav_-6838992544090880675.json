{"title": "Automatic Linearizability Proofs of Concurrent Objects with Cooperating Updates.", "fields": ["linearization", "rewriting", "linearizability", "mathematical proof", "fetch"], "abstract": "An execution containing operations performing queries or updating a concurrent object is linearizable w.r.t an abstract implementation (called specification) iff for each operation, one can associate a point in time, called linearization point, such that the execution of the operations in the order of their linearization points can be reproduced by the specification. Finding linearization points is particularly difficult when they do not belong to the operations's actions. This paper addresses this challenge by introducing a new technique for rewriting the implementation of the concurrent object and its specification such that the new implementation preserves all executions of the original one, and its linearizability (w.r.t. the new specification) implies the linearizability of the original implementation (w.r.t. the original specification). The rewriting introduces additional combined methods to obtain a library with a simpler linearizability proof, i.e., a library whose operations contain their linearization points. We have implemented this technique in a prototype, which has been successfully applied to examples beyond the reach of current techniques, e.g., Stack Elimination and Fetch&Add.", "citation": "Citations (16)", "year": "2013", "departments": ["Institute of Science and Technology Austria", "Institute of Science and Technology Austria", "Institute of Science and Technology Austria"], "conf": "cav", "authors": ["Cezara Dragoi.....http://dblp.org/pers/hd/d/Dragoi:Cezara", "Ashutosh Gupta.....http://dblp.org/pers/hd/g/Gupta:Ashutosh", "Thomas A. Henzinger.....http://dblp.org/pers/hd/h/Henzinger:Thomas_A="], "pages": 17}