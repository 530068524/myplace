{"title": "Test generation to expose changes in evolving programs.", "fields": ["test case", "test data generation", "code", "symbolic execution", "software evolution"], "abstract": "Software constantly undergoes changes throughout its life cycle, and thereby it evolves. As changes are introduced into a code base, we need to make sure that the effect of the changes is thoroughly tested. For this purpose, it is important to generate test cases that can stress the effect of a given change. In this paper, we propose an automatic test generation solution to this problem. Given a change  c , we use dynamic symbolic execution to generate a test input  t , which stresses the change. This is done by ensuring (i) the change  c  is executed by  t , and (ii) the effect of  c  is observable in the output produced by the test  t . To construct a change-reaching input, our technique uses distance in control-dependency graph to guide path exploration towards the change. Then, our technique identifies the common programming patterns that may prevent a given change from affecting the program's output. For each of these patterns we propose methods to tune the change-reaching input into an input that reaches the change and propagates the effect of the change to the output. Our experimental results show that our test generation technique is effective in generating change-exposing inputs for real-world programs.", "citation": "Citations (34)", "year": "2010", "departments": ["National University of Singapore", "National University of Singapore", "National University of Singapore"], "conf": "kbse", "authors": ["Dawei Qi.....http://dblp.org/pers/hd/q/Qi:Dawei", "Abhik Roychoudhury.....http://dblp.org/pers/hd/r/Roychoudhury:Abhik", "Zhenkai Liang.....http://dblp.org/pers/hd/l/Liang:Zhenkai"], "pages": 10}