{"title": "SRCIROR: a toolset for mutation testing of C source code and LLVM intermediate representation.", "fields": ["operator", "mutation testing", "intermediate language", "extensibility", "compiler"], "abstract": "We present SRCIROR (pronounced \u201csorcerer\u201c), a toolset for performing mutation testing at the levels of C/C++ source code (SRC) and the LLVM compiler intermediate representation (IR). At the SRC level, SRCIROR identifies program constructs for mutation by pattern-matching on the Clang AST. At the IR level, SRCIROR directly mutates the LLVM IR instructions through LLVM passes. Our implementation enables SRCIROR to (1) handle any program that Clang can handle, extending to large programs with a minimal overhead, and (2) have a small percentage of invalid mutants that do not compile. SRCIROR enables performing mutation testing using the same classes of mutation operators at both the SRC and IR levels, and it is easily extensible to support more operators. In addition, SRCIROR can collect coverage to generate mutants only for covered code elements. Our tool is publicly available on GitHub (https://github.com/TestingResearchIllinois/srciror). We evaluate SRCIROR on Coreutils subjects. Our evaluation shows interesting differences between SRC and IR, demonstrating the value of SRCIROR in enabling mutation testing research across different levels of code representation.", "citation": "Not cited", "departments": ["University of Illinois at Urbana\u2013Champaign", "University of Illinois at Urbana\u2013Champaign"], "authors": ["Farah Hariri.....http://dblp.org/pers/hd/h/Hariri:Farah", "August Shi.....http://dblp.org/pers/hd/s/Shi:August"], "conf": "kbse", "year": "2018", "pages": 4}