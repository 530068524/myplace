{"title": "Architectural Support for Fair Reader-Writer Locking.", "fields": ["uniform memory access", "giant lock", "flat memory model", "software transactional memory", "lock convoy", "multimedia", "data diffusion machine", "readers writer lock", "ticket lock", "double checked locking"], "abstract": "Many shared-memory parallel systems use lock-based synchronization mechanisms to provide mutual exclusion or reader-writer access to memory locations. Software locks are inefficient either in memory usage, lock transfer time, or both. Proposed hardware locking mechanisms are either too specific (for example, requiring static assignment of threads to cores and vice-versa), support a limited number of concurrent locks, require tag values to be associated with every memory location, rely on the low latencies of single-chip multicore designs or are slow in adversarial cases such as suspended threads in a lock queue. Additionally, few proposals cover reader-writer locks and their associated fairness issues. In this paper we introduce the Lock Control Unit (LCU) which is an acceleration mechanism collocated with each core to explicitly handle fast reader-writer locking. By associating a unique thread-id to each lock request we decouple the hardware lock from the requestor core. This provides correct and efficient execution in the presence of thread migration. By making the LCU logic autonomous from the core, it seamlessly handles thread preemption. Our design offers richer semantics than previous proposals, such as try lock support while providing direct core-to-core transfers. We evaluate our proposal with micro benchmarks, a fine-grain Software Transactional Memory system and programs from the Parsec and Splash parallel benchmark suites. The lock transfer time decreases in up to 30\\% when compared to previous hardware proposals. Transactional Memory systems limited by reader-locking congestion boost up to 3x while still preserving graceful fairness and starvation freedom properties. Finally, commonly used applications achieve speedups up to a 7% when compared to software models.", "citation": "Not cited", "departments": ["University of Cantabria", "University of Cantabria", "Microsoft", "University of Cantabria", "Microsoft", "Microsoft", "Microsoft", "Microsoft", "Microsoft", "Barcelona Super ... arcelona, Spain"], "authors": ["Enrique Vallejo.....http://dblp.org/pers/hd/v/Vallejo_0001:Enrique", "Ram\u00f3n Beivide.....http://dblp.org/pers/hd/b/Beivide:Ram=oacute=n", "Adri\u00e1n Cristal.....http://dblp.org/pers/hd/c/Cristal:Adri=aacute=n", "Tim Harris.....http://dblp.org/pers/hd/h/Harris_0001:Tim", "Fernando Vallejo.....http://dblp.org/pers/hd/v/Vallejo:Fernando", "Osman S. Unsal.....http://dblp.org/pers/hd/u/Unsal:Osman_S=", "Mateo Valero.....http://dblp.org/pers/hd/v/Valero:Mateo"], "conf": "micro", "year": "2010", "pages": 12}