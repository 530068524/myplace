{"title": "Refactoring for reentrancy.", "fields": ["program transformation", "reentrancy", "code refactoring", "thread", "concurrency control"], "abstract": "A program is  reentrant  if distinct executions of that program on distinct inputs cannot affect each other. Reentrant programs have the desirable property that they can be deployed on parallel machines without additional concurrency control. Many existing Java programs are not reentrant because they rely on mutable global state. We present a mostly-automated refactoring that makes such programs reentrant by replacing global state with thread-local state and performing each execution in a fresh thread. The approach has the key advantage of yielding a program that is  obviously  safe for parallel execution; the program can then be optimized selectively for better performance. We implemented this refactoring in  Reentrancer , a practical Eclipse-based tool.  Reentrancer  successfully eliminated observed reentrancy problems in five single-threaded Java benchmarks. For three of the benchmarks,  Reentrancer  enabled speedups on a multicore machine without any further code modification.", "citation": "Citations (77)", "departments": ["Rutgers University", "IBM", "IBM"], "authors": ["Jan Wloka.....http://dblp.org/pers/hd/w/Wloka:Jan", "Manu Sridharan.....http://dblp.org/pers/hd/s/Sridharan:Manu", "Frank Tip.....http://dblp.org/pers/hd/t/Tip:Frank"], "conf": "sigsoft", "year": "2009", "pages": 10}