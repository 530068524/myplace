{"title": "First-class effect reflection for effect-guided programming.", "fields": ["scheduling", "soundness", "abstraction", "first class", "thread"], "abstract": "This paper introduces a novel type-and-effect calculus, first-class effects, where the computational effect of an expression can be programmatically reflected, passed around as values, and analyzed at run time. A broad range of designs \"hard-coded\" in existing effect-guided analyses \u2014 from thread scheduling, version-consistent software updating, to data zeroing \u2014 can be naturally supported through the programming abstractions. The core technical development is a type system with a number of features, including a hybrid type system that integrates static and dynamic effect analyses, a refinement type system to verify application-specific effect management properties, a double-bounded type system that computes both over-approximation of effects and their under-approximation. We introduce and establish a notion of soundness called trace consistency, defined in terms of how the effect and trace correspond. The property sheds foundational insight on \"good\" first-class effect programming.", "citation": "Not cited", "departments": ["Iowa State University", "Binghamton University", "Iowa State University"], "authors": ["Yuheng Long.....http://dblp.org/pers/hd/l/Long:Yuheng", "Yu David Liu.....http://dblp.org/pers/hd/l/Liu:Yu_David", "Hridesh Rajan.....http://dblp.org/pers/hd/r/Rajan:Hridesh"], "conf": "oopsla", "year": "2016", "pages": 18}