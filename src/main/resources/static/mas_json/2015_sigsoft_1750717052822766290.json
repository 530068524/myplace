{"title": "Users beware: preference inconsistencies ahead.", "fields": ["source code", "software configuration management", "software system", "software evolution", "static analysis"], "abstract": "The structure of preferences for modern highly-configurable software systems has become extremely complex, usually consisting of multiple layers of access that go from the user interface down to the lowest levels of the source code. This complexity can lead to inconsistencies between layers, especially during software evolution. For example, there may be preferences that users can change through the GUI, but that have no effect on the actual behavior of the system because the related source code is not present or has been removed going from one version to the next. These inconsistencies may result in unexpected program behaviors, which range in severity from mild annoyances to more critical security or performance problems. To address this problem, we present SCIC (Software Configuration Inconsistency Checker), a static analysis technique that can automatically detect these kinds of inconsistencies. Unlike other configuration analysis tools, SCIC can handle software that (1) is written in multiple programming languages and (2) has a complex preference structure. In an empirical evaluation that we performed on 10 years worth of versions of both the widely used Mozilla Core and Firefox, SCIC was able to find 40 real inconsistencies (some determined as severe), whose lifetime spanned multiple versions, and whose detection required the analysis of code written in multiple languages.", "citation": "Citations (4)", "departments": ["Georgia Institute of Technology", "University of Nebraska\u2013Lincoln", "Georgia Institute of Technology"], "authors": ["Farnaz Behrang.....http://dblp.org/pers/hd/b/Behrang:Farnaz", "Myra B. Cohen.....http://dblp.org/pers/hd/c/Cohen:Myra_B=", "Alessandro Orso.....http://dblp.org/pers/hd/o/Orso:Alessandro"], "conf": "sigsoft", "year": "2015", "pages": 12}