{"title": "Typed Architectures: Architectural Support for Lightweight Scripting.", "fields": ["memory footprint", "interpreter", "javascript", "microarchitecture", "instruction set"], "abstract": "Dynamic scripting languages are becoming more and more widely adopted not only for fast prototyping but also for developing production-grade applications. They provide high-productivity programming environments featuring high levels of abstraction with powerful built-in functions, automatic memory management, object-oriented programming paradigm and dynamic typing. However, their flexible, dynamic type systems easily become the source of inefficiency in terms of instruction count, memory footprint, and energy consumption. This overhead makes it challenging to deploy these high-productivity programming technologies on emerging single-board computers for IoT applications. Addressing this challenge, this paper introduces Typed Architectures, a high-efficiency, low-cost execution substrate for dynamic scripting languages, where each data variable retains high-level type information at an ISA level. Typed Architectures calculate and check the dynamic type of each variable implicitly in hardware, rather than explicitly in software, hence significantly reducing instruction count for dynamic type checking. Besides, Typed Architectures introduce polymorphic instructions (e.g., xadd), which are bound to the correct native instruction at runtime within the pipeline (e.g., add or fadd) to efficiently implement polymorphic operators. Finally, Typed Architectures provide hardware support for flexible yet efficient type tag extraction and insertion, capturing common data layout patterns of tag-value pairs. Our evaluation using a fully synthesizable RISC-V RTL design on FPGA shows that Typed Architectures achieve geomean speedups of 11.2% and 9.9% with maximum speedups of 32.6% and 43.5% for two production-grade scripting engines for JavaScript and Lua, respectively. Moreover, Typed Architectures improve the energy-delay product (EDP) by 19.3% for JavaScript and 16.5% for Lua with an area overhead of 1.6% at a 40nm technology node.", "citation": "Citations (1)", "year": "2017", "departments": ["Sungkyunkwan University", "Sungkyunkwan University", "Sungkyunkwan University", "Sungkyunkwan University", "Seoul National University"], "conf": "asplos", "authors": ["Channoh Kim.....http://dblp.org/pers/hd/k/Kim:Channoh", "Jaehyeok Kim.....http://dblp.org/pers/hd/k/Kim:Jaehyeok", "Sungmin Kim.....http://dblp.org/pers/hd/k/Kim:Sungmin", "Doo-Young Kim.....http://dblp.org/pers/hd/k/Kim:Doo=Young", "Namho Kim.....http://dblp.org/pers/hd/k/Kim:Namho", "Gitae Na.....http://dblp.org/pers/hd/n/Na:Gitae", "Young H. Oh.....http://dblp.org/pers/hd/o/Oh:Young_H=", "Hyeon-Gyu Cho.....http://dblp.org/pers/hd/c/Cho:Hyeon=Gyu", "Jae W. Lee.....http://dblp.org/pers/hd/l/Lee:Jae_W="], "pages": 14}