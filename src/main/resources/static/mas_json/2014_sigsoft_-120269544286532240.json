{"title": "Retrofitting concurrency for Android applications through refactoring.", "fields": ["asynchrony", "retrofitting", "safer", "code refactoring", "thread"], "abstract": "Running compute-intensive or blocking I/O operations in the UI event thread of smartphone apps can severely degrade responsiveness. Despite the fact that Android supports writing concurrent code via AsyncTask, we know little about how developers use AsyncTask to improve responsiveness. To understand how AsyncTask is used/underused/misused in practice, we rst conduct a formative study using a corpus of top 104 most popular open-source Android apps comprising 1.34M SLOC. Our study shows that even though half of the apps use AsyncTask, there are hundreds of places where they missed opportunities to encapsulate long-running operations in AsyncTask. Second, 46% of the usages are manually refactored. However, the refactored code contains concurrency bugs (such as data races) and performance bugs (concurrent code still executes sequentially). Inspired by these ndings, we designed, developed, and evaluated Asynchronizer, an automated refactoring tool that enables developers to extract long-running operations into AsyncTask. Asynchronizer uses a points-to static analysis to determine the safety of the transformation. Our empirical evaluation shows that Asynchronizer is (i) highly applicable, (ii) accurate, (iii) safer than manual refactoring (iv) it saves development eort, (v) its results have been accepted by the open-source developers. This shows that Asynchronizer is useful.", "citation": "Citations (52)", "departments": ["University of Illinois at Urbana\u2013Champaign", "University of Illinois at Urbana\u2013Champaign", "Oregon State University"], "authors": ["Yu Lin.....http://dblp.org/pers/hd/l/Lin:Yu", "Cosmin Radoi.....http://dblp.org/pers/hd/r/Radoi:Cosmin", "Danny Dig.....http://dblp.org/pers/hd/d/Dig:Danny"], "conf": "sigsoft", "year": "2014", "pages": 12}