{"title": "Cache locality optimization for recursive programs.", "fields": ["fork", "for loop", "cilk", "cache", "work stealing"], "abstract": "We present an approach to optimize the cache locality for recursive programs by dynamically splicing---recursively interleaving---the execution of distinct function invocations. By utilizing data effect annotations, we identify concurrency and data reuse opportunities across function invocations and interleave them to reduce reuse distance. We present algorithms that efficiently track effects in recursive programs, detect interference and dependencies, and interleave execution of function invocations using user-level (non-kernel) lightweight threads. To enable multi-core execution, a program is parallelized using a nested fork/join programming model. Our cache optimization strategy is designed to work in the context of a random work stealing scheduler. We present an implementation using the MIT Cilk framework that demonstrates significant improvements in sequential and parallel performance, competitive with a state-of-the-art compile-time optimizer for loop programs and a domain-specific optimizer for stencil programs.", "citation": "Citations (2)", "departments": ["Sandia National Laboratories", "Pacific Northwest National Laboratory"], "authors": ["Jonathan Lifflander.....http://dblp.org/pers/hd/l/Lifflander:Jonathan", "Sriram Krishnamoorthy.....http://dblp.org/pers/hd/k/Krishnamoorthy:Sriram"], "conf": "pldi", "year": "2017", "pages": 16}