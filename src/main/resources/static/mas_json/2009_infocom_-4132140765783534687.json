{"title": "Online Bipartite Perfect Matching With Augmentations.", "fields": ["online algorithm", "greedy algorithm", "matching", "server", "bipartite graph"], "abstract": "In this paper, we study an online bipartite matching problem, motivated by applications in wireless communication, content delivery, and job scheduling. In our problem, we have a bipartite graph G between n clients and n servers, which represents the servers to which each client can connect. Although the edges of G are unknown at the start, we learn the graph over time, as each client arrives and requests to be matched to a server. As each client arrives, she reveals the servers to which she can connect, and the goal of the algorithm is to maintain a matching between the clients who have arrived and the servers. Assuming that G has a perfect matching which allows all clients to be matched to servers, the goal of the online algorithm is to minimize the switching cost, the total number of times a client needs to switch servers in order to maintain a matching at all times. Although there are no known algorithms which are guaranteed to yield switching cost better than the trivial O(n 2 ) in the worst case, we show that the switching cost can be much lower in three natural settings. In our first result, we show that for any arbitrary graph G with a perfect matching, if the clients arrive in random order, then the total switching cost is only O(n log n) with high probability. This bound is tight, as we show an example where the switching cost is Omega(n log n) in expectation. In our second result, we show that if each client has edges to Theta(log n) uniformly random servers, then the total switching cost is even better; in this case, it is only O(n) with high probability, and we also have a lower bound of Omega(n/log n). In terms of the number of edges needed for each client, our result is tight, since Omega(log n) edges are needed to guarantee a perfect matching in G with high probability. In our last result, we derive the first algorithm known to yield total cost O(n log n), given that the underlying graph G is a forest. This is the first result known to match-\n the existing lower bound for forests, which shows that any online algorithm must have switching cost Omega(n log n), even when G is restricted to be a forest.", "citation": "Citations (14)", "departments": ["University of California, Berkeley", "University of California, Berkeley", "Cornell University", "Inf. Theor. & A ... , San Diego, CA"], "authors": ["Kamalika Chaudhuri.....http://dblp.org/pers/hd/c/Chaudhuri:Kamalika", "Constantinos Daskalakis.....http://dblp.org/pers/hd/d/Daskalakis:Constantinos", "Robert D. Kleinberg.....http://dblp.org/pers/hd/k/Kleinberg:Robert_D=", "Henry Lin.....http://dblp.org/pers/hd/l/Lin:Henry"], "conf": "infocom", "year": "2009", "pages": 9}