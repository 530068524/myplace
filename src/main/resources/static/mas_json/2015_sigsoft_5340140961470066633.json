{"title": "Automatically deriving pointer reference expressions from binary code for memory dump analysis.", "fields": ["pointer aliasing", "smart pointer", "dangling pointer", "hazard pointer", "tagged pointer"], "abstract": "Given a crash dump or a kernel memory snapshot, it is often desirable to have a capability that can traverse its pointers to locate the root cause of the crash, or check their integrity to detect the control flow hijacks. To achieve this, one key challenge lies in how to locate where the pointers are. While locating a pointer usually requires the data structure knowledge of the corresponding program, an important advance made by this work is that we show a technique of extracting address-independent data reference expressions for pointers through dynamic binary analysis. This novel pointer reference expression encodes how a pointer is accessed through the combination of a base address (usually a global variable) with certain offset and further pointer dereferences. We have applied our techniques to OS kernels, and our experimental results with a number of real world kernel malware show that we can correctly identify the hijacked kernel function pointers by locating them using the extracted pointer reference expressions when only given a memory snapshot.", "citation": "Citations (3)", "departments": ["University of Texas at Dallas", "University of Texas at Dallas", "Carnegie Mellon University"], "authors": ["Yangchun Fu.....http://dblp.org/pers/hd/f/Fu:Yangchun", "Zhiqiang Lin.....http://dblp.org/pers/hd/l/Lin:Zhiqiang", "David Brumley.....http://dblp.org/pers/hd/b/Brumley:David"], "conf": "sigsoft", "year": "2015", "pages": 11}