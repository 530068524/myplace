{"title": "Combining proofs and programs in a dependently typed language.", "fields": ["expression", "haskell", "termination analysis", "agda", "type safety"], "abstract": "Most dependently-typed programming languages either require that all expressions terminate (e.g. Coq, Agda, and Epigram), or allow infinite loops but are inconsistent when viewed as logics (e.g. Haskell, ATS, \u03a9mega. Here, we combine these two approaches into a single dependently-typed core language. The language is composed of two fragments that share a common syntax and overlapping semantics: a logic that guarantees total correctness, and a call-by-value programming language that guarantees type safety but not termination. The two fragments may interact: logical expressions may be used as programs; the logic may soundly reason about potentially nonterminating programs; programs can require logical proofs as arguments; and \"mobile\" program values, including proofs computed at runtime, may be used as evidence by the logic. This language allows programmers to work with total and partial functions uniformly, providing a smooth path from functional programming to dependently-typed programming.", "citation": "Citations (29)", "departments": ["University of Pennsylvania", "University of Pennsylvania", "University of Pennsylvania"], "authors": ["Chris Casinghino.....http://dblp.org/pers/hd/c/Casinghino:Chris", "Vilhelm Sj\u00f6berg.....http://dblp.org/pers/hd/s/Sj=ouml=berg:Vilhelm", "Stephanie Weirich.....http://dblp.org/pers/hd/w/Weirich:Stephanie"], "conf": "popl", "year": "2014", "pages": 14}