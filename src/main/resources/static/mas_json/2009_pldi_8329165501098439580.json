{"title": "Proving optimizations correct using parameterized program equivalence.", "fields": ["loop interchange", "loop unswitching", "optimizing compiler", "formal equivalence checking", "software pipelining"], "abstract": "Translation validation is a technique for checking that, after an optimization has run, the input and output of the optimization are equivalent. Traditionally, translation validation has been used to prove concrete, fully specified programs equivalent. In this paper we present Parameterized Equivalence Checking (PEC), a generalization of translation validation that can prove the equivalence of parameterized programs. A parameterized program is a partially specified program that can represent multiple concrete programs. For example, a parameterized program may contain a section of code whose only known property is that it does not modify certain variables. By proving parameterized programs equivalent, PEC can prove the correctness of transformation rules that represent complex optimizations once and for all, before they are ever run. We implemented our PEC technique in a tool that can establish the equivalence of two parameterized programs. To highlight the power of PEC, we designed a language for implementing complex optimizations using many-to-many rewrite rules, and used this language to implement a variety of optimizations including software pipelining, loop unrolling, loop unswitching, loop interchange, and loop fusion. Finally, to demonstrate the effectiveness of PEC, we used our PEC implementation to verify that all the optimizations we implemented in our language preserve program behavior.", "citation": "Citations (89)", "departments": ["University of California, San Diego", "University of California, San Diego", "University of California, San Diego"], "authors": ["Sudipta Kundu.....http://dblp.org/pers/hd/k/Kundu:Sudipta", "Zachary Tatlock.....http://dblp.org/pers/hd/t/Tatlock:Zachary", "Sorin Lerner.....http://dblp.org/pers/hd/l/Lerner:Sorin"], "conf": "pldi", "year": "2009", "pages": 11}