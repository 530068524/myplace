{"title": "Generative type abstraction and type-level computation.", "fields": ["declarative programming", "type theory", "haskell", "abstract type", "abstract data type"], "abstract": "Modular languages support generative type abstraction, ensuring that an abstract type is distinct from its representation, except inside the implementation where the two are synonymous. We show that this well-established feature is in tension with the non-parametric features of newer type systems, such as indexed type families and GADTs. In this paper we solve the problem by using kinds to distinguish between parametric and non-parametric contexts. The result is directly applicable to Haskell, which is rapidly developing support for type-level computation, but the same issues should arise whenever generativity and non-parametric features are combined.", "citation": "Citations (27)", "departments": ["University of Pennsylvania", "Microsoft", "Microsoft", "University of Pennsylvania"], "authors": ["Stephanie Weirich.....http://dblp.org/pers/hd/w/Weirich:Stephanie", "Dimitrios Vytiniotis.....http://dblp.org/pers/hd/v/Vytiniotis:Dimitrios", "Simon L. Peyton Jones.....http://dblp.org/pers/hd/j/Jones:Simon_L=_Peyton", "Steve Zdancewic.....http://dblp.org/pers/hd/z/Zdancewic:Steve"], "conf": "popl", "year": "2011", "pages": 14}