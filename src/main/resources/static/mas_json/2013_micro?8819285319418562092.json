{"title": "RowClone: fast and energy-efficient in-DRAM bulk data copy and initialization.", "fields": ["fork", "memory bandwidth", "row", "multi channel memory architecture", "in memory processing"], "abstract": "Several system-level operations trigger bulk data copy or initialization. Even though these bulk data operations do not require any computation, current systems transfer a large quantity of data back and forth on the memory channel to perform such operations. As a result, bulk data operations consume high latency, bandwidth, and energy--degrading both system performance and energy efficiency.   In this work, we propose  RowClone , a new and simple mechanism to perform bulk copy and initialization completely within DRAM -- eliminating the need to transfer any data over the memory channel to perform such operations. Our key observation is that DRAM can internally and efficiently transfer a large quantity of data (multiple KBs) between a row of DRAM cells and the associated row buffer. Based on this, our primary mechanism can quickly copy an entire row of data from a source row to a destination row by first copying the data from the source row to the row buffer and then from the row buffer to the destination row, via two back-to-back  activate  commands. This mechanism, which we call the Fast Parallel Mode of RowClone, reduces the latency and energy consumption of a 4KB bulk copy operation by 11.6x and 74.4x, respectively, and a 4KB bulk zeroing operation by 6.0x and 41.5x, respectively. To efficiently copy data between rows that do not share a row buffer, we propose a second mode of RowClone, the Pipelined Serial Mode, which uses the shared internal bus of a DRAM chip to quickly copy data between two banks. RowClone requires only a 0.01% increase in DRAM chip area.   We quantitatively evaluate the benefits of RowClone by focusing on fork, one of the frequently invoked system calls, and five other copy and initialization intensive applications. Our results show that RowClone can significantly improve both single-core and multi-core system performance, while also significantly reducing main memory bandwidth and energy consumption.", "citation": "Citations (143)", "departments": ["Carnegie Mellon University", "Carnegie Mellon University", "Carnegie Mellon University", "Carnegie Mellon University", "Carnegie Mellon University"], "authors": ["Vivek Seshadri.....http://dblp.org/pers/hd/s/Seshadri:Vivek", "Yoongu Kim.....http://dblp.org/pers/hd/k/Kim:Yoongu", "Chris Fallin.....http://dblp.org/pers/hd/f/Fallin:Chris", "Donghyuk Lee.....http://dblp.org/pers/hd/l/Lee:Donghyuk", "Rachata Ausavarungnirun.....http://dblp.org/pers/hd/a/Ausavarungnirun:Rachata", "Gennady Pekhimenko.....http://dblp.org/pers/hd/p/Pekhimenko:Gennady", "Yixin Luo.....http://dblp.org/pers/hd/l/Luo:Yixin", "Onur Mutlu.....http://dblp.org/pers/hd/m/Mutlu:Onur", "Phillip B. Gibbons.....http://dblp.org/pers/hd/g/Gibbons:Phillip_B=", "Michael A. Kozuch.....http://dblp.org/pers/hd/k/Kozuch:Michael_A=", "Todd C. Mowry.....http://dblp.org/pers/hd/m/Mowry:Todd_C="], "conf": "micro", "year": "2013", "pages": 13}