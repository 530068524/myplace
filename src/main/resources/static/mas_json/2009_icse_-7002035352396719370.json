{"title": "Refactoring sequential Java code for concurrency via concurrent libraries.", "fields": ["source lines of code", "program analysis", "concurrency", "code refactoring", "software maintenance"], "abstract": "Parallelizing existing sequential programs to run efficiently on multicores is hard. The Java 5 package java.util.concurrent (j.u.c.) supports writing concurrent programs: much of the complexity of writing thread-safe and scalable programs is hidden in the library. To use this package, programmers still need to reengineer existing code. This is tedious because it requires changing many lines of code, is error-prone because programmers can use the wrong APIs, and is omission-prone because programmers can miss opportunities to use the enhanced APIs. This paper presents our tool, Concurrencer, that enables programmers to refactor sequential code into parallel code that uses three j.u.c. concurrent utilities. Concurrencer does not require any program annotations. Its transformations span multiple, non-adjacent, program statements. A find-and-replace tool can not perform such transformations, which require program analysis. Empirical evaluation shows that Concurrencer refactors code effectively: Concurrencer correctly identifies and applies transformations that some open-source developers overlooked, and the converted code exhibits good speedup.", "citation": "Citations (147)", "departments": ["Massachusetts Institute of Technology", "Massachusetts Institute of Technology", "Massachusetts Institute of Technology"], "authors": ["Danny Dig.....http://dblp.org/pers/hd/d/Dig:Danny", "John Marrero.....http://dblp.org/pers/hd/m/Marrero:John", "Michael D. Ernst.....http://dblp.org/pers/hd/e/Ernst:Michael_D="], "conf": "icse", "year": "2009", "pages": 11}