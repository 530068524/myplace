{"title": "Systematically refactoring inheritance to delegation in java.", "fields": ["delegation", "type inference", "code refactoring", "software maintenance", "constraint graph"], "abstract": "Because of the strong coupling of classes and the proliferation of unneeded class members induced by inheritance, the suggestion to use composition and delegation instead has become common place. The presentation of a corresponding refactoring in the literature may lead one to believe that such a transformation is a straightforward undertaking. However, closer analysis reveals that this refactoring is neither always possible, nor does it necessarily achieve its desired effect. We have therefore identified the necessary preconditions and realizable postconditions of the refactoring, and built a tool that can perform it completely automatically. By applying this tool to all subclasses of several open-source projects, we have collected evidence of the applicability of the refactoring and of its capability to deliver on its promises. The refactoring builds on constraint graphs originally developed for type inference to check the preconditions and to compute the necessary delegation as well as the subtype relationships that must be maintained.", "citation": "Citations (68)", "departments": ["Rolf C. Hagen Group", "ej-technologies ... \u00fcnchen, Germany"], "authors": ["Hannes Kegel.....http://dblp.org/pers/hd/k/Kegel:Hannes", "Friedrich Steimann.....http://dblp.org/pers/hd/s/Steimann:Friedrich"], "conf": "icse", "year": "2008", "pages": 10}