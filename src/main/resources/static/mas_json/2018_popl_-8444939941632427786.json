{"title": "Program generation for ML modules (short paper).", "fields": ["type safety", "theoretical computer science", "programming language", "functor", "program transformation"], "abstract": "Program generation has been successful in various domains which need high performance and high productivity. Yet, programming-language supports for program generation need further improvement. An important omission is the functionality of generating modules in a type safe way. Inoue et al. have addressed this issue in 2016, but investigated only a few examples. We propose a language as an extension of (a small subset of) MetaOCaml in which one can manipulate and generate code of a module, and implement it based on a simple translation to MetaOCaml. We show that our language solves the performance problem in functor applications pointed out by Inoue et al., and that it provides a suitable basis for writing code generators for modules.", "citation": "Not cited", "departments": ["University of Tsukuba", "University of Tsukuba"], "authors": ["Takahisa Watanabe.....http://dblp.org/pers/hd/w/Watanabe:Takahisa", "Yukiyoshi Kameyama.....http://dblp.org/pers/hd/k/Kameyama:Yukiyoshi"], "conf": "popl", "year": "2018", "pages": 7}