{"title": "Termination-checking for LLVM peephole optimizations.", "fields": ["rewriting", "single compilation unit", "correctness", "peephole optimization", "software bug"], "abstract": "Mainstream compilers contain a large number of peephole optimizations, which perform algebraic simplification of the input program with local rewriting of the code. These optimizations are a persistent source of bugs. Our recent research on Alive, a domain-specific language for expressing peephole optimizations in LLVM, addresses a part of the problem by automatically verifying the correctness of these optimizations and generating C++ code for use with LLVM.   This paper identifies a class of non-termination bugs that arise when a suite of peephole optimizations is executed until a fixed point. An optimization can undo the effect of another optimization in the suite, which results in non-terminating compilation. This paper (1) proposes a methodology to detect non-termination bugs with a suite of peephole optimizations, (2) identifies the necessary condition to ensure termination while composing peephole optimizations, and (3) provides debugging support by generating concrete input programs that cause non-terminating compilation. We have discovered 184 optimization sequences, involving 38 optimizations, that cause non-terminating compilation in LLVM with Alive-generated C++ code.", "citation": "Citations (4)", "departments": ["Rutgers University", "Rutgers University"], "authors": ["David Menendez.....http://dblp.org/pers/hd/m/Menendez:David", "Santosh Nagarakatte.....http://dblp.org/pers/hd/n/Nagarakatte:Santosh"], "conf": "icse", "year": "2016", "pages": 12}