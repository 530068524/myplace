{"title": "ALTER: exploiting breakable dependences for parallelization.", "fields": ["software transactional memory", "robust optimization", "programmer", "exploit", "automatic parallelization"], "abstract": "For decades, compilers have relied on dependence analysis to determine the legality of their transformations. While this conservative approach has enabled many robust optimizations, when it comes to parallelization there are many opportunities that can only be exploited by changing or re-ordering the dependences in the program.   This paper presents Alter: a system for identifying and enforcing parallelism that violates certain dependences while preserving overall program functionality. Based on programmer annotations, Alter exploits new parallelism in loops by reordering iterations or allowing stale reads. Alter can also infer which annotations are likely to benefit the program by using a test-driven framework.   Our evaluation of Alter demonstrates that it uncovers parallelism that is beyond the reach of existing static and dynamic tools. Across a selection of 12 performance-intensive loops, 9 of which have loop-carried dependences, Alter obtains an average speedup of 2.0x on 4 cores.", "citation": "Citations (20)", "departments": ["University of Pennsylvania", "Microsoft", "Microsoft"], "authors": ["Abhishek Udupa.....http://dblp.org/pers/hd/u/Udupa:Abhishek", "Kaushik Rajan.....http://dblp.org/pers/hd/r/Rajan:Kaushik", "William Thies.....http://dblp.org/pers/hd/t/Thies:William"], "conf": "pldi", "year": "2011", "pages": 12}