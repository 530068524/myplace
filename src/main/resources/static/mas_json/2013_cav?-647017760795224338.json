{"title": "Under-Approximating Loops in C Programs for Fast Counterexample Detection.", "fields": ["counterexample", "loop fusion", "spurious relationship", "quantifier elimination", "bounded function"], "abstract": "Many software model checkers only detect counterexamples with deep loops after exploring numerous spurious and increasingly longer counterexamples. We propose a technique that aims at eliminating this weakness by constructing auxiliary paths that represent the effect of a range of loop iterations. Unlike acceleration, which captures the exact effect of arbitrarily many loop iterations, these auxiliary paths may under-approximate the behaviour of the loops. In return, the approximation is sound with respect to the bit-vector semantics of programs.\n\nOur approach supports arbitrary conditions and assignments to arrays in the loop body, but may as a result introduce quantified conditionals. To reduce the resulting performance penalty, we present two quantifier elimination techniques specially geared towards our application.\n\nLoop under-approximation can be combined with a broad range of verification techniques. We paired our techniques with lazy abstraction and bounded model checking, and evaluated the resulting tool on a number of buffer overflow benchmarks, demonstrating its ability to efficiently detect deep counterexamples in C programs that manipulate arrays.", "citation": "Citations (21)", "year": "2013", "departments": ["University of Oxford", "University of Oxford", "Vienna University of Technology", "University of Oxford", "University of Oxford", "Vienna University of Technology"], "conf": "cav", "authors": ["Daniel Kroening.....http://dblp.org/pers/hd/k/Kroening:Daniel", "Matt Lewis.....http://dblp.org/pers/hd/l/Lewis:Matt", "Georg Weissenbacher.....http://dblp.org/pers/hd/w/Weissenbacher:Georg"], "pages": 16}