{"title": "Explaining inconsistent code.", "fields": ["dead code", "dead code elimination", "systematic code", "unreachable code", "loop invariant code motion"], "abstract": "A code fragment is inconsistent if it is not part of any normally terminating execution. Examples of such inconsistencies include code that is unreachable, code that always fails due to a run-time error, and code that makes conflicting assumptions about the program state. In this paper, we consider the problem of automatically explaining inconsistent code. This problem is difficult because traditional fault localization techniques do not apply. Our solution relies on a novel algorithm that takes an infeasible code fragment as input and generates a so-called error invariant automaton. The error invariant automaton is an abstraction of the input code fragment that only mentions program statements and facts that are relevant for understanding the cause of the inconsistency. We conducted a preliminary usability study which demonstrated that error invariant automata can help programmers better understand inconsistencies in code taken from real-world programs. In particular, access to an error invariant automata tripled the speed at which programmers could diagnose the cause of a code inconsistency.", "citation": "Citations (10)", "year": "2013", "departments": ["United Nations University", "New York University", "New York University"], "conf": "sigsoft", "authors": ["Martin Sch\u00e4f.....http://dblp.org/pers/hd/s/Sch=auml=f:Martin", "Daniel Schwartz-Narbonne.....http://dblp.org/pers/hd/s/Schwartz=Narbonne:Daniel", "Thomas Wies.....http://dblp.org/pers/hd/w/Wies:Thomas"], "pages": 11}