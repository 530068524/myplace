{"title": "Parallel type-checking with haskell using saturating LVars and stream generators.", "fields": ["racket", "haskell", "union type", "subtyping", "speedup"], "abstract": "Given the sophistication of recent type systems, unification-based type-checking and inference can be a time-consuming phase of compilation---especially when union types are combined with subtyping. It is natural to consider improving performance through parallelism, but these algorithms are challenging to parallelize due to complicated control structure and difficulties representing data in a way that is both efficient and supports concurrency. We provide techniques that address these problems based on the LVish approach to deterministic-by-default parallel programming. We extend LVish with  Saturating LVars , the first LVars implemented to release memory during the object's lifetime. Our design allows us to achieve a parallel speedup on worst-case (exponential) inputs of Hindley-Milner inference, and on the  Typed Racket type-checking algorithm , which yields up an 8.46\u00d7 parallel speedup on 14 cores for type-checking examples drawn from the Racket repository.", "citation": "Not cited", "year": "2016", "departments": ["Indiana University", "Indiana University", "Indiana University", "edX"], "conf": "ppopp", "authors": ["Ryan R. Newton.....http://dblp.org/pers/hd/n/Newton:Ryan_R=", "\u00d6mer S. Agacan.....http://dblp.org/pers/hd/a/Agacan:=Ouml=mer_S=", "Peter P. Fogg.....http://dblp.org/pers/hd/f/Fogg:Peter_P=", "Sam Tobin-Hochstadt.....http://dblp.org/pers/hd/t/Tobin=Hochstadt:Sam"], "pages": 12}