{"title": "Levity polymorphism.", "fields": ["parametric polymorphism", "ad hoc polymorphism", "haskell", "abstraction", "calling convention"], "abstract": "Parametric polymorphism is one of the linchpins of modern typed programming, but it comes with a real performance penalty. We describe this penalty; offer a principled way to reason about it (kinds as calling conventions); and propose levity polymorphism. This new form of polymorphism allows abstractions over calling conventions; we detail and verify restrictions that are necessary in order to compile levity-polymorphic functions. Levity polymorphism has created new opportunities in Haskell, including the ability to generalize nearly half of the type classes in GHC's standard library.", "citation": "Citations (2)", "departments": ["Bryn Mawr College", "Microsoft"], "authors": ["Richard A. Eisenberg.....http://dblp.org/pers/hd/e/Eisenberg:Richard_A=", "Simon Peyton Jones.....http://dblp.org/pers/hd/j/Jones:Simon_Peyton"], "conf": "pldi", "year": "2017", "pages": 15}