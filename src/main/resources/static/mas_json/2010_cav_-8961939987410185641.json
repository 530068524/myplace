{"title": "Constraint Solving for Program Verification: Theory and Practice by Example.", "fields": ["ranking", "algorithm", "automation", "computer science", "invariant", "theoretical computer science"], "abstract": "Program verification relies on the construction of auxiliary assertions describing various aspects of program behaviour, e.g., inductive invariants, resource bounds, and interpolants for characterizing reachable program states, ranking functions for approximating number of execution steps until program termination, or recurrence sets for demonstrating non-termination. Recent advances in the development of constraint solving tools offer an unprecedented opportunity for the efficient automation of this task. This tutorial presents a series of examples illustrating algorithms for the automatic construction of such auxiliary assertions by utilizing constraint solvers as the basic computing machinery, and optimizations that make these constraint-based algorithms work well in practice.", "citation": "Citations (13)", "year": "2010", "departments": ["Technische Universit\u00e4t M\u00fcnchen", "Technische Universit\u00e4t M\u00fcnchen"], "conf": "cav", "authors": ["Andrey Rybalchenko.....http://dblp.org/pers/hd/r/Rybalchenko:Andrey"], "pages": 15}