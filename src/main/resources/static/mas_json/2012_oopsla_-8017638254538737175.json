{"title": "Uniqueness and reference immutability for safe parallelism.", "fields": ["restrict", "alias", "uniqueness", "thread", "soundness"], "abstract": "A key challenge for concurrent programming is that side-effects (memory operations) in one thread can affect the behavior of another thread. In this paper, we present a type system to restrict the updates to memory to prevent these unintended side-effects. We provide a novel combination of immutable and unique (isolated) types that ensures safe parallelism (race freedom and deterministic execution). The type system includes support for polymorphism over type qualifiers, and can easily create cycles of immutable objects. Key to the system's flexibility is the ability to recover immutable or externally unique references after violating uniqueness without any explicit alias tracking. Our type system models a prototype extension to C# that is in active use by a Microsoft team. We describe their experiences building large systems with this extension. We prove the soundness of the type system by an embedding into a program logic.", "citation": "Citations (90)", "departments": ["University of Washington", "Microsoft", "Microsoft", "Microsoft", "Microsoft"], "authors": ["Colin S. Gordon.....http://dblp.org/pers/hd/g/Gordon:Colin_S=", "Matthew J. Parkinson.....http://dblp.org/pers/hd/p/Parkinson:Matthew_J=", "Jared Parsons.....http://dblp.org/pers/hd/p/Parsons:Jared", "Aleks Bromfield.....http://dblp.org/pers/hd/b/Bromfield:Aleks", "Joe Duffy.....http://dblp.org/pers/hd/d/Duffy:Joe"], "conf": "oopsla", "year": "2012", "pages": 20}