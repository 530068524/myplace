{"title": "Symmetry-Aware Predicate Abstraction for Shared-Variable Concurrent Programs.", "fields": ["debugging", "model checking", "thread", "predicate abstraction", "abstraction model checking"], "abstract": "Predicate abstraction is a key enabling technology for applying finitestate model checkers to programs written in mainstream languages. It has been used very successfully for debugging sequential system-level C code. Although model checking was originally designed for analyzing concurrent systems, there is little evidence of fruitful applications of predicate abstraction to shared-variable concurrent software. The goal of this paper is to close this gap. We have developed a symmetry-aware predicate abstraction strategy: it takes into account the replicated structure of C programs that consist of many threads executing the same procedure, and generates a Boolean program template whose multithreaded execution soundly overapproximates the concurrent C program. State explosion during model checking parallel instantiations of this template can now be absorbed by exploiting symmetry. We have implemented our method in the SATABS predicate abstraction framework, and demonstrate its superior performance over alternative approaches on a large range of synchronization programs.", "citation": "Citations (36)", "year": "2011", "departments": ["University of Oxford", "University of Oxford", "University of Oxford", "University of Oxford"], "conf": "cav", "authors": ["Alastair F. Donaldson.....http://dblp.org/pers/hd/d/Donaldson:Alastair_F=", "Alexander Kaiser.....http://dblp.org/pers/hd/k/Kaiser_0001:Alexander", "Daniel Kroening.....http://dblp.org/pers/hd/k/Kroening:Daniel", "Thomas Wahl.....http://dblp.org/pers/hd/w/Wahl:Thomas"], "pages": 16}