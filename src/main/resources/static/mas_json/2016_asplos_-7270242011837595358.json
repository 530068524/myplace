{"title": "How to Build Static Checking Systems Using Orders of Magnitude Less Code.", "fields": ["source lines of code", "debugging", "preprocessor", "programming language specification", "dart"], "abstract": "Modern static bug finding tools are complex. They typically consist of hundreds of thousands of lines of code, and most of them are wedded to one language (or even one compiler). This complexity makes the systems hard to understand, hard to debug, and hard to retarget to new languages, thereby dramatically limiting their scope. This paper reduces checking system complexity by addressing a fundamental assumption, the assumption that checkers must depend on a full-blown language specification and compiler front end. Instead, our program checkers are based on drastically incomplete language grammars (\"micro-grammars\") that describe only portions of a language relevant to a checker. As a result, our implementation is tiny-roughly 2500 lines of code, about two orders of magnitude smaller than a typical system. We hope that this dramatic increase in simplicity will allow people to use more checkers on more systems in more languages.   We implement our approach in \u03bcchex, a language-agnostic framework for writing static bug checkers. We use it to build micro-grammar based checkers for six languages (C, the C preprocessor, C++, Java, JavaScript, and Dart) and find over 700 errors in real-world projects.", "citation": "Citations (8)", "year": "2016", "departments": ["Stanford University", "Stanford University", "Stanford University"], "conf": "asplos", "authors": ["Fraser Brown.....http://dblp.org/pers/hd/b/Brown:Fraser", "Andres N\u00f6tzli.....http://dblp.org/pers/hd/n/N=ouml=tzli:Andres", "Dawson R. Engler.....http://dblp.org/pers/hd/e/Engler:Dawson_R="], "pages": 15}