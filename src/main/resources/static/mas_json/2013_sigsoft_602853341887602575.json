{"title": "Preventing database deadlocks in applications.", "fields": ["query by example", "deadlock", "table", "sql", "context switch"], "abstract": "Many organizations deploy applications that use databases by sending Structured Query Language (SQL) statements to them and obtaining data that result from the execution of these statements. Since applications often share the same databases concurrently, database deadlocks routinely occur in these databases resulting in major performance degradation in these applications. Database engines do not prevent database deadlocks for the same reason that the schedulers of operating system kernels do not preempt processes in a way to avoid race conditions and deadlocks - it is not feasible to find an optimal context switching schedule quickly for multiple processes (and SQL statements), and the overhead of doing it is prohibitive.     We created a novel approach that combines run-time monitoring, which automatically prevents database deadlocks, with static analysis, which detects hold-and-wait cycles that specify how resources (e.g., database tables) are held in contention during executions of SQL statements. We rigorously evaluated our approach. For a realistic case of over 1,200 SQL statements, our algorithm detects all hold-and-wait cycles in less than two seconds. We built a toolset and experimented with three applications. Our tool prevented all existing database deadlocks in these applications and increased their throughputs by up to three orders of magnitude.", "citation": "Citations (12)", "departments": ["University of Illinois at Chicago", "University of Illinois at Chicago", "University of Illinois at Chicago", "University of Illinois at Chicago"], "authors": ["Mark Grechanik.....http://dblp.org/pers/hd/g/Grechanik:Mark", "B. M. Mainul Hossain.....http://dblp.org/pers/hd/h/Hossain:B=_M=_Mainul", "Ugo Buy.....http://dblp.org/pers/hd/b/Buy:Ugo", "Haisheng Wang.....http://dblp.org/pers/hd/w/Wang:Haisheng"], "conf": "sigsoft", "year": "2013", "pages": 11}