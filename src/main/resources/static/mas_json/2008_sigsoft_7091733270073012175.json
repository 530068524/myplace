{"title": "Deriving input syntactic structure from execution.", "fields": ["implementation", "debugging", "abstract syntax tree", "reverse engineering", "rule based machine translation"], "abstract": "Program input syntactic structure is essential for a wide range of applications such as test case generation, software debugging and network security. However, such important information is often not available (e.g., most malware programs make use of secret protocols to communicate) or not directly usable by machines (e.g., many programs specify their inputs in plain text or other random formats). Furthermore, many programs claim they accept inputs with a published format, but their implementations actually support a subset or a variant. Based on the observations that input structure is manifested by the way input symbols are used during execution and most programs take input with top-down or bottom-up grammars, we devise two dynamic analyses, one for each grammar category. Our evaluation on a set of real-world programs shows that our technique is able to precisely reverse engineer input syntactic structure from execution.", "citation": "Citations (28)", "departments": ["Purdue University", "Purdue University"], "authors": ["Zhiqiang Lin.....http://dblp.org/pers/hd/l/Lin:Zhiqiang", "Xiangyu Zhang.....http://dblp.org/pers/hd/z/Zhang_0001:Xiangyu"], "conf": "sigsoft", "year": "2008", "pages": 11}