{"title": "Morph algorithms on GPUs.", "fields": ["graph", "minimum spanning tree", "boolean satisfiability problem", "speedup", "thread"], "abstract": "There is growing interest in using GPUs to accelerate graph algorithms such as breadth-first search, computing page-ranks, and finding shortest paths. However, these algorithms do not modify the graph structure, so their implementation is relatively easy compared to general graph algorithms like mesh generation and refinement, which  morph  the underlying graph in non-trivial ways by adding and removing nodes and edges. We know relatively little about how to implement morph algorithms efficiently on GPUs.   In this paper, we present and study four morph algorithms: (i) a computational geometry algorithm called Delaunay Mesh Refinement (DMR), (ii) an approximate SAT solver called Survey Propagation (SP), (iii) a compiler analysis called Points-To Analysis (PTA), and (iv) Boruvka's Minimum Spanning Tree algorithm (MST). Each of these algorithms modifies the graph data structure in different ways and thus poses interesting challenges.   We overcome these challenges using algorithmic and GPU-specific optimizations. We propose efficient techniques to perform concurrent subgraph addition, subgraph deletion, conflict detection and several optimizations to improve the scalability of morph algorithms. For an input mesh with 10 million triangles, our DMR code achieves an 80x speedup over the highly optimized serial  Triangle  program and a 2.3x speedup over a multicore implementation running with 48 threads. Our SP code is 3x faster than a multicore implementation with 48 threads on an input with 1 million literals. The PTA implementation is able to analyze six SPEC 2000 benchmark programs in just 74 milliseconds, achieving a geometric mean speedup of 9.3x over a 48-thread multicore version. Our MST code is slower than a multicore version with 48 threads for sparse graphs but significantly faster for denser graphs.   This work provides several insights into how other morph algorithms can be efficiently implemented on GPUs.", "citation": "Citations (84)", "year": "2013", "departments": ["University of Texas at Austin", "Texas State University", "University of Texas at Austin"], "conf": "ppopp", "authors": ["Rupesh Nasre.....http://dblp.org/pers/hd/n/Nasre:Rupesh", "Martin Burtscher.....http://dblp.org/pers/hd/b/Burtscher:Martin", "Keshav Pingali.....http://dblp.org/pers/hd/p/Pingali:Keshav"], "pages": 10}