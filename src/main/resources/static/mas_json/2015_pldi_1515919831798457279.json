{"title": "Algorithmic debugging of real-world haskell programs: deriving dependencies from the cost centre stack.", "fields": ["profiling", "debugger", "algorithmic program debugging", "stack trace", "haskell", "lazy evaluation"], "abstract": "Existing algorithmic debuggers for Haskell require a transformation of all modules in a program, even libraries that the user does not want to debug and which may use language features not supported by the debugger. This is a pity, because a promising approach to debugging is therefore not applicable to many real-world programs. We use the cost centre stack from the Glasgow Haskell Compiler profiling environment together with runtime value observations as provided by the Haskell Object Observation Debugger (HOOD) to collect enough information for algorithmic debugging. Program annotations are in suspected modules only. With this technique algorithmic debugging is applicable to a much larger set of Haskell programs. This demonstrates that for functional languages in general a simple stack trace extension is useful to support tasks such as profiling and debugging.", "citation": "Not cited", "departments": ["University of Kent", "University of Kent"], "authors": ["Maarten Faddegon.....http://dblp.org/pers/hd/f/Faddegon:Maarten", "Olaf Chitil.....http://dblp.org/pers/hd/c/Chitil:Olaf"], "conf": "pldi", "year": "2015", "pages": 10}