{"title": "Program synthesis from polymorphic refinement types.", "fields": ["recursion", "sorting algorithm", "program synthesis", "refinement calculus", "decidability"], "abstract": "We present a method for synthesizing recursive functions that provably satisfy a given specification in the form of a polymorphic refinement type. We observe that such specifications are particularly suitable for program synthesis for two reasons. First, they offer a unique combination of expressive power and decidability, which enables automatic verification\u2014and hence synthesis\u2014of nontrivial programs. Second, a type-based specification for a program can often be effectively decomposed into independent specifications for its components, causing the synthesizer to consider fewer component combinations and leading to a combinatorial reduction in the size of the search space. At the core of our synthesis procedure is a newalgorithm for refinement type checking, which supports specification decomposition. We have evaluated our prototype implementation on a large set of synthesis problems and found that it exceeds the state of the art in terms of both scalability and usability. The tool was able to synthesize more complex programs than those reported in prior work (several sorting algorithms and operations on balanced search trees), as well as most of the benchmarks tackled by existing synthesizers, often starting from a more concise and intuitive user input.", "citation": "Citations (60)", "departments": ["Massachusetts Institute of Technology", "Massachusetts Institute of Technology", "Massachusetts Institute of Technology"], "authors": ["Nadia Polikarpova.....http://dblp.org/pers/hd/p/Polikarpova:Nadia", "Ivan Kuraj.....http://dblp.org/pers/hd/k/Kuraj:Ivan", "Armando Solar-Lezama.....http://dblp.org/pers/hd/s/Solar=Lezama:Armando"], "conf": "pldi", "year": "2016", "pages": 17}