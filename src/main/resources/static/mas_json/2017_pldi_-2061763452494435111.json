{"title": "Miniphases: compilation using modular and efficient tree transformations.", "fields": ["compiler correctness", "interprocedural optimization", "loop optimization", "functional compiler", "compiler construction"], "abstract": "Production compilers commonly perform dozens of transformations on an intermediate representation. Running those transformations in separate passes harms performance. One approach to recover performance is to combine transformations by hand in order to reduce number of passes. Such an approach harms modularity, and thus makes it hard to maintain and evolve a compiler over the long term, and makes reasoning about performance harder. This paper describes a methodology that allows a compiler writer to define multiple transformations separately, but fuse them into a single traversal of the intermediate representation when the compiler runs. This approach has been implemented in a compiler for the Scala language. Our performance evaluation indicates that this approach reduces the running time of tree transformations by 35% and shows that this is due to improved cache friendliness. At the same time, the approach improves total memory consumption by reducing the object tenuring rate by 50%. This approach enables compiler writers to write transformations that are both modular and fast at the same time.", "citation": "Citations (1)", "departments": ["\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne", "University of Waterloo", "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne"], "authors": ["Dmitry Petrashko.....http://dblp.org/pers/hd/p/Petrashko:Dmitry", "Ondrej Lhot\u00e1k.....http://dblp.org/pers/hd/l/Lhot=aacute=k:Ondrej", "Martin Odersky.....http://dblp.org/pers/hd/o/Odersky:Martin"], "conf": "pldi", "year": "2017", "pages": 16}