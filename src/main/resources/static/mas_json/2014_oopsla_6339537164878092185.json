{"title": "Compiler verification meets cross-language linking via data abstraction.", "fields": ["manifest expression", "inline expansion", "interprocedural optimization", "functional compiler", "loop invariant code motion"], "abstract": "Many real programs are written in multiple different programming languages, and supporting this pattern creates challenges for formal compiler verification. We describe our Coq verification of a compiler for a high-level language, such that the compiler correctness theorem allows us to derive partial-correctness Hoare-logic theorems for programs built by linking the assembly code output by our compiler and assembly code produced by other means. Our compiler supports such tricky features as storable cross-language function pointers, without giving up the usual benefits of being able to verify different compiler phases (including, in our case, two classic optimizations) independently. The key technical innovation is a mixed operational and axiomatic semantics for the source language, with a built-in notion of  abstract data types , such that compiled code interfaces with other languages only through axiomatically specified methods that mutate encapsulated private data, represented in whatever formats are most natural for those languages.", "citation": "Citations (10)", "departments": ["Massachusetts Institute of Technology", "Princeton University", "Massachusetts Institute of Technology"], "authors": ["Peng Wang.....http://dblp.org/pers/hd/w/Wang:Peng", "Santiago Cuellar.....http://dblp.org/pers/hd/c/Cuellar:Santiago", "Adam Chlipala.....http://dblp.org/pers/hd/c/Chlipala:Adam"], "conf": "oopsla", "year": "2014", "pages": 16}