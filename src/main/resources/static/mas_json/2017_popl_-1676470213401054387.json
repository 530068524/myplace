{"title": "Modules, abstraction, and parametric polymorphism.", "fields": ["parametric polymorphism", "logical equivalence", "parametricity", "mathematical proof", "singleton"], "abstract": "Reynolds's Abstraction theorem forms the mathematical foundation for data abstraction. His setting was the polymorphic lambda calculus. Today, many modern languages, such as the ML family, employ rich module systems designed to give more expressive support for data abstraction than the polymorphic lambda calculus, but analogues of the Abstraction theorem for such module systems have lagged far behind.     We give an account of the Abstraction theorem for a modern module calculus supporting generative and applicative functors, higher-order functors, sealing, and translucent signatures. The main issues to be overcome are: (1) the fact that modules combine both types and terms, so they must be treated as both simultaneously, (2) the effect discipline that models the distinction between transparent and opaque modules, and (3) a very rich language of type constructors supporting singleton kinds. We define logical equivalence for modules and show that it coincides with contextual equivalence. This substantiates the folk theorem that modules are good for data abstraction. All our proofs are formalized in Coq.", "citation": "Citations (2)", "departments": ["Carnegie Mellon University"], "authors": ["Karl Crary.....http://dblp.org/pers/hd/c/Crary:Karl"], "conf": "popl", "year": "2017", "pages": 14}