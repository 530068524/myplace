{"title": "The Spirit of Ghost Code.", "fields": ["erasure", "bisimulation", "primitive data type", "redundant code", "unreachable code", "dead code"], "abstract": "In the context of deductive program verification, ghost code is part of the program that is added for the purpose of specification. Ghost code must not interfere with regular code, in the sense that it can be erased without observable difference in the program outcome. In particular, ghost data cannot participate in regular computations and ghost code cannot mutate regular data or diverge. The idea exists in the folklore since the early notion of auxiliary variables and is implemented in many state-of-the-art program verification tools. However, a rigorous definition and treatment of ghost code is surprisingly subtle and few formalizations exist.\n\nIn this article, we describe a simple ML-style programming language with mutable state and ghost code. Non-interference is ensured by a type system with effects, which allows, notably, the same data types and functions to be used in both regular and ghost code. We define the procedure of ghost code erasure and we prove its safety using bisimulation. A similar type system, with numerous extensions which we briefly discuss, is implemented in the program verification environment Why3.", "citation": "Citations (14)", "year": "2014", "departments": ["French Institute for Research in Computer Science and Automation", "Centre national de la recherche scientifique", "French Institute for Research in Computer Science and Automation", "French Institute for Research in Computer Science and Automation", "French Institute for Research in Computer Science and Automation", "French Institute for Research in Computer Science and Automation"], "conf": "cav", "authors": ["Jean-Christophe Filli\u00e2tre.....http://dblp.org/pers/hd/f/Filli=acirc=tre:Jean=Christophe", "L\u00e9on Gondelman.....http://dblp.org/pers/hd/g/Gondelman:L=eacute=on", "Andrei Paskevich.....http://dblp.org/pers/hd/p/Paskevich:Andrei"], "pages": 16}