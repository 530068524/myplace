{"title": "Functors are Type Refinement Systems.", "fields": ["higher category theory", "closed category", "limit", "categorical logic", "functor category"], "abstract": "The standard reading of type theory through the lens of category theory is based on the idea of viewing a type system as a category of well-typed terms. We propose a basic revision of this reading: rather than interpreting type systems as categories, we describe them as  functors  from a category of typing derivations to a category of underlying terms. Then, turning this around, we explain how in fact  any  functor gives rise to a generalized type system, with an abstract notion of typing judgment, typing derivations and typing rules. This leads to a purely categorical reformulation of various natural classes of type systems as natural classes of functors.   The main purpose of this paper is to describe the general framework (which can also be seen as providing a categorical analysis of  refinement types ), and to present a few applications. As a larger case study, we revisit Reynolds' paper on ``The Meaning of Types'' (2000), showing how the paper's main results may be reconstructed along these lines.", "citation": "Citations (7)", "departments": ["Paris Diderot University", "French Institute for Research in Computer Science and Automation"], "authors": ["Paul-Andr\u00e9 Melli\u00e8s.....http://dblp.org/pers/hd/m/Melli=egrave=s:Paul=Andr=eacute=", "Noam Zeilberger.....http://dblp.org/pers/hd/z/Zeilberger:Noam"], "conf": "popl", "year": "2015", "pages": 14}