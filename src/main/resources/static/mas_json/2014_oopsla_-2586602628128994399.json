{"title": "Tardis: affordable time-travel debugging in managed runtimes.", "fields": ["type safety", "javascript", "overhead", "debugger", "breakpoint"], "abstract": "Developers who set a breakpoint a few statements too late or who are trying to diagnose a subtle bug from a single core dump often wish for a time-traveling debugger. The ability to rewind time to see the exact sequence of statements and program values leading to an error has great intuitive appeal but, due to large time and space overheads, time traveling debuggers have seen limited adoption. A managed runtime, such as the Java JVM or a JavaScript engine, has already paid much of the cost of providing core features - type safety, memory management, and virtual IO - that can be reused to implement a low overhead time-traveling debugger. We leverage this insight to design and build affordable time-traveling debuggers for managed languages. Tardis realizes our design: it provides affordable time-travel with an average overhead of only 7% during normal execution, a rate of 0.6MB/s of history logging, and a worst-case 0.68s time-travel latency on our benchmark applications. Tardis can also debug optimized code using time-travel to reconstruct state. This capability, coupled with its low overhead, makes Tardis suitable for use as the default debugger for managed languages, promising to bring time-traveling debugging into the mainstream and transform the practice of debugging.", "citation": "Citations (10)", "departments": ["University College London", "Microsoft"], "authors": ["Earl T. Barr.....http://dblp.org/pers/hd/b/Barr:Earl_T=", "Mark Marron.....http://dblp.org/pers/hd/m/Marron:Mark"], "conf": "oopsla", "year": "2014", "pages": 16}