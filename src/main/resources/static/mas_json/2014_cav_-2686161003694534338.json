{"title": "Lazy Annotation Revisited.", "fields": ["counterexample", "horn clause", "constraint logic programming", "backtracking", "bounded function"], "abstract": "Lazy Annotation is a method of software model checking that performs a backtracking search for a symbolic counterexample. When the search backtracks, the program is annotated with a learned fact that constrains future search. In this sense, the method is closely analogous to conflict-driven clause learning in SAT solvers.\n\nIn this paper, we develop several improvements to the basic Lazy Annotation approach. The resulting algorithm is compared both conceptually and experimentally to two approaches based on similar principles but using different learning strategies: unfolding-based Bounded Model Checking and Property-Driven Reachability.", "citation": "Citations (17)", "year": "2014", "departments": ["Microsoft"], "conf": "cav", "authors": ["Kenneth L. McMillan.....http://dblp.org/pers/hd/m/McMillan:Kenneth_L="], "pages": 17}