{"title": "IPv6 Lookups using Distributed and Load Balanced Bloom Filters for 100Gbps Core Router Line Cards.", "fields": ["prefix", "hop", "longest prefix match", "yottabyte", "core router"], "abstract": "Internet line speeds are expected to reach 100Gbps in a few years. To match these line rates, a single router line card needs to forward more than 150 million packets per second. This requires a corresponding amount of longest prefix match operations. Furthermore, the increased use of IPv6 requires core routers to perform the longest prefix match on several hundred thousand prefixes varying in length up to 64 bits. It is a challenge to scale existing algorithms simultaneously in the three dimensions of increased throughput, table size and prefix length. Recently, Bloom filter-based IP lookup algorithms have been proposed. While these algorithms can take advantage of hardware parallelism and fast on-chip memory to achieve high performance, they have significant drawbacks (discussed in the paper) that impede their use in practice. In this paper, we present the Distributed and Load Balanced Bloom Filters to address these drawbacks. We develop the practical IP lookup algorithm for use in 100Gbps line cards. The regular and modular hardware architecture of our scheme directly maps to the state-of-art ASICs and FPGAs with reasonable resource consumption. Also, our scheme outperforms TCAMs on most metrics including cost, power dissipation, and board footprint. I. INTRODUCTION To keep up with ever-increasing optical transmission rates, Internet core routers need to forward packets as fast as possible. This requires faster and faster implementations of packet-processing functions such as IP lookup - the Longest Prefix Matching (LPM) operation needed to determine the next-hop for incoming packets. The next hop is determined by first performing a longest prefix match of the destination IP address of incoming packets against a set of prefixes stored in a prefix table. Once a match is found, the next-hop information associated with the matched prefix is retrieved. The prefix table can typically have a few hundred thousand prefixes, with prefix lengths varying from 8 to 32 for IPv4 addresses. For IPv6, the", "citation": "Citations (144)", "departments": ["Bell Labs", "Bell Labs", "Bell Labs", "Bell Labs"], "authors": ["Haoyu Song.....http://dblp.org/pers/hd/s/Song:Haoyu", "Fang Hao.....http://dblp.org/pers/hd/h/Hao:Fang", "Murali S. Kodialam.....http://dblp.org/pers/hd/k/Kodialam:Murali_S=", "T. V. Lakshman.....http://dblp.org/pers/hd/l/Lakshman:T=_V="], "conf": "infocom", "year": "2009", "pages": 9}