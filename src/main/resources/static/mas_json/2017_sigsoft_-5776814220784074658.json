{"title": "A compiler and verifier for page access oblivious computation.", "fields": ["overhead", "trusted computing base", "page fault", "toolchain", "address space"], "abstract": "Trusted hardware primitives such as Intel's SGX instructions provide applications with a protected address space, called an enclave, for trusted code and data. However, building enclaves that preserve confidentiality of sensitive data continues to be a challenge. The developer must not only avoid leaking secrets via the enclave's outputs but also prevent leaks via side channels induced by interactions with the untrusted platform. Recent attacks have demonstrated that simply observing the page faults incurred during an enclave's execution can reveal its secrets if the enclave makes data accesses or control flow decisions based on secret values. To address this problem, a developer needs compilers to automatically produce confidential programs, and verification tools to certify the absence of secret-dependent page access patterns (a property that we formalize as page-access obliviousness). To that end, we implement an efficient compiler for a type and memory-safe language, a compiler pass that enforces page-access obliviousness with low runtime overheads, and an automatic, modular verifier that certifies page-access obliviousness at the machine-code level, thus removing the compiler from our trusted computing base. We evaluate this toolchain on several machine learning algorithms and image processing routines that we run within SGX enclaves.", "citation": "Citations (2)", "departments": ["University of California, Berkeley", "Microsoft", "University of California, Berkeley"], "authors": ["Rohit Sinha.....http://dblp.org/pers/hd/s/Sinha_0001:Rohit", "Sriram K. Rajamani.....http://dblp.org/pers/hd/r/Rajamani:Sriram_K=", "Sanjit A. Seshia.....http://dblp.org/pers/hd/s/Seshia:Sanjit_A="], "conf": "sigsoft", "year": "2017", "pages": 12}