{"title": "Mining library specifications using inductive logic programming.", "fields": ["code reuse", "inductive logic programming", "prolog", "application programming interface", "datalog"], "abstract": "Software libraries organize useful functionalities in order to promote modularity and code reuse. A typical library is used by client programs through an application programming interface (API) that hides its internals from the client. Typically, the rules governing the correct usage of the API are documented informally. In many cases, libraries may have complex API usage rules and unclear documentation. As a result, the behaviour of the library under some corner cases may not be well understood by the programmer. Formal specifications provide a precise understanding of the API behaviour.   We propose a methodology for learning interface specifications using Inductive Logic Programming (ILP). Our technique runs several unit tests on the library in order to generate relations describing the operation of the library. The data collected from these tests are used by an inductive learner to obtain rich Datalog/Prolog specifications. Such specifications capture essential properties of interest to the user. They may be used for applications such as reverse engineering the library internals or constructing checks on the application code to enforce proper API usage along with other properties of interest.", "citation": "Citations (24)", "departments": ["Princeton University", "Princeton University", "Princeton University"], "authors": ["Sriram Sankaranarayanan.....http://dblp.org/pers/hd/s/Sankaranarayanan:Sriram", "Franjo Ivancic.....http://dblp.org/pers/hd/i/Ivancic:Franjo", "Aarti Gupta.....http://dblp.org/pers/hd/g/Gupta:Aarti"], "conf": "icse", "year": "2008", "pages": 10}