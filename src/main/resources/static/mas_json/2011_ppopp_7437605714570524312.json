{"title": "Cooperative reasoning for preemptive execution.", "fields": ["source lines of code", "serialization", "atomicity", "thread", "legacy system"], "abstract": "We propose a cooperative methodology for multithreaded software, where threads use traditional synchronization idioms such as locks, but additionally document each point of potential thread interference with a \"yield\" annotation. Under this methodology, code between two successive yield annotations forms a serializable transaction that is amenable to sequential reasoning. This methodology reduces the burden of reasoning about thread interleavings by indicating only those interference points that matter. We present experimental results showing that very few yield annotations are required, typically one or two per thousand lines of code. We also present dynamic analysis algorithms for detecting cooperability violations, where thread interference is not documented by a yield, and for yield annotation inference for legacy software.", "citation": "Citations (20)", "year": "2011", "departments": ["University of California, Santa Cruz", "University of California, Santa Cruz", "University of California, Santa Cruz"], "conf": "ppopp", "authors": ["Jaeheon Yi.....http://dblp.org/pers/hd/y/Yi:Jaeheon", "Caitlin Sadowski.....http://dblp.org/pers/hd/s/Sadowski:Caitlin", "Cormac Flanagan.....http://dblp.org/pers/hd/f/Flanagan:Cormac"], "pages": 10}