{"title": "Fast concurrent queues for x86 processors.", "fields": ["concurrent data structure", "multi core processor", "x86", "fifo", "fetch and add"], "abstract": "Conventional wisdom in designing concurrent data structures is to use the most powerful synchronization primitive, namely compare-and-swap (CAS), and to avoid contended hot spots. In building concurrent FIFO queues, this reasoning has led researchers to propose  combining-based  concurrent queues.   This paper takes a different approach, showing how to rely on fetch-and-add (F&A), a less powerful primitive that is available on x86 processors, to construct a  nonblocking (lock-free) linearizable concurrent FIFO queue  which, despite the F&A being a contended hot spot, outperforms combining-based implementations by 1.5x to 2.5x in all concurrency levels on an x86 server with four multicore processors, in both single-processor and multi-processor executions.", "citation": "Citations (78)", "year": "2013", "departments": ["Tel Aviv University", "Tel Aviv University"], "conf": "ppopp", "authors": ["Adam Morrison.....http://dblp.org/pers/hd/m/Morrison_0001:Adam", "Yehuda Afek.....http://dblp.org/pers/hd/a/Afek:Yehuda"], "pages": 10}