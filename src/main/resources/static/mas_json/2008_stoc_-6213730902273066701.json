{"title": "A (de)constructive approach to program checking.", "fields": ["program analysis", "completeness", "graph isomorphism", "algorithm", "constructive", "complexity class", "connectivity", "program derivation", "matrix multiplication", "theoretical computer science"], "abstract": "Program checking, program self-correcting and program self-testing were pioneered by [Blum and Kannan] and [Blum, Luby and Rubinfeld] in the mid eighties as a new way to gain confidence in software, by considering program correctness on an input by input basis rather than full program verification. Work in the field of program checking focused on designing, for specific functions, checkers, testers and correctors which are more efficient than the best program  known  for the function. These were designed utilizing specific algebraic, combinatorial or completeness properties of the function at hand. In this work we introduce a novel composition methodology for improving the efficiency of program checkers. We use this approach to design a variety of program checkers that are provably more efficient, in terms of circuit depth, than the  optimal  program for computing the function being checked. Extensions of this methodology for the cases of program testers and correctors are also presented. In particular, we show: For all i \u2265 1, every language in RNC i  (that is NCO-hard under NCZ-reductions) has a program checker in RNC i-1 . In addition, for all i \u2265 1, every language in RNC i  (that is NCO-hard under ACZ-reductions) has a program corrector, tester and checker in RAC i-1 . This is the first time checkers are designed for a  wide  class of functions  characterized only by its complexity , rather than by algebraic or combinatorial properties. This characterization immediately yields new and efficient checkers for languages such as graph connectivity, perfect matching and bounded-degree graph isomorphism. Constant-depth checkers, testers and correctors for matrix multiplication, inversion, determinant and rank. All previous program checkers, testers and correctors for these problems run in nearly logarithmic depth. Moreover, except for matrix multiplication, they all require the use of the library notion of [Blum-Luby-Rubinfeld], in which checkers have access to a library of programs for various matrix functions, rather than only having access to a program for the function being checked. Furthermore, we provide conditions under which program libraries can be eliminated. Important ingredients in these results are new and very efficient checkers for complete languages in low complexity classes (e.g. NCO). These constructions are based on techniques that were developed in the field of cryptography.", "citation": "Citations (19)", "year": "2008", "departments": ["Weizmann Institute of Science", "Massachusetts Institute of Technology", "Harvard University", "Institute for Advanced Study", "Massachusetts Institute of Technology"], "conf": "stoc", "authors": ["Shafi Goldwasser.....http://dblp.org/pers/hd/g/Goldwasser:Shafi", "Dan Gutfreund.....http://dblp.org/pers/hd/g/Gutfreund:Dan", "Alexander Healy.....http://dblp.org/pers/hd/h/Healy:Alexander", "Tali Kaufman.....http://dblp.org/pers/hd/k/Kaufman:Tali", "Guy N. Rothblum.....http://dblp.org/pers/hd/r/Rothblum:Guy_N="], "pages": 10}