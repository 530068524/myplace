{"title": "VirtCL: a framework for OpenCL device abstraction and management.", "fields": ["distributed memory", "virtual device", "general purpose computing on graphics processing units", "memory model", "abstraction layer"], "abstract": "The interest in using multiple graphics processing units (GPUs) to accelerate applications has increased in recent years. However, the existing heterogeneous programming models (e.g., OpenCL) abstract details of GPU devices at the per-device level and require programmers to explicitly schedule their kernel tasks on a system equipped with multiple GPU devices. Unfortunately, multiple applications running on a multi-GPU system may compete for some of the GPU devices while leaving other GPU devices unused. Moreover, the distributed memory model defined in OpenCL, where each device has its own memory space, increases the complexity of managing the memory among multiple GPU devices. In this article we propose a framework (called VirtCL) that reduces the programming burden by acting as a layer between the programmer and the native OpenCL run-time system for abstracting multiple devices into a single virtual device and for scheduling computations and communications among the multiple devices. VirtCL comprises two main components: (1) a front-end library, which exposes primary OpenCL APIs and the virtual device, and (2) a back-end run-time system (called CLDaemon) for scheduling and dispatching kernel tasks based on a history-based scheduler. The front-end library forwards computation requests to the back-end CLDaemon, which then schedules and dispatches the requests. We also propose a history-based scheduler that is able to schedule kernel tasks in a contention- and communication-aware manner. Experiments demonstrated that the VirtCL framework introduced a small overhead (mean of 6%) but outperformed the native OpenCL run-time system for most benchmarks in the Rodinia benchmark suite, which was due to the abstraction layer eliminating the time-consuming initialization of OpenCL contexts. We also evaluated different scheduling policies in VirtCL with a real-world application (clsurf) and various synthetic workload traces. The results indicated that the VirtCL framework provides scalability for multiple kernel tasks running on multi-GPU systems.", "citation": "Citations (13)", "year": "2015", "departments": ["National Chiao Tung University", "National Chiao Tung University", "National Chiao Tung University", "National Chiao Tung University"], "conf": "ppopp", "authors": ["Yi-Ping You.....http://dblp.org/pers/hd/y/You:Yi=Ping", "Hen-Jung Wu.....http://dblp.org/pers/hd/w/Wu:Hen=Jung", "Yeh-Ning Tsai.....http://dblp.org/pers/hd/t/Tsai:Yeh=Ning", "Yen-Ting Chao.....http://dblp.org/pers/hd/c/Chao:Yen=Ting"], "pages": 12}