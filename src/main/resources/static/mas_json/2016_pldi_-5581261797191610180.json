{"title": "Refinement types for TypeScript.", "fields": ["type safety", "initialization", "typescript", "static single assignment form", "formal system"], "abstract": "We present Refined TypeScript (RSC), a lightweight refinement type system for TypeScript, that enables static verification of higher-order, imperative programs. We develop a formal system for RSC that delineates the interaction between refinement types and mutability, and enables flow-sensitive reasoning by translating input programs to an equivalent intermediate SSA form. By establishing type safety for the intermediate form, we prove safety for the input programs. Next, we extend the core to account for imperative and dynamic features of TypeScript, including overloading, type reflection, ad hoc type hierarchies and object initialization. Finally, we evaluate RSC on a set of real-world benchmarks, including parts of the Octane benchmarks, D3, Transducers, and the TypeScript compiler. We show how RSC successfully establishes a number of value dependent properties, such as the safety of array accesses and downcasts, while incurring a modest overhead in type annotations and code restructuring.", "citation": "Citations (9)", "departments": ["University of California, San Diego", "University of California, San Diego", "University of California, San Diego"], "authors": ["Panagiotis Vekris.....http://dblp.org/pers/hd/v/Vekris:Panagiotis", "Benjamin Cosman.....http://dblp.org/pers/hd/c/Cosman:Benjamin", "Ranjit Jhala.....http://dblp.org/pers/hd/j/Jhala:Ranjit"], "conf": "pldi", "year": "2016", "pages": 16}